(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "name" defined at system.ads:69, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  0
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type name__ref =
  { mutable name__content "model_trace:" "name:" : name }
 
 function name__ref___projection 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc 
   (x : name__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "name" defined at system.ads:69, created in Gnat2Why.Types.Translate_Type *)
module System__name__rep
 use        System__name
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__name.name, 
 predicate in_range = System__name.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "system_name" defined at system.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 70 0 0#"model" "model_trace:5684" "name:System_Name" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:131, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type address__ref =
  { mutable address__content "model_trace:" "name:" : address }
 
 function address__ref___projection 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc 
   (x : address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "address" defined at system.ads:131, created in Gnat2Why.Types.Translate_Type *)
module System__address__rep
 use        System__address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__address.address, 
 predicate in_range = System__address.in_range, 
 predicate in_range_int = System__address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_address" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_address #"system.ads" 92 0 0#"model" "model_trace:5808" "name:Null_Address" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left" defined at system.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 100 0 0#"model" "model_trace:5853" "name:Left" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 100 0 0#"model" "model_trace:5860" "name:Right" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function olt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate olt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 101 0 0#"model" "name:Left" "model_trace:5880" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 101 0 0#"model" "name:Right" "model_trace:5887" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ole 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ole__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 102 0 0#"model" "name:Left" "model_trace:5907" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 102 0 0#"model" "name:Right" "model_trace:5914" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:102, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ogt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ogt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 103 0 0#"model" "name:Left" "model_trace:5934" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 103 0 0#"model" "name:Right" "model_trace:5941" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:103, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oge 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oge__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 104 0 0#"model" "name:Left" "model_trace:5961" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 104 0 0#"model" "name:Right" "model_trace:5968" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oeq 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oeq__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for axiomatizing type "bit_order" defined at system.ads:114, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type bit_order__ref =
  { mutable bit_order__content "model_trace:" "name:" : bit_order }
 
 function bit_order__ref___projection 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bit_order" defined at system.ads:114, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order__rep
 use        System__bit_order
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__bit_order.bit_order, 
 predicate in_range = System__bit_order.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_bit_order" defined at system.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 115 0 0#"model" "model_trace:6035" "name:Default_Bit_Order" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:120, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 120 0 0#"model" "model_trace:6051" "name:Max_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 121 0 0#"model" "model_trace:6061" "name:Max_Interrupt_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:123, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content "model_trace:" "name:" : any_priority }
 
 function any_priority__ref___projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:123, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority =
  < range 0 30 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  30
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content "model_trace:" "name:" : priority }
 
 function priority__ref___projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority =
  < range 31 31 >
 
 function first 
   : int =
  31
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content "model_trace:" "name:" : interrupt_priority }
 
 function interrupt_priority__ref___projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 127 0 0#"model" "model_trace:6113" "name:Default_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "atomic_sync_default" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__atomic_sync_default
 use import "_gnatprove_standard".Main

 function atomic_sync_default #"system.ads" 144 0 0#"model" "model_trace:6143" "name:Atomic_Sync_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 145 0 0#"model" "model_trace:6153" "name:Backend_Divide_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 146 0 0#"model" "model_trace:6163" "name:Backend_Overflow_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 147 0 0#"model" "model_trace:6173" "name:Command_Line_Args" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 148 0 0#"model" "model_trace:6183" "name:Configurable_Run_Time" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 149 0 0#"model" "model_trace:6193" "name:Denorm" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 150 0 0#"model" "model_trace:6203" "name:Duration_32_Bits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 151 0 0#"model" "model_trace:6213" "name:Exit_Status_Supported" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 152 0 0#"model" "model_trace:6223" "name:Fractional_Fixed_Ops" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 153 0 0#"model" "model_trace:6233" "name:Frontend_Layout" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 154 0 0#"model" "model_trace:6243" "name:Machine_Overflows" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 155 0 0#"model" "model_trace:6253" "name:Machine_Rounds" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 156 0 0#"model" "model_trace:6263" "name:Preallocated_Stacks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:157, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 157 0 0#"model" "model_trace:6273" "name:Signed_Zeros" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 158 0 0#"model" "model_trace:6283" "name:Stack_Check_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 159 0 0#"model" "model_trace:6293" "name:Stack_Check_Probes" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:160, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 160 0 0#"model" "model_trace:6303" "name:Stack_Check_Limits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:161, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 161 0 0#"model" "model_trace:6313" "name:Support_Aggregates" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 162 0 0#"model" "model_trace:6323" "name:Support_Atomic_Primitives" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:163, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 163 0 0#"model" "model_trace:6333" "name:Support_Composite_Assign" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:164, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 164 0 0#"model" "model_trace:6343" "name:Support_Composite_Compare" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 165 0 0#"model" "model_trace:6353" "name:Support_Long_Shifts" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:166, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 166 0 0#"model" "model_trace:6363" "name:Always_Compatible_Rep" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:167, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 167 0 0#"model" "model_trace:6373" "name:Suppress_Standard_Library" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 168 0 0#"model" "model_trace:6383" "name:Use_Ada_Main_Program_Name" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 169 0 0#"model" "model_trace:6393" "name:Frontend_Exceptions" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:170, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 170 0 0#"model" "model_trace:6403" "name:ZCX_By_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "Tasm_input_operandB" defined at s-maccod.ads:122, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__Tasm_input_operandB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tasm_input_operandB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tasm_input_operandB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tasm_input_operandB__ref =
  { mutable tasm_input_operandB__content "model_trace:" "name:" : tasm_input_operandB }
 
 function tasm_input_operandB__ref___projection 
   (a : tasm_input_operandB__ref) : tasm_input_operandB =
  a.tasm_input_operandB__content
 
 meta "model_projection" function tasm_input_operandB__ref___projection
 
 meta "inline : no" function tasm_input_operandB__ref___projection
 
 val tasm_input_operandB__havoc 
   (x : tasm_input_operandB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tasm_input_operandB" defined at s-maccod.ads:122, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__Tasm_input_operandB__rep
 use        System__machine_code__Tasm_input_operandB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__machine_code__Tasm_input_operandB.tasm_input_operandB) : int =
  (System__machine_code__Tasm_input_operandB.tasm_input_operandB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__machine_code__Tasm_input_operandB.tasm_input_operandB, 
 predicate in_range = System__machine_code__Tasm_input_operandB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "asm_input_operand" defined at s-maccod.ads:122, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_input_operand
 use import "_gnatprove_standard".Main
 use import "int".Int

 type asm_input_operand =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = asm_input_operand, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type asm_input_operand__ref =
  { mutable asm_input_operand__content "model_trace:" "name:" : asm_input_operand }
 
 function asm_input_operand__ref___projection 
   (a : asm_input_operand__ref) : asm_input_operand =
  a.asm_input_operand__content
 
 meta "model_projection" function asm_input_operand__ref___projection
 
 meta "inline : no" function asm_input_operand__ref___projection
 
 val asm_input_operand__havoc 
   (x : asm_input_operand__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "asm_input_operand" defined at s-maccod.ads:122, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_input_operand__rep
 use        System__machine_code__asm_input_operand
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__machine_code__asm_input_operand.asm_input_operand) : int =
  (System__machine_code__asm_input_operand.asm_input_operand'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__machine_code__asm_input_operand.asm_input_operand, 
 predicate in_range = System__machine_code__asm_input_operand.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tasm_output_operandB" defined at s-maccod.ads:123, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__Tasm_output_operandB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tasm_output_operandB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tasm_output_operandB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tasm_output_operandB__ref =
  { mutable tasm_output_operandB__content "model_trace:" "name:" : tasm_output_operandB }
 
 function tasm_output_operandB__ref___projection 
   (a : tasm_output_operandB__ref) : tasm_output_operandB =
  a.tasm_output_operandB__content
 
 meta "model_projection" function tasm_output_operandB__ref___projection
 
 meta "inline : no" function tasm_output_operandB__ref___projection
 
 val tasm_output_operandB__havoc 
   (x : tasm_output_operandB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tasm_output_operandB" defined at s-maccod.ads:123, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__Tasm_output_operandB__rep
 use        System__machine_code__Tasm_output_operandB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__machine_code__Tasm_output_operandB.tasm_output_operandB) : int =
  (System__machine_code__Tasm_output_operandB.tasm_output_operandB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__machine_code__Tasm_output_operandB.tasm_output_operandB, 
 predicate in_range = System__machine_code__Tasm_output_operandB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "asm_output_operand" defined at s-maccod.ads:123, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_output_operand
 use import "_gnatprove_standard".Main
 use import "int".Int

 type asm_output_operand =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = asm_output_operand, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type asm_output_operand__ref =
  { mutable asm_output_operand__content "model_trace:" "name:" : asm_output_operand }
 
 function asm_output_operand__ref___projection 
   (a : asm_output_operand__ref) : asm_output_operand =
  a.asm_output_operand__content
 
 meta "model_projection" function asm_output_operand__ref___projection
 
 meta "inline : no" function asm_output_operand__ref___projection
 
 val asm_output_operand__havoc 
   (x : asm_output_operand__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "asm_output_operand" defined at s-maccod.ads:123, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_output_operand__rep
 use        System__machine_code__asm_output_operand
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__machine_code__asm_output_operand.asm_output_operand) : int =
  (System__machine_code__asm_output_operand.asm_output_operand'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__machine_code__asm_output_operand.asm_output_operand, 
 predicate in_range = System__machine_code__asm_output_operand.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "no_input_operands" defined at s-maccod.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__no_input_operands
 use import "_gnatprove_standard".Main

 function no_input_operands #"s-maccod.ads" 49 0 0#"model" "model_trace:6720" "name:No_Input_Operands" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "no_output_operands" defined at s-maccod.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__no_output_operands
 use import "_gnatprove_standard".Main

 function no_output_operands #"s-maccod.ads" 50 0 0#"model" "model_trace:6729" "name:No_Output_Operands" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing the array theory associated to type "asm_input_operand_list" defined at s-maccod.ads:52, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__System__machine_code__asm_input_operand
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__asm_input_operand
 use        System__machine_code__asm_input_operand__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  System__machine_code__asm_input_operand.asm_input_operand
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((System__machine_code__asm_input_operand__rep.to_rep (get a temp___idx_154)) = (System__machine_code__asm_input_operand__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((System__machine_code__asm_input_operand__rep.to_rep (get a temp___idx_154)) = (System__machine_code__asm_input_operand__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "asm_input_operand_list" defined at s-maccod.ads:52, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__System__machine_code__asm_input_operand__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__System__machine_code__asm_input_operand

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__System__machine_code__asm_input_operand.component_type, 
 type map = Array__Int__System__machine_code__asm_input_operand.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__machine_code__asm_input_operand.get

end

(* Module for axiomatizing comparison for the array theory associated to type "asm_input_operand_list" defined at s-maccod.ads:52, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__System__machine_code__asm_input_operand_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__asm_input_operand__rep
 use        Array__Int__System__machine_code__asm_input_operand

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__System__machine_code__asm_input_operand.component_type, 
 function to_rep = System__machine_code__asm_input_operand__rep.to_rep, 
 type map = Array__Int__System__machine_code__asm_input_operand.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__machine_code__asm_input_operand.get, 
 function bool_eq = Array__Int__System__machine_code__asm_input_operand.bool_eq

end

(* Module for axiomatizing type "asm_input_operand_list" defined at s-maccod.ads:52, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_input_operand_list
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        System__machine_code__asm_input_operand
 use        Array__Int__System__machine_code__asm_input_operand

 type component_type =
  System__machine_code__asm_input_operand.asm_input_operand
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__machine_code__asm_input_operand.map, 
 function array_bool_eq = Array__Int__System__machine_code__asm_input_operand.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__integer.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type asm_input_operand_list =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type asm_input_operand_list__ref =
  { mutable asm_input_operand_list__content "model_trace:" "name:" : asm_input_operand_list }
 
 function asm_input_operand_list__ref___projection 
   (a : asm_input_operand_list__ref) : asm_input_operand_list =
  a.asm_input_operand_list__content
 
 meta "model_projection" function asm_input_operand_list__ref___projection
 
 meta "inline : no" function asm_input_operand_list__ref___projection
 
 val asm_input_operand_list__havoc 
   (x : asm_input_operand_list__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "asm_output_operand_list" defined at s-maccod.ads:55, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__System__machine_code__asm_output_operand
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__asm_output_operand
 use        System__machine_code__asm_output_operand__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  System__machine_code__asm_output_operand.asm_output_operand
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    ((System__machine_code__asm_output_operand__rep.to_rep (get a temp___idx_155)) = (System__machine_code__asm_output_operand__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     ((System__machine_code__asm_output_operand__rep.to_rep (get a temp___idx_155)) = (System__machine_code__asm_output_operand__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "asm_output_operand_list" defined at s-maccod.ads:55, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__System__machine_code__asm_output_operand__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__System__machine_code__asm_output_operand

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__System__machine_code__asm_output_operand.component_type, 
 type map = Array__Int__System__machine_code__asm_output_operand.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__machine_code__asm_output_operand.get

end

(* Module for axiomatizing comparison for the array theory associated to type "asm_output_operand_list" defined at s-maccod.ads:55, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__System__machine_code__asm_output_operand_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__asm_output_operand__rep
 use        Array__Int__System__machine_code__asm_output_operand

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__System__machine_code__asm_output_operand.component_type, 
 function to_rep = System__machine_code__asm_output_operand__rep.to_rep, 
 type map = Array__Int__System__machine_code__asm_output_operand.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__machine_code__asm_output_operand.get, 
 function bool_eq = Array__Int__System__machine_code__asm_output_operand.bool_eq

end

(* Module for axiomatizing type "asm_output_operand_list" defined at s-maccod.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_output_operand_list
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        System__machine_code__asm_output_operand
 use        Array__Int__System__machine_code__asm_output_operand

 type component_type =
  System__machine_code__asm_output_operand.asm_output_operand
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__machine_code__asm_output_operand.map, 
 function array_bool_eq = Array__Int__System__machine_code__asm_output_operand.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__integer.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type asm_output_operand_list =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type asm_output_operand_list__ref =
  { mutable asm_output_operand_list__content "model_trace:" "name:" : asm_output_operand_list }
 
 function asm_output_operand_list__ref___projection 
   (a : asm_output_operand_list__ref) : asm_output_operand_list =
  a.asm_output_operand_list__content
 
 meta "model_projection" function asm_output_operand_list__ref___projection
 
 meta "inline : no" function asm_output_operand_list__ref___projection
 
 val asm_output_operand_list__havoc 
   (x : asm_output_operand_list__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tasm_insnB" defined at s-maccod.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__Tasm_insnB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tasm_insnB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tasm_insnB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tasm_insnB__ref =
  { mutable tasm_insnB__content "model_trace:" "name:" : tasm_insnB }
 
 function tasm_insnB__ref___projection 
   (a : tasm_insnB__ref) : tasm_insnB =
  a.tasm_insnB__content
 
 meta "model_projection" function tasm_insnB__ref___projection
 
 meta "inline : no" function tasm_insnB__ref___projection
 
 val tasm_insnB__havoc 
   (x : tasm_insnB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tasm_insnB" defined at s-maccod.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__Tasm_insnB__rep
 use        System__machine_code__Tasm_insnB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__machine_code__Tasm_insnB.tasm_insnB) : int =
  (System__machine_code__Tasm_insnB.tasm_insnB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__machine_code__Tasm_insnB.tasm_insnB, 
 predicate in_range = System__machine_code__Tasm_insnB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "asm_insn" defined at s-maccod.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_insn
 use import "_gnatprove_standard".Main
 use import "int".Int

 type asm_insn =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = asm_insn, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type asm_insn__ref =
  { mutable asm_insn__content "model_trace:" "name:" : asm_insn }
 
 function asm_insn__ref___projection 
   (a : asm_insn__ref) : asm_insn =
  a.asm_insn__content
 
 meta "model_projection" function asm_insn__ref___projection
 
 meta "inline : no" function asm_insn__ref___projection
 
 val asm_insn__havoc 
   (x : asm_insn__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "asm_insn" defined at s-maccod.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__machine_code__asm_insn__rep
 use        System__machine_code__asm_insn
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__machine_code__asm_insn.asm_insn) : int =
  (System__machine_code__asm_insn.asm_insn'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__machine_code__asm_insn.asm_insn, 
 predicate in_range = System__machine_code__asm_insn.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "template" defined at s-maccod.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 63 0 0#"model_projected" "model_trace:6777" "name:Template" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__outputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_output_operand_list

 function outputs #"s-maccod.ads" 64 0 0#"model_projected" "model_trace:6786" "name:Outputs" 
   : System__machine_code__asm_output_operand_list.asm_output_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__inputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_input_operand_list

 function inputs #"s-maccod.ads" 65 0 0#"model_projected" "model_trace:6795" "name:Inputs" 
   : System__machine_code__asm_input_operand_list.asm_input_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:66, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 66 0 0#"model_projected" "model_trace:6804" "name:Clobber" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:66, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 67 0 0#"model" "model_trace:6814" "name:Volatile" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "template" defined at s-maccod.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__2__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 70 0 0#"model_projected" "name:Template" "model_trace:6833" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__2__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__2__outputs
 use import "_gnatprove_standard".Main

 function outputs #"s-maccod.ads" 71 0 0#"model" "name:Outputs" "model_trace:6842" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__2__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__2__inputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_input_operand_list

 function inputs #"s-maccod.ads" 72 0 0#"model_projected" "name:Inputs" "model_trace:6852" 
   : System__machine_code__asm_input_operand_list.asm_input_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:72, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__2__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__2__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 73 0 0#"model_projected" "name:Clobber" "model_trace:6861" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__2__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:74, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__2__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 74 0 0#"model" "name:Volatile" "model_trace:6871" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__2__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "template" defined at s-maccod.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__3__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 77 0 0#"model_projected" "name:Template" "model_trace:6890" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__3__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__3__outputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_output_operand_list

 function outputs #"s-maccod.ads" 78 0 0#"model_projected" "name:Outputs" "model_trace:6899" 
   : System__machine_code__asm_output_operand_list.asm_output_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__3__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__3__inputs
 use import "_gnatprove_standard".Main

 function inputs #"s-maccod.ads" 79 0 0#"model" "name:Inputs" "model_trace:6908" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__3__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__3__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 80 0 0#"model_projected" "name:Clobber" "model_trace:6918" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__3__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__3__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 81 0 0#"model" "name:Volatile" "model_trace:6928" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__3__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "template" defined at s-maccod.ads:84, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__4__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 84 0 0#"model_projected" "name:Template" "model_trace:6947" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__4__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__4__outputs
 use import "_gnatprove_standard".Main

 function outputs #"s-maccod.ads" 85 0 0#"model" "name:Outputs" "model_trace:6956" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__4__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__4__inputs
 use import "_gnatprove_standard".Main

 function inputs #"s-maccod.ads" 86 0 0#"model" "name:Inputs" "model_trace:6966" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__4__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__4__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 87 0 0#"model_projected" "name:Clobber" "model_trace:6976" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__4__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__4__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 88 0 0#"model" "name:Volatile" "model_trace:6986" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__4__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "template" defined at s-maccod.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__5__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 91 0 0#"model_projected" "name:Template" "model_trace:7005" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__5__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__5__outputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_output_operand_list

 function outputs #"s-maccod.ads" 92 0 0#"model_projected" "name:Outputs" "model_trace:7014" 
   : System__machine_code__asm_output_operand_list.asm_output_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:92, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__5__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:93, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__5__inputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_input_operand_list

 function inputs #"s-maccod.ads" 93 0 0#"model_projected" "name:Inputs" "model_trace:7023" 
   : System__machine_code__asm_input_operand_list.asm_input_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__5__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__5__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 94 0 0#"model_projected" "name:Clobber" "model_trace:7032" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__5__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__5__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 95 0 0#"model" "name:Volatile" "model_trace:7042" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__5__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "asm__5" defined at s-maccod.ads:90, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm__5
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        System__machine_code__asm_input_operand_list
 use        System__machine_code__asm_output_operand_list

 function asm__5 
   (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) : int
 
 predicate asm__5__function_guard 
   (result : int) (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) 

end

(* Module for defining the constant "template" defined at s-maccod.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__6__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 98 0 0#"model_projected" "name:Template" "model_trace:7062" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__6__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__6__outputs
 use import "_gnatprove_standard".Main

 function outputs #"s-maccod.ads" 99 0 0#"model" "name:Outputs" "model_trace:7071" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__6__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__6__inputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_input_operand_list

 function inputs #"s-maccod.ads" 100 0 0#"model_projected" "name:Inputs" "model_trace:7081" 
   : System__machine_code__asm_input_operand_list.asm_input_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__6__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__6__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 101 0 0#"model_projected" "name:Clobber" "model_trace:7090" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__6__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__6__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 102 0 0#"model" "name:Volatile" "model_trace:7100" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__6__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "asm__6" defined at s-maccod.ads:97, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm__6
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        System__machine_code__asm_input_operand_list

 function asm__6 
   (template : Standard__string.string) (outputs : int) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) : int
 
 predicate asm__6__function_guard 
   (result : int) (template : Standard__string.string) (outputs : int) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) 

end

(* Module for defining the constant "template" defined at s-maccod.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__7__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 105 0 0#"model_projected" "name:Template" "model_trace:7120" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__7__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__7__outputs
 use import "_gnatprove_standard".Main
 use        System__machine_code__asm_output_operand_list

 function outputs #"s-maccod.ads" 106 0 0#"model_projected" "name:Outputs" "model_trace:7129" 
   : System__machine_code__asm_output_operand_list.asm_output_operand_list
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__7__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__7__inputs
 use import "_gnatprove_standard".Main

 function inputs #"s-maccod.ads" 107 0 0#"model" "name:Inputs" "model_trace:7138" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__7__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:108, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__7__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 108 0 0#"model_projected" "name:Clobber" "model_trace:7148" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:108, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__7__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:109, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__7__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 109 0 0#"model" "name:Volatile" "model_trace:7158" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:109, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__7__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "asm__7" defined at s-maccod.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm__7
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        System__machine_code__asm_output_operand_list

 function asm__7 
   (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : int) (clobber : Standard__string.string) (volatile : bool) : int
 
 predicate asm__7__function_guard 
   (result : int) (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : int) (clobber : Standard__string.string) (volatile : bool) 

end

(* Module for defining the constant "template" defined at s-maccod.ads:112, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__8__template
 use import "_gnatprove_standard".Main
 use        Standard__string

 function template #"s-maccod.ads" 112 0 0#"model_projected" "name:Template" "model_trace:7178" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-maccod.ads:112, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__8__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "outputs" defined at s-maccod.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__8__outputs
 use import "_gnatprove_standard".Main

 function outputs #"s-maccod.ads" 113 0 0#"model" "name:Outputs" "model_trace:7187" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outputs" defined at s-maccod.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__8__outputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "inputs" defined at s-maccod.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__8__inputs
 use import "_gnatprove_standard".Main

 function inputs #"s-maccod.ads" 114 0 0#"model" "name:Inputs" "model_trace:7197" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inputs" defined at s-maccod.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__8__inputs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "clobber" defined at s-maccod.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__8__clobber
 use import "_gnatprove_standard".Main
 use        Standard__string

 function clobber #"s-maccod.ads" 115 0 0#"model_projected" "name:Clobber" "model_trace:7207" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "clobber" defined at s-maccod.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__8__clobber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "volatile" defined at s-maccod.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_code__asm__8__volatile
 use import "_gnatprove_standard".Main

 function volatile #"s-maccod.ads" 116 0 0#"model" "name:Volatile" "model_trace:7217" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "volatile" defined at s-maccod.ads:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__machine_code__asm__8__volatile___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "asm__8" defined at s-maccod.ads:111, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm__8
 use import "_gnatprove_standard".Main
 use        Standard__string

 function asm__8 
   (template : Standard__string.string) (outputs : int) (inputs : int) (clobber : Standard__string.string) (volatile : bool) : int
 
 predicate asm__8__function_guard 
   (result : int) (template : Standard__string.string) (outputs : int) (inputs : int) (clobber : Standard__string.string) (volatile : bool) 

end

(* Module for axiomatizing type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_8B =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_8B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_8B__ref =
  { mutable tinteger_8B__content "model_trace:" "name:" : tinteger_8B }
 
 function tinteger_8B__ref___projection 
   (a : tinteger_8B__ref) : tinteger_8B =
  a.tinteger_8B__content
 
 meta "model_projection" function tinteger_8B__ref___projection
 
 meta "inline : no" function tinteger_8B__ref___projection
 
 val tinteger_8B__havoc 
   (x : tinteger_8B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B__rep
 use        Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_8B.tinteger_8B) : int =
  (Interfaces__Tinteger_8B.tinteger_8B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_8B.tinteger_8B, 
 predicate in_range = Interfaces__Tinteger_8B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___2__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___2__projection
 
 meta "inline : no" function integer_8__ref___2__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8__rep
 use        Interfaces__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_8.integer_8) : int =
  (Interfaces__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_8.integer_8, 
 predicate in_range = Interfaces__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_16B =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_16B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_16B__ref =
  { mutable tinteger_16B__content "model_trace:" "name:" : tinteger_16B }
 
 function tinteger_16B__ref___projection 
   (a : tinteger_16B__ref) : tinteger_16B =
  a.tinteger_16B__content
 
 meta "model_projection" function tinteger_16B__ref___projection
 
 meta "inline : no" function tinteger_16B__ref___projection
 
 val tinteger_16B__havoc 
   (x : tinteger_16B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B__rep
 use        Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_16B.tinteger_16B) : int =
  (Interfaces__Tinteger_16B.tinteger_16B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_16B.tinteger_16B, 
 predicate in_range = Interfaces__Tinteger_16B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___2__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___2__projection
 
 meta "inline : no" function integer_16__ref___2__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16__rep
 use        Interfaces__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_16.integer_16) : int =
  (Interfaces__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_16.integer_16, 
 predicate in_range = Interfaces__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_32B =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref =
  { mutable tinteger_32B__content "model_trace:" "name:" : tinteger_32B }
 
 function tinteger_32B__ref___projection 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref___projection
 
 meta "inline : no" function tinteger_32B__ref___projection
 
 val tinteger_32B__havoc 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_32B.tinteger_32B) : int =
  (Interfaces__Tinteger_32B.tinteger_32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___2__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___2__projection
 
 meta "inline : no" function integer_32__ref___2__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_32.integer_32) : int =
  (Interfaces__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_64B =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_64B__ref =
  { mutable tinteger_64B__content "model_trace:" "name:" : tinteger_64B }
 
 function tinteger_64B__ref___projection 
   (a : tinteger_64B__ref) : tinteger_64B =
  a.tinteger_64B__content
 
 meta "model_projection" function tinteger_64B__ref___projection
 
 meta "inline : no" function tinteger_64B__ref___projection
 
 val tinteger_64B__havoc 
   (x : tinteger_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B__rep
 use        Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_64B.tinteger_64B) : int =
  (Interfaces__Tinteger_64B.tinteger_64B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_64B.tinteger_64B, 
 predicate in_range = Interfaces__Tinteger_64B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___2__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___2__projection
 
 meta "inline : no" function integer_64__ref___2__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64__rep
 use        Interfaces__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_64.integer_64) : int =
  (Interfaces__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_64.integer_64, 
 predicate in_range = Interfaces__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type unsigned_8 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 255 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  255
 
 predicate in_range 
   (x : BV8.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = unsigned_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_8__ref =
  { mutable unsigned_8__content "model_trace:" "name:" : unsigned_8 }
 
 function unsigned_8__ref___projection 
   (a : unsigned_8__ref) : unsigned_8 =
  a.unsigned_8__content
 
 meta "model_projection" function unsigned_8__ref___projection
 
 meta "inline : no" function unsigned_8__ref___projection
 
 val unsigned_8__havoc 
   (x : unsigned_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8__rep
 use        Interfaces__unsigned_8
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = Interfaces__unsigned_8.unsigned_8, 
 predicate in_range = Interfaces__unsigned_8.in_range, 
 predicate in_range_int = Interfaces__unsigned_8.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type unsigned_16 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV16.t
 
 function first 
   : BV16.t =
  ( 0 : BV16.t )
 
 function last 
   : BV16.t =
  ( 65535 : BV16.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  65535
 
 predicate in_range 
   (x : BV16.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = unsigned_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_16__ref =
  { mutable unsigned_16__content "model_trace:" "name:" : unsigned_16 }
 
 function unsigned_16__ref___projection 
   (a : unsigned_16__ref) : unsigned_16 =
  a.unsigned_16__content
 
 meta "model_projection" function unsigned_16__ref___projection
 
 meta "inline : no" function unsigned_16__ref___projection
 
 val unsigned_16__havoc 
   (x : unsigned_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16__rep
 use        Interfaces__unsigned_16
 use        "_gnatprove_standard".BV16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV16 with
 type t = Interfaces__unsigned_16.unsigned_16, 
 predicate in_range = Interfaces__unsigned_16.in_range, 
 predicate in_range_int = Interfaces__unsigned_16.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_24 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t =
  ( 16777216 : BV32.t )
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 16777215 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  16777215
 
 predicate in_range 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = unsigned_24, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type unsigned_24__ref =
  { mutable unsigned_24__content "model_trace:" "name:" : unsigned_24 }
 
 function unsigned_24__ref___projection 
   (a : unsigned_24__ref) : unsigned_24 =
  a.unsigned_24__content
 
 meta "model_projection" function unsigned_24__ref___projection
 
 meta "inline : no" function unsigned_24__ref___projection
 
 val unsigned_24__havoc 
   (x : unsigned_24__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24__rep
 use        Interfaces__unsigned_24
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV32 with
 type t = Interfaces__unsigned_24.unsigned_24, 
 predicate in_range = Interfaces__unsigned_24.in_range, 
 predicate in_range_int = Interfaces__unsigned_24.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = Interfaces__unsigned_24.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_32 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 4294967295 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  4294967295
 
 predicate in_range 
   (x : BV32.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = unsigned_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_32__ref =
  { mutable unsigned_32__content "model_trace:" "name:" : unsigned_32 }
 
 function unsigned_32__ref___projection 
   (a : unsigned_32__ref) : unsigned_32 =
  a.unsigned_32__content
 
 meta "model_projection" function unsigned_32__ref___projection
 
 meta "inline : no" function unsigned_32__ref___projection
 
 val unsigned_32__havoc 
   (x : unsigned_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32__rep
 use        Interfaces__unsigned_32
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV32 with
 type t = Interfaces__unsigned_32.unsigned_32, 
 predicate in_range = Interfaces__unsigned_32.in_range, 
 predicate in_range_int = Interfaces__unsigned_32.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type unsigned_64 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = unsigned_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_64__ref =
  { mutable unsigned_64__content "model_trace:" "name:" : unsigned_64 }
 
 function unsigned_64__ref___projection 
   (a : unsigned_64__ref) : unsigned_64 =
  a.unsigned_64__content
 
 meta "model_projection" function unsigned_64__ref___projection
 
 meta "inline : no" function unsigned_64__ref___projection
 
 val unsigned_64__havoc 
   (x : unsigned_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64__rep
 use        Interfaces__unsigned_64
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__unsigned_64.unsigned_64, 
 predicate in_range = Interfaces__unsigned_64.in_range, 
 predicate in_range_int = Interfaces__unsigned_64.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "value" defined at interfac.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 82 0 0#"model" "model_trace:4823" "name:Value" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 83 0 0#"model" "model_trace:4832" "name:Amount" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 86 0 0#"model" "name:Value" "model_trace:4851" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 87 0 0#"model" "name:Amount" "model_trace:4860" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 90 0 0#"model" "name:Value" "model_trace:4879" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 91 0 0#"model" "name:Amount" "model_trace:4888" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 94 0 0#"model" "name:Value" "model_trace:4907" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 95 0 0#"model" "name:Amount" "model_trace:4916" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 98 0 0#"model" "name:Value" "model_trace:4935" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 99 0 0#"model" "name:Amount" "model_trace:4944" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 102 0 0#"model" "name:Value" "model_trace:4963" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 103 0 0#"model" "name:Amount" "model_trace:4972" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 106 0 0#"model" "name:Value" "model_trace:4991" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 107 0 0#"model" "name:Amount" "model_trace:5000" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 110 0 0#"model" "name:Value" "model_trace:5019" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:111, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 111 0 0#"model" "name:Amount" "model_trace:5028" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 114 0 0#"model" "name:Value" "model_trace:5047" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 115 0 0#"model" "name:Amount" "model_trace:5056" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 118 0 0#"model" "name:Value" "model_trace:5075" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 119 0 0#"model" "name:Amount" "model_trace:5084" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 122 0 0#"model" "name:Value" "model_trace:5103" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 123 0 0#"model" "name:Amount" "model_trace:5112" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 126 0 0#"model" "name:Value" "model_trace:5131" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 127 0 0#"model" "name:Amount" "model_trace:5140" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:127, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 130 0 0#"model" "name:Value" "model_trace:5159" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 131 0 0#"model" "name:Amount" "model_trace:5168" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 134 0 0#"model" "name:Value" "model_trace:5187" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 135 0 0#"model" "name:Amount" "model_trace:5196" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 138 0 0#"model" "name:Value" "model_trace:5215" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 139 0 0#"model" "name:Amount" "model_trace:5224" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 142 0 0#"model" "name:Value" "model_trace:5243" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 143 0 0#"model" "name:Amount" "model_trace:5252" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 146 0 0#"model" "name:Value" "model_trace:5271" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 147 0 0#"model" "name:Amount" "model_trace:5280" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:147, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 150 0 0#"model" "name:Value" "model_trace:5299" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 151 0 0#"model" "name:Amount" "model_trace:5308" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 154 0 0#"model" "name:Value" "model_trace:5327" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 155 0 0#"model" "name:Amount" "model_trace:5336" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 158 0 0#"model" "name:Value" "model_trace:5355" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 159 0 0#"model" "name:Amount" "model_trace:5364" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tieee_float_32B 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = tieee_float_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_32B__ref =
  { mutable tieee_float_32B__content "model_trace:" "name:" : tieee_float_32B }
 
 function tieee_float_32B__ref___projection 
   (a : tieee_float_32B__ref) : tieee_float_32B =
  a.tieee_float_32B__content
 
 meta "model_projection" function tieee_float_32B__ref___projection
 
 meta "inline : no" function tieee_float_32B__ref___projection
 
 val tieee_float_32B__havoc 
   (x : tieee_float_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B__rep
 use        Interfaces__Tieee_float_32B
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__Tieee_float_32B.tieee_float_32B, 
 predicate in_range = Interfaces__Tieee_float_32B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type ieee_float_32 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = ieee_float_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_32__ref =
  { mutable ieee_float_32__content "model_trace:" "name:" : ieee_float_32 }
 
 function ieee_float_32__ref___projection 
   (a : ieee_float_32__ref) : ieee_float_32 =
  a.ieee_float_32__content
 
 meta "model_projection" function ieee_float_32__ref___projection
 
 meta "inline : no" function ieee_float_32__ref___projection
 
 val ieee_float_32__havoc 
   (x : ieee_float_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32__rep
 use        Interfaces__ieee_float_32
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__ieee_float_32.ieee_float_32, 
 predicate in_range = Interfaces__ieee_float_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type tieee_float_64B 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = tieee_float_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_64B__ref =
  { mutable tieee_float_64B__content "model_trace:" "name:" : tieee_float_64B }
 
 function tieee_float_64B__ref___projection 
   (a : tieee_float_64B__ref) : tieee_float_64B =
  a.tieee_float_64B__content
 
 meta "model_projection" function tieee_float_64B__ref___projection
 
 meta "inline : no" function tieee_float_64B__ref___projection
 
 val tieee_float_64B__havoc 
   (x : tieee_float_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B__rep
 use        Interfaces__Tieee_float_64B
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__Tieee_float_64B.tieee_float_64B, 
 predicate in_range = Interfaces__Tieee_float_64B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type ieee_float_64 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = ieee_float_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_64__ref =
  { mutable ieee_float_64__content "model_trace:" "name:" : ieee_float_64 }
 
 function ieee_float_64__ref___projection 
   (a : ieee_float_64__ref) : ieee_float_64 =
  a.ieee_float_64__content
 
 meta "model_projection" function ieee_float_64__ref___projection
 
 meta "inline : no" function ieee_float_64__ref___projection
 
 val ieee_float_64__havoc 
   (x : ieee_float_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64__rep
 use        Interfaces__ieee_float_64
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__ieee_float_64.ieee_float_64, 
 predicate in_range = Interfaces__ieee_float_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TaddressB" defined at common.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Common__TaddressB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type taddressB 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = taddressB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type taddressB__ref =
  { mutable taddressB__content "model_trace:" "name:" : taddressB }
 
 function taddressB__ref___projection 
   (a : taddressB__ref) : taddressB =
  a.taddressB__content
 
 meta "model_projection" function taddressB__ref___projection
 
 meta "inline : no" function taddressB__ref___projection
 
 val taddressB__havoc 
   (x : taddressB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TaddressB" defined at common.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Common__TaddressB__rep
 use        Common__TaddressB
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Common__TaddressB.taddressB, 
 predicate in_range = Common__TaddressB.in_range, 
 predicate in_range_int = Common__TaddressB.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "address" defined at common.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Common__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type address__ref =
  { mutable address__content "model_trace:" "name:" : address }
 
 function address__ref___2__projection 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___2__projection
 
 meta "inline : no" function address__ref___2__projection
 
 val address__havoc 
   (x : address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "address" defined at common.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Common__address__rep
 use        Common__address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Common__address.address, 
 predicate in_range = Common__address.in_range, 
 predicate in_range_int = Common__address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tphysical_addressB" defined at common.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Common__Tphysical_addressB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type tphysical_addressB 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = tphysical_addressB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type tphysical_addressB__ref =
  { mutable tphysical_addressB__content "model_trace:" "name:" : tphysical_addressB }
 
 function tphysical_addressB__ref___projection 
   (a : tphysical_addressB__ref) : tphysical_addressB =
  a.tphysical_addressB__content
 
 meta "model_projection" function tphysical_addressB__ref___projection
 
 meta "inline : no" function tphysical_addressB__ref___projection
 
 val tphysical_addressB__havoc 
   (x : tphysical_addressB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tphysical_addressB" defined at common.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Common__Tphysical_addressB__rep
 use        Common__Tphysical_addressB
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Common__Tphysical_addressB.tphysical_addressB, 
 predicate in_range = Common__Tphysical_addressB.in_range, 
 predicate in_range_int = Common__Tphysical_addressB.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "physical_address" defined at common.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Common__physical_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type physical_address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = physical_address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type physical_address__ref =
  { mutable physical_address__content "model_trace:" "name:" : physical_address }
 
 function physical_address__ref___projection 
   (a : physical_address__ref) : physical_address =
  a.physical_address__content
 
 meta "model_projection" function physical_address__ref___projection
 
 meta "inline : no" function physical_address__ref___projection
 
 val physical_address__havoc 
   (x : physical_address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "physical_address" defined at common.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Common__physical_address__rep
 use        Common__physical_address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Common__physical_address.physical_address, 
 predicate in_range = Common__physical_address.in_range, 
 predicate in_range_int = Common__physical_address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tvirtual_addressB" defined at common.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Common__Tvirtual_addressB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type tvirtual_addressB 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = tvirtual_addressB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type tvirtual_addressB__ref =
  { mutable tvirtual_addressB__content "model_trace:" "name:" : tvirtual_addressB }
 
 function tvirtual_addressB__ref___projection 
   (a : tvirtual_addressB__ref) : tvirtual_addressB =
  a.tvirtual_addressB__content
 
 meta "model_projection" function tvirtual_addressB__ref___projection
 
 meta "inline : no" function tvirtual_addressB__ref___projection
 
 val tvirtual_addressB__havoc 
   (x : tvirtual_addressB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tvirtual_addressB" defined at common.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Common__Tvirtual_addressB__rep
 use        Common__Tvirtual_addressB
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Common__Tvirtual_addressB.tvirtual_addressB, 
 predicate in_range = Common__Tvirtual_addressB.in_range, 
 predicate in_range_int = Common__Tvirtual_addressB.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "virtual_address" defined at common.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Common__virtual_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type virtual_address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = virtual_address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type virtual_address__ref =
  { mutable virtual_address__content "model_trace:" "name:" : virtual_address }
 
 function virtual_address__ref___projection 
   (a : virtual_address__ref) : virtual_address =
  a.virtual_address__content
 
 meta "model_projection" function virtual_address__ref___projection
 
 meta "inline : no" function virtual_address__ref___projection
 
 val virtual_address__havoc 
   (x : virtual_address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "virtual_address" defined at common.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Common__virtual_address__rep
 use        Common__virtual_address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Common__virtual_address.virtual_address, 
 predicate in_range = Common__virtual_address.in_range, 
 predicate in_range_int = Common__virtual_address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_address" defined at common.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Common__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_address #"common.ads" 9 0 0#"model" "model_trace:6662" "name:NULL_ADDRESS" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "Tio_portB" defined at arch.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Arch__Tio_portB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type tio_portB 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV16.t
 
 function first 
   : BV16.t =
  ( 0 : BV16.t )
 
 function last 
   : BV16.t =
  ( 65535 : BV16.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  65535
 
 predicate in_range 
   (x : BV16.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = tio_portB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type tio_portB__ref =
  { mutable tio_portB__content "model_trace:" "name:" : tio_portB }
 
 function tio_portB__ref___projection 
   (a : tio_portB__ref) : tio_portB =
  a.tio_portB__content
 
 meta "model_projection" function tio_portB__ref___projection
 
 meta "inline : no" function tio_portB__ref___projection
 
 val tio_portB__havoc 
   (x : tio_portB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tio_portB" defined at arch.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Arch__Tio_portB__rep
 use        Arch__Tio_portB
 use        "_gnatprove_standard".BV16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV16 with
 type t = Arch__Tio_portB.tio_portB, 
 predicate in_range = Arch__Tio_portB.in_range, 
 predicate in_range_int = Arch__Tio_portB.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "io_port" defined at arch.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Arch__io_port
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type io_port 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV16.t
 
 function first 
   : BV16.t =
  ( 0 : BV16.t )
 
 function last 
   : BV16.t =
  ( 65535 : BV16.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  65535
 
 predicate in_range 
   (x : BV16.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = io_port, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type io_port__ref =
  { mutable io_port__content "model_trace:" "name:" : io_port }
 
 function io_port__ref___projection 
   (a : io_port__ref) : io_port =
  a.io_port__content
 
 meta "model_projection" function io_port__ref___projection
 
 meta "inline : no" function io_port__ref___projection
 
 val io_port__havoc 
   (x : io_port__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "io_port" defined at arch.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Arch__io_port__rep
 use        Arch__io_port
 use        "_gnatprove_standard".BV16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV16 with
 type t = Arch__io_port.io_port, 
 predicate in_range = Arch__io_port.in_range, 
 predicate in_range_int = Arch__io_port.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "debug" defined at arch.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Arch__scout_memory__debug
 use import "_gnatprove_standard".Main

 function debug #"arch.ads" 18 0 0#"model" "model_trace:5529" "name:Debug" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "debug" defined at arch.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Arch__scout_memory__debug___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "port" defined at arch.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Arch__io_inb__port
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function port #"arch.ads" 21 0 0#"model" "model_trace:5556" "name:Port" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "port" defined at arch.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Arch__io_inb__port___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "io_inb" defined at arch.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Arch__io_inb
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        "_gnatprove_standard".BV16

 function io_inb 
   (port : BV16.t) : BV8.t
 
 predicate io_inb__function_guard 
   (result : BV8.t) (port : BV16.t) 

end

(* Module for defining the constant "port" defined at arch.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Arch__io_outb__port
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function port #"arch.ads" 22 0 0#"model" "name:Port" "model_trace:5579" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "port" defined at arch.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Arch__io_outb__port___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "data" defined at arch.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Arch__io_outb__data
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function data #"arch.ads" 22 0 0#"model" "model_trace:5588" "name:Data" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "data" defined at arch.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Arch__io_outb__data___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "cr3_address" defined at arch.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Arch__cr3_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function cr3_address 
   (__void_param : unit) : BV64.t
 
 predicate cr3_address__function_guard 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for defining the constant "width" defined at console.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Console__width
 use import "_gnatprove_standard".Main

 function width #"console.ads" 7 0 0#"model" "model_trace:7314" "name:Width" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "height" defined at console.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Console__height
 use import "_gnatprove_standard".Main

 function height #"console.ads" 8 0 0#"model" "model_trace:7324" "name:Height" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lf" defined at console.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Console__lf
 use import "_gnatprove_standard".Main

 function lf #"console.ads" 10 0 0#"model" "model_trace:7334" "name:LF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "colour" defined at console.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Console__colour
 use import "_gnatprove_standard".Main
 use import "int".Int

 type colour 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  15
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = colour, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type colour__ref =
  { mutable colour__content "model_trace:" "name:" : colour }
 
 function colour__ref___projection 
   (a : colour__ref) : colour =
  a.colour__content
 
 meta "model_projection" function colour__ref___projection
 
 meta "inline : no" function colour__ref___projection
 
 val colour__havoc 
   (x : colour__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "colour" defined at console.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Console__colour__rep
 use        Console__colour
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Console__colour.colour, 
 predicate in_range = Console__colour.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "bg_colour" defined at console.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Console__bg_colour
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bg_colour 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  7
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bg_colour, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type bg_colour__ref =
  { mutable bg_colour__content "model_trace:" "name:" : bg_colour }
 
 function bg_colour__ref___projection 
   (a : bg_colour__ref) : bg_colour =
  a.bg_colour__content
 
 meta "model_projection" function bg_colour__ref___projection
 
 meta "inline : no" function bg_colour__ref___projection
 
 val bg_colour__havoc 
   (x : bg_colour__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bg_colour" defined at console.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Console__bg_colour__rep
 use        Console__bg_colour
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Console__bg_colour.bg_colour, 
 predicate in_range = Console__bg_colour.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "cell" defined at console.ads:21, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Console__cell__rep
 use import "_gnatprove_standard".Main
 use        Standard__character
 use        Standard__character__rep
 use        Console__colour
 use        Console__colour__rep
 use        Console__bg_colour
 use        Console__bg_colour__rep

 type __split_fields =
  { rec__console__cell__c "model_trace:.7493" "name:c" : Standard__character.character; rec__console__cell__fg "model_trace:.7503" "name:fg" : Console__colour.colour; rec__console__cell__bg "model_trace:.7513" "name:bg" : Console__bg_colour.bg_colour }
 
 function __split_fields_c__projection "model_trace:.7493" "name:c" 
   (a : __split_fields) : Standard__character.character =
  a.rec__console__cell__c
 
 meta "model_projection" function __split_fields_c__projection
 
 meta "inline : no" function __split_fields_c__projection
 
 function __split_fields_fg__projection "model_trace:.7503" "name:fg" 
   (a : __split_fields) : Console__colour.colour =
  a.rec__console__cell__fg
 
 meta "model_projection" function __split_fields_fg__projection
 
 meta "inline : no" function __split_fields_fg__projection
 
 function __split_fields_bg__projection "model_trace:.7513" "name:bg" 
   (a : __split_fields) : Console__bg_colour.bg_colour =
  a.rec__console__cell__bg
 
 meta "model_projection" function __split_fields_bg__projection
 
 meta "inline : no" function __split_fields_bg__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate console__cell__c__pred 
   (a : __rep)  =
  true
 
 val rec__console__cell__c_ 
   (a : __rep) : Standard__character.character
  requires {  (console__cell__c__pred a) }
  ensures {  (result = a.__split_fields.rec__console__cell__c) }
 
 predicate console__cell__fg__pred 
   (a : __rep)  =
  true
 
 val rec__console__cell__fg_ 
   (a : __rep) : Console__colour.colour
  requires {  (console__cell__fg__pred a) }
  ensures {  (result = a.__split_fields.rec__console__cell__fg) }
 
 predicate console__cell__bg__pred 
   (a : __rep)  =
  true
 
 val rec__console__cell__bg_ 
   (a : __rep) : Console__bg_colour.bg_colour
  requires {  (console__cell__bg__pred a) }
  ensures {  (result = a.__split_fields.rec__console__cell__bg) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Standard__character__rep.to_rep a.__split_fields.rec__console__cell__c) = (Standard__character__rep.to_rep b.__split_fields.rec__console__cell__c)) /\ ((Console__colour__rep.to_rep a.__split_fields.rec__console__cell__fg) = (Console__colour__rep.to_rep b.__split_fields.rec__console__cell__fg)) ) /\ ((Console__bg_colour__rep.to_rep a.__split_fields.rec__console__cell__bg) = (Console__bg_colour__rep.to_rep b.__split_fields.rec__console__cell__bg)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "cell" defined at console.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Console__cell
 use export Console__cell__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type cell =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : cell) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : cell) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : cell.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : cell.
   ((object__alignment a) >= 0))
 
 function console__cell__c__first__bit 
   : int
 
 function console__cell__c__last__bit 
   : int
 
 function console__cell__c__position 
   : int
 
 axiom console__cell__c__first__bit_axiom :
  ((console__cell__c__first__bit ) >= 0)
 
 axiom console__cell__c__last__bit_axiom :
  ((console__cell__c__last__bit ) > (console__cell__c__first__bit ))
 
 axiom console__cell__c__position_axiom :
  ((console__cell__c__position ) >= 0)
 
 function console__cell__fg__first__bit 
   : int
 
 function console__cell__fg__last__bit 
   : int
 
 function console__cell__fg__position 
   : int
 
 axiom console__cell__fg__first__bit_axiom :
  ((console__cell__fg__first__bit ) >= 0)
 
 axiom console__cell__fg__last__bit_axiom :
  ((console__cell__fg__last__bit ) > (console__cell__fg__first__bit ))
 
 axiom console__cell__fg__position_axiom :
  ((console__cell__fg__position ) >= 0)
 
 function console__cell__bg__first__bit 
   : int
 
 function console__cell__bg__last__bit 
   : int
 
 function console__cell__bg__position 
   : int
 
 axiom console__cell__bg__first__bit_axiom :
  ((console__cell__bg__first__bit ) >= 0)
 
 axiom console__cell__bg__last__bit_axiom :
  ((console__cell__bg__last__bit ) > (console__cell__bg__first__bit ))
 
 axiom console__cell__bg__position_axiom :
  ((console__cell__bg__position ) >= 0)
 
 function user_eq 
   (a : cell) (b : cell) : bool
 
 function dummy 
   : cell
 
 type cell__ref =
  { mutable cell__content "model_trace:" "name:" : cell }
 
 function cell__ref___projection 
   (a : cell__ref) : cell =
  a.cell__content
 
 meta "model_projection" function cell__ref___projection
 
 meta "inline : no" function cell__ref___projection
 
 val cell__havoc 
   (x : cell__ref) : unit
  writes {x}

end

(* Module for defining the constant "x" defined at console.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Console__at_x__x
 use import "_gnatprove_standard".Main

 function x #"console.ads" 34 0 0#"model" "model_trace:7550" "name:X" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at console.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__at_x__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "c" defined at console.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put__c
 use import "_gnatprove_standard".Main

 function c #"console.ads" 35 0 0#"model" "model_trace:7568" "name:C" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at console.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s" defined at console.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put__2__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"console.ads" 36 0 0#"model_projected" "model_trace:7586" "name:S" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at console.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put__2__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at console.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put__3__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"console.ads" 37 0 0#"model" "model_trace:7604" "name:N" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at console.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put__3__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "base" defined at console.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put__3__base
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function base #"console.ads" 37 0 0#"model" "name:Base" "model_trace:7613" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at console.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put__3__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at console.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put__4__n
 use import "_gnatprove_standard".Main

 function n #"console.ads" 38 0 0#"model" "name:N" "model_trace:7632" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at console.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put__4__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at console.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put_hex__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"console.ads" 39 0 0#"model" "name:N" "model_trace:7650" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at console.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put_hex__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at console.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put_hex__2__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"console.ads" 40 0 0#"model" "name:N" "model_trace:7668" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at console.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put_hex__2__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at console.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put_size__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"console.ads" 41 0 0#"model" "name:N" "model_trace:7686" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at console.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put_size__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s" defined at console.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Console__put_line__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"console.ads" 42 0 0#"model_projected" "name:S" "model_trace:7704" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at console.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__put_line__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s" defined at console.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Console__banner__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"console.ads" 43 0 0#"model_projected" "name:S" "model_trace:7722" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at console.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__banner__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fg" defined at console.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Console__banner__fg
 use import "_gnatprove_standard".Main

 function fg #"console.ads" 43 0 0#"model" "model_trace:7731" "name:FG" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "fg" defined at console.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__banner__fg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "bg" defined at console.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Console__banner__bg
 use import "_gnatprove_standard".Main

 function bg #"console.ads" 43 0 0#"model" "model_trace:7741" "name:BG" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "bg" defined at console.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__banner__bg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fg" defined at console.ads:44, created in Gnat2Why.Decls.Translate_Constant *)
module Console__set_colour__fg
 use import "_gnatprove_standard".Main

 function fg #"console.ads" 44 0 0#"model" "name:FG" "model_trace:7760" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "fg" defined at console.ads:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__set_colour__fg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "bg" defined at console.ads:44, created in Gnat2Why.Decls.Translate_Constant *)
module Console__set_colour__bg
 use import "_gnatprove_standard".Main

 function bg #"console.ads" 44 0 0#"model" "name:BG" "model_trace:7770" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "bg" defined at console.ads:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__set_colour__bg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "num" defined at console.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Console__shift_lines__num
 use import "_gnatprove_standard".Main

 function num #"console.ads" 48 0 0#"model" "model_trace:7798" "name:num" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "num" defined at console.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Console__shift_lines__num___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "interrupt" defined at x86-interrupts.ads:6, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__interrupt
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  32
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt__ref =
  { mutable interrupt__content "model_trace:" "name:" : interrupt }
 
 function interrupt__ref___projection 
   (a : interrupt__ref) : interrupt =
  a.interrupt__content
 
 meta "model_projection" function interrupt__ref___projection
 
 meta "inline : no" function interrupt__ref___projection
 
 val interrupt__havoc 
   (x : interrupt__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt" defined at x86-interrupts.ads:6, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__interrupt__rep
 use        X86__interrupts__interrupt
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = X86__interrupts__interrupt.interrupt, 
 predicate in_range = X86__interrupts__interrupt.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "cpu_exception" defined at x86-interrupts.ads:26, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__cpu_exception
 use import "_gnatprove_standard".Main
 use import "int".Int

 type cpu_exception 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  19
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = cpu_exception, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type cpu_exception__ref =
  { mutable cpu_exception__content "model_trace:" "name:" : cpu_exception }
 
 function cpu_exception__ref___projection 
   (a : cpu_exception__ref) : cpu_exception =
  a.cpu_exception__content
 
 meta "model_projection" function cpu_exception__ref___projection
 
 meta "inline : no" function cpu_exception__ref___projection
 
 val cpu_exception__havoc 
   (x : cpu_exception__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "cpu_exception" defined at x86-interrupts.ads:26, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__cpu_exception__rep
 use        X86__interrupts__cpu_exception
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = X86__interrupts__cpu_exception.cpu_exception, 
 predicate in_range = X86__interrupts__cpu_exception.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "external_interrupt" defined at x86-interrupts.ads:27, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__external_interrupt
 use import "_gnatprove_standard".Main
 use import "int".Int

 type external_interrupt 
 
 function first 
   : int =
  20
 
 function last 
   : int =
  32
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = external_interrupt, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type external_interrupt__ref =
  { mutable external_interrupt__content "model_trace:" "name:" : external_interrupt }
 
 function external_interrupt__ref___projection 
   (a : external_interrupt__ref) : external_interrupt =
  a.external_interrupt__content
 
 meta "model_projection" function external_interrupt__ref___projection
 
 meta "inline : no" function external_interrupt__ref___projection
 
 val external_interrupt__havoc 
   (x : external_interrupt__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "external_interrupt" defined at x86-interrupts.ads:27, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__external_interrupt__rep
 use        X86__interrupts__external_interrupt
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = X86__interrupts__external_interrupt.external_interrupt, 
 predicate in_range = X86__interrupts__external_interrupt.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "irq" defined at x86-interrupts.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module X86__interrupts__slow_handler__irq
 use import "_gnatprove_standard".Main

 function irq #"x86-interrupts.ads" 29 0 0#"model" "model_trace:8319" "name:IRQ" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "irq" defined at x86-interrupts.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__interrupts__slow_handler__irq___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handler" defined at x86-interrupts.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module X86__interrupts__slow_handler__handler
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function handler #"x86-interrupts.ads" 29 0 0#"model" "model_trace:8328" "name:Handler" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handler" defined at x86-interrupts.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__interrupts__slow_handler__handler___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "irq" defined at x86-interrupts.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module X86__interrupts__register_handler__irq
 use import "_gnatprove_standard".Main

 function irq #"x86-interrupts.ads" 30 0 0#"model" "name:IRQ" "model_trace:8348" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "irq" defined at x86-interrupts.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__interrupts__register_handler__irq___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handler" defined at x86-interrupts.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module X86__interrupts__register_handler__handler
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function handler #"x86-interrupts.ads" 30 0 0#"model" "name:Handler" "model_trace:8357" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handler" defined at x86-interrupts.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__interrupts__register_handler__handler___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T1s" defined at x86-interrupts.ads:38, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__idt_entry__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type t1s 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 7 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  7
 
 predicate in_range 
   (x : BV8.t)  =
  ( (BV8.ule first x) /\ (BV8.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_8 with
 type t = t1s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type t1s__ref =
  { mutable t1s__content "model_trace:" "name:" : t1s }
 
 function t1s__ref___projection 
   (a : t1s__ref) : t1s =
  a.t1s__content
 
 meta "model_projection" function t1s__ref___projection
 
 meta "inline : no" function t1s__ref___projection
 
 val t1s__havoc 
   (x : t1s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1s" defined at x86-interrupts.ads:38, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__idt_entry__T1s__rep
 use        X86__interrupts__idt_entry__T1s
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = X86__interrupts__idt_entry__T1s.t1s, 
 predicate in_range = X86__interrupts__idt_entry__T1s.in_range, 
 predicate in_range_int = X86__interrupts__idt_entry__T1s.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T2s" defined at x86-interrupts.ads:39, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__idt_entry__T2s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type t2s 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 15 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  15
 
 predicate in_range 
   (x : BV8.t)  =
  ( (BV8.ule first x) /\ (BV8.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_8 with
 type t = t2s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type t2s__ref =
  { mutable t2s__content "model_trace:" "name:" : t2s }
 
 function t2s__ref___projection 
   (a : t2s__ref) : t2s =
  a.t2s__content
 
 meta "model_projection" function t2s__ref___projection
 
 meta "inline : no" function t2s__ref___projection
 
 val t2s__havoc 
   (x : t2s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T2s" defined at x86-interrupts.ads:39, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__idt_entry__T2s__rep
 use        X86__interrupts__idt_entry__T2s
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = X86__interrupts__idt_entry__T2s.t2s, 
 predicate in_range = X86__interrupts__idt_entry__T2s.in_range, 
 predicate in_range_int = X86__interrupts__idt_entry__T2s.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T3s" defined at x86-interrupts.ads:40, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__idt_entry__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type t3s 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 3 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  3
 
 predicate in_range 
   (x : BV8.t)  =
  ( (BV8.ule first x) /\ (BV8.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_8 with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type t3s__ref =
  { mutable t3s__content "model_trace:" "name:" : t3s }
 
 function t3s__ref___projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at x86-interrupts.ads:40, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__idt_entry__T3s__rep
 use        X86__interrupts__idt_entry__T3s
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = X86__interrupts__idt_entry__T3s.t3s, 
 predicate in_range = X86__interrupts__idt_entry__T3s.in_range, 
 predicate in_range_int = X86__interrupts__idt_entry__T3s.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "idt_entry" defined at x86-interrupts.ads:35, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module X86__interrupts__idt_entry__rep
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        "_gnatprove_standard".BV16
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_16
 use        Interfaces__unsigned_16__rep
 use        Interfaces__unsigned_32
 use        Interfaces__unsigned_32__rep
 use        X86__interrupts__idt_entry__T1s
 use        X86__interrupts__idt_entry__T1s__rep
 use        X86__interrupts__idt_entry__T2s
 use        X86__interrupts__idt_entry__T2s__rep
 use        X86__interrupts__idt_entry__T3s
 use        X86__interrupts__idt_entry__T3s__rep

 type __split_fields =
  { rec__x86__interrupts__idt_entry__offset_0_15 "model_trace:.8380" "name:Offset_0_15" : Interfaces__unsigned_16.unsigned_16; rec__x86__interrupts__idt_entry__selector "model_trace:.8390" "name:Selector" : Interfaces__unsigned_16.unsigned_16; rec__x86__interrupts__idt_entry__ist "model_trace:.8403" "name:IST" : X86__interrupts__idt_entry__T1s.t1s; rec__x86__interrupts__idt_entry__descriptor_type "model_trace:.8419" "name:Descriptor_Type" : X86__interrupts__idt_entry__T2s.t2s; rec__x86__interrupts__idt_entry__dpl "model_trace:.8435" "name:DPL" : X86__interrupts__idt_entry__T3s.t3s; rec__x86__interrupts__idt_entry__p "model_trace:.8451" "name:P" : bool; rec__x86__interrupts__idt_entry__offset_16_31 "model_trace:.8462" "name:Offset_16_31" : Interfaces__unsigned_16.unsigned_16; rec__x86__interrupts__idt_entry__offset_32_63 "model_trace:.8472" "name:Offset_32_63" : Interfaces__unsigned_32.unsigned_32; rec__x86__interrupts__idt_entry__pad "model_trace:.8482" "name:Pad" : Interfaces__unsigned_32.unsigned_32 }
 
 function __split_fields_Offset_0_15__projection "model_trace:.8380" "name:Offset_0_15" 
   (a : __split_fields) : Interfaces__unsigned_16.unsigned_16 =
  a.rec__x86__interrupts__idt_entry__offset_0_15
 
 meta "model_projection" function __split_fields_Offset_0_15__projection
 
 meta "inline : no" function __split_fields_Offset_0_15__projection
 
 function __split_fields_Selector__projection "model_trace:.8390" "name:Selector" 
   (a : __split_fields) : Interfaces__unsigned_16.unsigned_16 =
  a.rec__x86__interrupts__idt_entry__selector
 
 meta "model_projection" function __split_fields_Selector__projection
 
 meta "inline : no" function __split_fields_Selector__projection
 
 function __split_fields_IST__projection "model_trace:.8403" "name:IST" 
   (a : __split_fields) : X86__interrupts__idt_entry__T1s.t1s =
  a.rec__x86__interrupts__idt_entry__ist
 
 meta "model_projection" function __split_fields_IST__projection
 
 meta "inline : no" function __split_fields_IST__projection
 
 function __split_fields_Descriptor_Type__projection "model_trace:.8419" "name:Descriptor_Type" 
   (a : __split_fields) : X86__interrupts__idt_entry__T2s.t2s =
  a.rec__x86__interrupts__idt_entry__descriptor_type
 
 meta "model_projection" function __split_fields_Descriptor_Type__projection
 
 meta "inline : no" function __split_fields_Descriptor_Type__projection
 
 function __split_fields_DPL__projection "model_trace:.8435" "name:DPL" 
   (a : __split_fields) : X86__interrupts__idt_entry__T3s.t3s =
  a.rec__x86__interrupts__idt_entry__dpl
 
 meta "model_projection" function __split_fields_DPL__projection
 
 meta "inline : no" function __split_fields_DPL__projection
 
 function __split_fields_P__projection "model_trace:.8451" "name:P" 
   (a : __split_fields) : bool =
  a.rec__x86__interrupts__idt_entry__p
 
 meta "model_projection" function __split_fields_P__projection
 
 meta "inline : no" function __split_fields_P__projection
 
 function __split_fields_Offset_16_31__projection "model_trace:.8462" "name:Offset_16_31" 
   (a : __split_fields) : Interfaces__unsigned_16.unsigned_16 =
  a.rec__x86__interrupts__idt_entry__offset_16_31
 
 meta "model_projection" function __split_fields_Offset_16_31__projection
 
 meta "inline : no" function __split_fields_Offset_16_31__projection
 
 function __split_fields_Offset_32_63__projection "model_trace:.8472" "name:Offset_32_63" 
   (a : __split_fields) : Interfaces__unsigned_32.unsigned_32 =
  a.rec__x86__interrupts__idt_entry__offset_32_63
 
 meta "model_projection" function __split_fields_Offset_32_63__projection
 
 meta "inline : no" function __split_fields_Offset_32_63__projection
 
 function __split_fields_Pad__projection "model_trace:.8482" "name:Pad" 
   (a : __split_fields) : Interfaces__unsigned_32.unsigned_32 =
  a.rec__x86__interrupts__idt_entry__pad
 
 meta "model_projection" function __split_fields_Pad__projection
 
 meta "inline : no" function __split_fields_Pad__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___2__projection
 
 meta "inline : no" function __split_fields__ref___2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate x86__interrupts__idt_entry__offset_0_15__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__offset_0_15_ 
   (a : __rep) : Interfaces__unsigned_16.unsigned_16
  requires {  (x86__interrupts__idt_entry__offset_0_15__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__offset_0_15) }
 
 predicate x86__interrupts__idt_entry__selector__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__selector_ 
   (a : __rep) : Interfaces__unsigned_16.unsigned_16
  requires {  (x86__interrupts__idt_entry__selector__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__selector) }
 
 predicate x86__interrupts__idt_entry__ist__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__ist_ 
   (a : __rep) : X86__interrupts__idt_entry__T1s.t1s
  requires {  (x86__interrupts__idt_entry__ist__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__ist) }
 
 predicate x86__interrupts__idt_entry__descriptor_type__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__descriptor_type_ 
   (a : __rep) : X86__interrupts__idt_entry__T2s.t2s
  requires {  (x86__interrupts__idt_entry__descriptor_type__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__descriptor_type) }
 
 predicate x86__interrupts__idt_entry__dpl__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__dpl_ 
   (a : __rep) : X86__interrupts__idt_entry__T3s.t3s
  requires {  (x86__interrupts__idt_entry__dpl__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__dpl) }
 
 predicate x86__interrupts__idt_entry__p__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__p_ 
   (a : __rep) : bool
  requires {  (x86__interrupts__idt_entry__p__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__p) }
 
 predicate x86__interrupts__idt_entry__offset_16_31__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__offset_16_31_ 
   (a : __rep) : Interfaces__unsigned_16.unsigned_16
  requires {  (x86__interrupts__idt_entry__offset_16_31__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__offset_16_31) }
 
 predicate x86__interrupts__idt_entry__offset_32_63__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__offset_32_63_ 
   (a : __rep) : Interfaces__unsigned_32.unsigned_32
  requires {  (x86__interrupts__idt_entry__offset_32_63__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__offset_32_63) }
 
 predicate x86__interrupts__idt_entry__pad__pred 
   (a : __rep)  =
  true
 
 val rec__x86__interrupts__idt_entry__pad_ 
   (a : __rep) : Interfaces__unsigned_32.unsigned_32
  requires {  (x86__interrupts__idt_entry__pad__pred a) }
  ensures {  (result = a.__split_fields.rec__x86__interrupts__idt_entry__pad) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ( ( ( ( ( ( ((Interfaces__unsigned_16__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__offset_0_15) = (Interfaces__unsigned_16__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__offset_0_15)) /\ ((Interfaces__unsigned_16__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__selector) = (Interfaces__unsigned_16__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__selector)) ) /\ ((X86__interrupts__idt_entry__T1s__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__ist) = (X86__interrupts__idt_entry__T1s__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__ist)) ) /\ ((X86__interrupts__idt_entry__T2s__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__descriptor_type) = (X86__interrupts__idt_entry__T2s__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__descriptor_type)) ) /\ ((X86__interrupts__idt_entry__T3s__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__dpl) = (X86__interrupts__idt_entry__T3s__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__dpl)) ) /\ (a.__split_fields.rec__x86__interrupts__idt_entry__p = b.__split_fields.rec__x86__interrupts__idt_entry__p) ) /\ ((Interfaces__unsigned_16__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__offset_16_31) = (Interfaces__unsigned_16__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__offset_16_31)) ) /\ ((Interfaces__unsigned_32__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__offset_32_63) = (Interfaces__unsigned_32__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__offset_32_63)) ) /\ ((Interfaces__unsigned_32__rep.to_rep a.__split_fields.rec__x86__interrupts__idt_entry__pad) = (Interfaces__unsigned_32__rep.to_rep b.__split_fields.rec__x86__interrupts__idt_entry__pad)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "idt_entry" defined at x86-interrupts.ads:35, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__idt_entry
 use export X86__interrupts__idt_entry__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type idt_entry =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : idt_entry) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : idt_entry) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : idt_entry.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : idt_entry.
   ((object__alignment a) >= 0))
 
 function x86__interrupts__idt_entry__offset_0_15__first__bit 
   : int
 
 function x86__interrupts__idt_entry__offset_0_15__last__bit 
   : int
 
 function x86__interrupts__idt_entry__offset_0_15__position 
   : int
 
 axiom x86__interrupts__idt_entry__offset_0_15__first__bit_axiom :
  ((x86__interrupts__idt_entry__offset_0_15__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__offset_0_15__last__bit_axiom :
  ((x86__interrupts__idt_entry__offset_0_15__last__bit ) > (x86__interrupts__idt_entry__offset_0_15__first__bit ))
 
 axiom x86__interrupts__idt_entry__offset_0_15__position_axiom :
  ((x86__interrupts__idt_entry__offset_0_15__position ) >= 0)
 
 function x86__interrupts__idt_entry__selector__first__bit 
   : int
 
 function x86__interrupts__idt_entry__selector__last__bit 
   : int
 
 function x86__interrupts__idt_entry__selector__position 
   : int
 
 axiom x86__interrupts__idt_entry__selector__first__bit_axiom :
  ((x86__interrupts__idt_entry__selector__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__selector__last__bit_axiom :
  ((x86__interrupts__idt_entry__selector__last__bit ) > (x86__interrupts__idt_entry__selector__first__bit ))
 
 axiom x86__interrupts__idt_entry__selector__position_axiom :
  ((x86__interrupts__idt_entry__selector__position ) >= 0)
 
 function x86__interrupts__idt_entry__ist__first__bit 
   : int
 
 function x86__interrupts__idt_entry__ist__last__bit 
   : int
 
 function x86__interrupts__idt_entry__ist__position 
   : int
 
 axiom x86__interrupts__idt_entry__ist__first__bit_axiom :
  ((x86__interrupts__idt_entry__ist__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__ist__last__bit_axiom :
  ((x86__interrupts__idt_entry__ist__last__bit ) > (x86__interrupts__idt_entry__ist__first__bit ))
 
 axiom x86__interrupts__idt_entry__ist__position_axiom :
  ((x86__interrupts__idt_entry__ist__position ) >= 0)
 
 function x86__interrupts__idt_entry__descriptor_type__first__bit 
   : int
 
 function x86__interrupts__idt_entry__descriptor_type__last__bit 
   : int
 
 function x86__interrupts__idt_entry__descriptor_type__position 
   : int
 
 axiom x86__interrupts__idt_entry__descriptor_type__first__bit_axiom :
  ((x86__interrupts__idt_entry__descriptor_type__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__descriptor_type__last__bit_axiom :
  ((x86__interrupts__idt_entry__descriptor_type__last__bit ) > (x86__interrupts__idt_entry__descriptor_type__first__bit ))
 
 axiom x86__interrupts__idt_entry__descriptor_type__position_axiom :
  ((x86__interrupts__idt_entry__descriptor_type__position ) >= 0)
 
 function x86__interrupts__idt_entry__dpl__first__bit 
   : int
 
 function x86__interrupts__idt_entry__dpl__last__bit 
   : int
 
 function x86__interrupts__idt_entry__dpl__position 
   : int
 
 axiom x86__interrupts__idt_entry__dpl__first__bit_axiom :
  ((x86__interrupts__idt_entry__dpl__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__dpl__last__bit_axiom :
  ((x86__interrupts__idt_entry__dpl__last__bit ) > (x86__interrupts__idt_entry__dpl__first__bit ))
 
 axiom x86__interrupts__idt_entry__dpl__position_axiom :
  ((x86__interrupts__idt_entry__dpl__position ) >= 0)
 
 function x86__interrupts__idt_entry__p__first__bit 
   : int
 
 function x86__interrupts__idt_entry__p__last__bit 
   : int
 
 function x86__interrupts__idt_entry__p__position 
   : int
 
 axiom x86__interrupts__idt_entry__p__first__bit_axiom :
  ((x86__interrupts__idt_entry__p__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__p__last__bit_axiom :
  ((x86__interrupts__idt_entry__p__last__bit ) > (x86__interrupts__idt_entry__p__first__bit ))
 
 axiom x86__interrupts__idt_entry__p__position_axiom :
  ((x86__interrupts__idt_entry__p__position ) >= 0)
 
 function x86__interrupts__idt_entry__offset_16_31__first__bit 
   : int
 
 function x86__interrupts__idt_entry__offset_16_31__last__bit 
   : int
 
 function x86__interrupts__idt_entry__offset_16_31__position 
   : int
 
 axiom x86__interrupts__idt_entry__offset_16_31__first__bit_axiom :
  ((x86__interrupts__idt_entry__offset_16_31__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__offset_16_31__last__bit_axiom :
  ((x86__interrupts__idt_entry__offset_16_31__last__bit ) > (x86__interrupts__idt_entry__offset_16_31__first__bit ))
 
 axiom x86__interrupts__idt_entry__offset_16_31__position_axiom :
  ((x86__interrupts__idt_entry__offset_16_31__position ) >= 0)
 
 function x86__interrupts__idt_entry__offset_32_63__first__bit 
   : int
 
 function x86__interrupts__idt_entry__offset_32_63__last__bit 
   : int
 
 function x86__interrupts__idt_entry__offset_32_63__position 
   : int
 
 axiom x86__interrupts__idt_entry__offset_32_63__first__bit_axiom :
  ((x86__interrupts__idt_entry__offset_32_63__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__offset_32_63__last__bit_axiom :
  ((x86__interrupts__idt_entry__offset_32_63__last__bit ) > (x86__interrupts__idt_entry__offset_32_63__first__bit ))
 
 axiom x86__interrupts__idt_entry__offset_32_63__position_axiom :
  ((x86__interrupts__idt_entry__offset_32_63__position ) >= 0)
 
 function x86__interrupts__idt_entry__pad__first__bit 
   : int
 
 function x86__interrupts__idt_entry__pad__last__bit 
   : int
 
 function x86__interrupts__idt_entry__pad__position 
   : int
 
 axiom x86__interrupts__idt_entry__pad__first__bit_axiom :
  ((x86__interrupts__idt_entry__pad__first__bit ) >= 0)
 
 axiom x86__interrupts__idt_entry__pad__last__bit_axiom :
  ((x86__interrupts__idt_entry__pad__last__bit ) > (x86__interrupts__idt_entry__pad__first__bit ))
 
 axiom x86__interrupts__idt_entry__pad__position_axiom :
  ((x86__interrupts__idt_entry__pad__position ) >= 0)
 
 function user_eq 
   (a : idt_entry) (b : idt_entry) : bool
 
 function dummy 
   : idt_entry
 
 type idt_entry__ref =
  { mutable idt_entry__content "model_trace:" "name:" : idt_entry }
 
 function idt_entry__ref___projection 
   (a : idt_entry__ref) : idt_entry =
  a.idt_entry__content
 
 meta "model_projection" function idt_entry__ref___projection
 
 meta "inline : no" function idt_entry__ref___projection
 
 val idt_entry__havoc 
   (x : idt_entry__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TtableD1" defined at x86-interrupts.ads:61, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__TtableD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttableD1 =
  < range 0 63 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  63
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttableD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttableD1__ref =
  { mutable ttableD1__content "model_trace:" "name:" : ttableD1 }
 
 function ttableD1__ref___projection 
   (a : ttableD1__ref) : ttableD1 =
  a.ttableD1__content
 
 meta "model_projection" function ttableD1__ref___projection
 
 meta "inline : no" function ttableD1__ref___projection
 
 val ttableD1__havoc 
   (x : ttableD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TtableD1" defined at x86-interrupts.ads:61, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__TtableD1__rep
 use        X86__interrupts__TtableD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__interrupts__TtableD1.ttableD1) : int =
  (X86__interrupts__TtableD1.ttableD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__interrupts__TtableD1.ttableD1, 
 predicate in_range = X86__interrupts__TtableD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TtableB" defined at x86-interrupts.ads:61, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__X86__interrupts__idt_entry
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__interrupts__idt_entry

 function index_I1_one 
   : int =
  1
 
 type component_type =
  X86__interrupts__idt_entry.idt_entry
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_156   : int.
   (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
    ((X86__interrupts__idt_entry.bool_eq (get a temp___idx_156) (get b ((b__first - a__first) + temp___idx_156))) = True)) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_156   : int.
    (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
     ((X86__interrupts__idt_entry.bool_eq (get a temp___idx_156) (get b ((b__first - a__first) + temp___idx_156))) = True)) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TtableB" defined at x86-interrupts.ads:61, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__X86__interrupts__idt_entry__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__X86__interrupts__idt_entry

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__X86__interrupts__idt_entry.component_type, 
 type map = Array__Int__X86__interrupts__idt_entry.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__X86__interrupts__idt_entry.get

end

(* Module for axiomatizing type "TtableB" defined at x86-interrupts.ads:61, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__TtableB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        X86__interrupts__idt_entry
 use        X86__interrupts__TtableD1
 use        Array__Int__X86__interrupts__idt_entry

 type component_type =
  X86__interrupts__idt_entry.idt_entry
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__X86__interrupts__idt_entry.map, 
 function array_bool_eq = Array__Int__X86__interrupts__idt_entry.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = X86__interrupts__TtableD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ttableB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type ttableB__ref =
  { mutable ttableB__content "model_trace:" "name:" : ttableB }
 
 function ttableB__ref___projection 
   (a : ttableB__ref) : ttableB =
  a.ttableB__content
 
 meta "model_projection" function ttableB__ref___projection
 
 meta "inline : no" function ttableB__ref___projection
 
 val ttableB__havoc 
   (x : ttableB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TtableT" defined at x86-interrupts.ads:61, created in Gnat2Why.Types.Translate_Type *)
module X86__interrupts__TtableT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__interrupts__idt_entry
 use        Array__Int__X86__interrupts__idt_entry

 type component_type =
  X86__interrupts__idt_entry.idt_entry
 
 function first 
   : int =
  0
 
 function last 
   : int =
  63
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__X86__interrupts__idt_entry.map, 
 function array_bool_eq = Array__Int__X86__interrupts__idt_entry.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "msg" defined at error.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Error__lastchance__msg
 use import "_gnatprove_standard".Main
 use        Standard__string

 function msg #"error.ads" 7 0 0#"model_projected" "model_trace:7846" "name:Msg" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "msg" defined at error.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Error__lastchance__msg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "line" defined at error.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Error__lastchance__line
 use import "_gnatprove_standard".Main

 function line #"error.ads" 7 0 0#"model" "model_trace:7855" "name:Line" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "line" defined at error.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Error__lastchance__line___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s" defined at error.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Error__panic__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"error.ads" 19 0 0#"model_projected" "name:S" "model_trace:7904" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at error.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Error__panic__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tstorage_offsetB" defined at s-stoele.ads:54, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__Tstorage_offsetB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tstorage_offsetB =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tstorage_offsetB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tstorage_offsetB__ref =
  { mutable tstorage_offsetB__content "model_trace:" "name:" : tstorage_offsetB }
 
 function tstorage_offsetB__ref___projection 
   (a : tstorage_offsetB__ref) : tstorage_offsetB =
  a.tstorage_offsetB__content
 
 meta "model_projection" function tstorage_offsetB__ref___projection
 
 meta "inline : no" function tstorage_offsetB__ref___projection
 
 val tstorage_offsetB__havoc 
   (x : tstorage_offsetB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tstorage_offsetB" defined at s-stoele.ads:54, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__Tstorage_offsetB__rep
 use        System__storage_elements__Tstorage_offsetB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__storage_elements__Tstorage_offsetB.tstorage_offsetB) : int =
  (System__storage_elements__Tstorage_offsetB.tstorage_offsetB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__storage_elements__Tstorage_offsetB.tstorage_offsetB, 
 predicate in_range = System__storage_elements__Tstorage_offsetB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "storage_offset" defined at s-stoele.ads:54, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__storage_offset
 use import "_gnatprove_standard".Main
 use import "int".Int

 type storage_offset =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = storage_offset, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type storage_offset__ref =
  { mutable storage_offset__content "model_trace:" "name:" : storage_offset }
 
 function storage_offset__ref___projection 
   (a : storage_offset__ref) : storage_offset =
  a.storage_offset__content
 
 meta "model_projection" function storage_offset__ref___projection
 
 meta "inline : no" function storage_offset__ref___projection
 
 val storage_offset__havoc 
   (x : storage_offset__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "storage_offset" defined at s-stoele.ads:54, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__storage_offset__rep
 use        System__storage_elements__storage_offset
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__storage_elements__storage_offset.storage_offset) : int =
  (System__storage_elements__storage_offset.storage_offset'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__storage_elements__storage_offset.storage_offset, 
 predicate in_range = System__storage_elements__storage_offset.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "storage_count" defined at s-stoele.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__storage_count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type storage_count =
  < range 0 9223372036854775807 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = storage_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type storage_count__ref =
  { mutable storage_count__content "model_trace:" "name:" : storage_count }
 
 function storage_count__ref___projection 
   (a : storage_count__ref) : storage_count =
  a.storage_count__content
 
 meta "model_projection" function storage_count__ref___projection
 
 meta "inline : no" function storage_count__ref___projection
 
 val storage_count__havoc 
   (x : storage_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "storage_count" defined at s-stoele.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__storage_count__rep
 use        System__storage_elements__storage_count
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__storage_elements__storage_count.storage_count) : int =
  (System__storage_elements__storage_count.storage_count'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__storage_elements__storage_count.storage_count, 
 predicate in_range = System__storage_elements__storage_count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "storage_element" defined at s-stoele.ads:64, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__storage_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type storage_element 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 255 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  255
 
 predicate in_range 
   (x : BV8.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = storage_element, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type storage_element__ref =
  { mutable storage_element__content "model_trace:" "name:" : storage_element }
 
 function storage_element__ref___projection 
   (a : storage_element__ref) : storage_element =
  a.storage_element__content
 
 meta "model_projection" function storage_element__ref___projection
 
 meta "inline : no" function storage_element__ref___projection
 
 val storage_element__havoc 
   (x : storage_element__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "storage_element" defined at s-stoele.ads:64, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__storage_element__rep
 use        System__storage_elements__storage_element
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = System__storage_elements__storage_element.storage_element, 
 predicate in_range = System__storage_elements__storage_element.in_range, 
 predicate in_range_int = System__storage_elements__storage_element.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "storage_array" defined at s-stoele.ads:70, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__System__storage_elements__storage_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8
 use        System__storage_elements__storage_element
 use        System__storage_elements__storage_element__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  System__storage_elements__storage_element.storage_element
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_157   : int.
   (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
    ((System__storage_elements__storage_element__rep.to_rep (get a temp___idx_157)) = (System__storage_elements__storage_element__rep.to_rep (get b ((b__first - a__first) + temp___idx_157))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_157   : int.
    (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
     ((System__storage_elements__storage_element__rep.to_rep (get a temp___idx_157)) = (System__storage_elements__storage_element__rep.to_rep (get b ((b__first - a__first) + temp___idx_157))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "storage_array" defined at s-stoele.ads:70, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__System__storage_elements__storage_element__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__System__storage_elements__storage_element

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__System__storage_elements__storage_element.component_type, 
 type map = Array__Int__System__storage_elements__storage_element.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__storage_elements__storage_element.get

end

(* Module for axiomatizing comparison for the array theory associated to type "storage_array" defined at s-stoele.ads:70, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__System__storage_elements__storage_element_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_elements__storage_element__rep
 use        Array__Int__System__storage_elements__storage_element

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_BV8_Rep_Comparison_Axiom with
 type component_type = Array__Int__System__storage_elements__storage_element.component_type, 
 function to_rep = System__storage_elements__storage_element__rep.to_rep, 
 type map = Array__Int__System__storage_elements__storage_element.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__storage_elements__storage_element.get, 
 function bool_eq = Array__Int__System__storage_elements__storage_element.bool_eq

end

(* Module for axiomatizing type "storage_array" defined at s-stoele.ads:70, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__storage_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_elements__Tstorage_offsetB
 use        System__storage_elements__Tstorage_offsetB__rep
 use        System__storage_elements__storage_offset
 use        System__storage_elements__storage_element
 use        Array__Int__System__storage_elements__storage_element

 type component_type =
  System__storage_elements__storage_element.storage_element
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__storage_elements__storage_element.map, 
 function array_bool_eq = Array__Int__System__storage_elements__storage_element.bool_eq, 
 type index_base_type = System__storage_elements__Tstorage_offsetB.tstorage_offsetB, 
 type index_rep_type = int, 
 function to_rep = System__storage_elements__Tstorage_offsetB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = System__storage_elements__Tstorage_offsetB.in_range, 
 predicate index_dynamic_property = System__storage_elements__storage_offset.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type storage_array =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type storage_array__ref =
  { mutable storage_array__content "model_trace:" "name:" : storage_array }
 
 function storage_array__ref___projection 
   (a : storage_array__ref) : storage_array =
  a.storage_array__content
 
 meta "model_projection" function storage_array__ref___projection
 
 meta "inline : no" function storage_array__ref___projection
 
 val storage_array__havoc 
   (x : storage_array__ref) : unit
  writes {x}

end

(* Module for defining the constant "left" defined at s-stoele.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Oadd__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"s-stoele.ads" 76 0 0#"model" "name:Left" "model_trace:8709" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at s-stoele.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Oadd__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at s-stoele.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Oadd__right
 use import "_gnatprove_standard".Main

 function right #"s-stoele.ads" 76 0 0#"model" "name:Right" "model_trace:8718" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at s-stoele.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Oadd__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oadd" defined at s-stoele.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__storage_elements__Oadd
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oadd 
   (left : BV64.t) (right : int) : BV64.t
 
 predicate oadd__function_guard 
   (result : BV64.t) (left : BV64.t) (right : int) 

end

(* Module for defining the constant "left" defined at s-stoele.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Oadd__2__left
 use import "_gnatprove_standard".Main

 function left #"s-stoele.ads" 81 0 0#"model" "name:Left" "model_trace:8751" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at s-stoele.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Oadd__2__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at s-stoele.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Oadd__2__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"s-stoele.ads" 81 0 0#"model" "name:Right" "model_trace:8760" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at s-stoele.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Oadd__2__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oadd__2" defined at s-stoele.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__storage_elements__Oadd__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oadd__2 
   (left : int) (right : BV64.t) : BV64.t
 
 predicate oadd__2__function_guard 
   (result : BV64.t) (left : int) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at s-stoele.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Osubtract__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"s-stoele.ads" 86 0 0#"model" "name:Left" "model_trace:8793" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at s-stoele.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Osubtract__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at s-stoele.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Osubtract__right
 use import "_gnatprove_standard".Main

 function right #"s-stoele.ads" 86 0 0#"model" "name:Right" "model_trace:8802" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at s-stoele.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Osubtract__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Osubtract" defined at s-stoele.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__storage_elements__Osubtract
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function osubtract 
   (left : BV64.t) (right : int) : BV64.t
 
 predicate osubtract__function_guard 
   (result : BV64.t) (left : BV64.t) (right : int) 

end

(* Module for defining the constant "left" defined at s-stoele.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Osubtract__2__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"s-stoele.ads" 91 0 0#"model" "name:Left" "model_trace:8835" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at s-stoele.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Osubtract__2__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at s-stoele.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Osubtract__2__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"s-stoele.ads" 91 0 0#"model" "name:Right" "model_trace:8842" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at s-stoele.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Osubtract__2__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Osubtract__2" defined at s-stoele.ads:91, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__storage_elements__Osubtract__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function osubtract__2 
   (left : BV64.t) (right : BV64.t) : int
 
 predicate osubtract__2__function_guard 
   (result : int) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at s-stoele.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Omod__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"s-stoele.ads" 97 0 0#"model" "name:Left" "model_trace:8876" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at s-stoele.ads:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Omod__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at s-stoele.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__Omod__right
 use import "_gnatprove_standard".Main

 function right #"s-stoele.ads" 98 0 0#"model" "name:Right" "model_trace:8885" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at s-stoele.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__Omod__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Omod" defined at s-stoele.ads:96, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__storage_elements__Omod
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function omod 
   (left : BV64.t) (right : int) : int
 
 predicate omod__function_guard 
   (result : int) (left : BV64.t) (right : int) 

end

(* Module for axiomatizing type "integer_address" defined at s-stoele.ads:105, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__integer_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type integer_address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = integer_address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type integer_address__ref =
  { mutable integer_address__content "model_trace:" "name:" : integer_address }
 
 function integer_address__ref___projection 
   (a : integer_address__ref) : integer_address =
  a.integer_address__content
 
 meta "model_projection" function integer_address__ref___projection
 
 meta "inline : no" function integer_address__ref___projection
 
 val integer_address__havoc 
   (x : integer_address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_address" defined at s-stoele.ads:105, created in Gnat2Why.Types.Translate_Type *)
module System__storage_elements__integer_address__rep
 use        System__storage_elements__integer_address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__storage_elements__integer_address.integer_address, 
 predicate in_range = System__storage_elements__integer_address.in_range, 
 predicate in_range_int = System__storage_elements__integer_address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "value" defined at s-stoele.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__to_address__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-stoele.ads" 107 0 0#"model" "name:Value" "model_trace:8928" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-stoele.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__to_address__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "to_address" defined at s-stoele.ads:107, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__storage_elements__to_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function to_address 
   (value : BV64.t) : BV64.t
 
 predicate to_address__function_guard 
   (result : BV64.t) (value : BV64.t) 

end

(* Module for defining the constant "value" defined at s-stoele.ads:112, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_elements__to_integer__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-stoele.ads" 112 0 0#"model" "name:Value" "model_trace:8961" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-stoele.ads:112, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__storage_elements__to_integer__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "to_integer" defined at s-stoele.ads:112, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__storage_elements__to_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function to_integer 
   (value : BV64.t) : BV64.t
 
 predicate to_integer__function_guard 
   (result : BV64.t) (value : BV64.t) 

end

(* Module for defining the constant "max_allocations" defined at mmap.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Mmap__max_allocations
 use import "_gnatprove_standard".Main

 function max_allocations #"mmap.ads" 10 0 0#"model" "model_trace:9015" "name:MAX_ALLOCATIONS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "node_index" defined at mmap.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Mmap__node_index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type node_index =
  < range 0 4000 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4000
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = node_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type node_index__ref =
  { mutable node_index__content "model_trace:" "name:" : node_index }
 
 function node_index__ref___projection 
   (a : node_index__ref) : node_index =
  a.node_index__content
 
 meta "model_projection" function node_index__ref___projection
 
 meta "inline : no" function node_index__ref___projection
 
 val node_index__havoc 
   (x : node_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "node_index" defined at mmap.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Mmap__node_index__rep
 use        Mmap__node_index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Mmap__node_index.node_index) : int =
  (Mmap__node_index.node_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Mmap__node_index.node_index, 
 predicate in_range = Mmap__node_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "node" defined at mmap.ads:33, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mmap__node__rep
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__unsigned_64
 use        Interfaces__unsigned_64__rep
 use        Common__address
 use        Common__address__rep
 use        Mmap__node_index
 use        Mmap__node_index__rep

 type __split_fields =
  { rec__mmap__node__next "model_trace:.9176" "name:Next" : Mmap__node_index.node_index; rec__mmap__node__base "name:Base" "model_trace:.9186" : Common__address.address; rec__mmap__node__length "model_trace:.9196" "name:Length" : Interfaces__unsigned_64.unsigned_64 }
 
 function __split_fields_Next__projection "model_trace:.9176" "name:Next" 
   (a : __split_fields) : Mmap__node_index.node_index =
  a.rec__mmap__node__next
 
 meta "model_projection" function __split_fields_Next__projection
 
 meta "inline : no" function __split_fields_Next__projection
 
 function __split_fields_Base__projection "name:Base" "model_trace:.9186" 
   (a : __split_fields) : Common__address.address =
  a.rec__mmap__node__base
 
 meta "model_projection" function __split_fields_Base__projection
 
 meta "inline : no" function __split_fields_Base__projection
 
 function __split_fields_Length__projection "model_trace:.9196" "name:Length" 
   (a : __split_fields) : Interfaces__unsigned_64.unsigned_64 =
  a.rec__mmap__node__length
 
 meta "model_projection" function __split_fields_Length__projection
 
 meta "inline : no" function __split_fields_Length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___3__projection
 
 meta "inline : no" function __split_fields__ref___3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___3__projection
 
 meta "inline : no" function __rep___3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate mmap__node__next__pred 
   (a : __rep)  =
  true
 
 val rec__mmap__node__next_ 
   (a : __rep) : Mmap__node_index.node_index
  requires {  (mmap__node__next__pred a) }
  ensures {  (result = a.__split_fields.rec__mmap__node__next) }
 
 predicate mmap__node__base__pred 
   (a : __rep)  =
  true
 
 val rec__mmap__node__base_ 
   (a : __rep) : Common__address.address
  requires {  (mmap__node__base__pred a) }
  ensures {  (result = a.__split_fields.rec__mmap__node__base) }
 
 predicate mmap__node__length__pred 
   (a : __rep)  =
  true
 
 val rec__mmap__node__length_ 
   (a : __rep) : Interfaces__unsigned_64.unsigned_64
  requires {  (mmap__node__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mmap__node__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Mmap__node_index__rep.to_rep a.__split_fields.rec__mmap__node__next) = (Mmap__node_index__rep.to_rep b.__split_fields.rec__mmap__node__next)) /\ ((Common__address__rep.to_rep a.__split_fields.rec__mmap__node__base) = (Common__address__rep.to_rep b.__split_fields.rec__mmap__node__base)) ) /\ ((Interfaces__unsigned_64__rep.to_rep a.__split_fields.rec__mmap__node__length) = (Interfaces__unsigned_64__rep.to_rep b.__split_fields.rec__mmap__node__length)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "node" defined at mmap.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Mmap__node
 use export Mmap__node__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type node =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : node) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : node) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : node.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : node.
   ((object__alignment a) >= 0))
 
 function mmap__node__next__first__bit 
   : int
 
 function mmap__node__next__last__bit 
   : int
 
 function mmap__node__next__position 
   : int
 
 axiom mmap__node__next__first__bit_axiom :
  ((mmap__node__next__first__bit ) >= 0)
 
 axiom mmap__node__next__last__bit_axiom :
  ((mmap__node__next__last__bit ) > (mmap__node__next__first__bit ))
 
 axiom mmap__node__next__position_axiom :
  ((mmap__node__next__position ) >= 0)
 
 function mmap__node__base__first__bit 
   : int
 
 function mmap__node__base__last__bit 
   : int
 
 function mmap__node__base__position 
   : int
 
 axiom mmap__node__base__first__bit_axiom :
  ((mmap__node__base__first__bit ) >= 0)
 
 axiom mmap__node__base__last__bit_axiom :
  ((mmap__node__base__last__bit ) > (mmap__node__base__first__bit ))
 
 axiom mmap__node__base__position_axiom :
  ((mmap__node__base__position ) >= 0)
 
 function mmap__node__length__first__bit 
   : int
 
 function mmap__node__length__last__bit 
   : int
 
 function mmap__node__length__position 
   : int
 
 axiom mmap__node__length__first__bit_axiom :
  ((mmap__node__length__first__bit ) >= 0)
 
 axiom mmap__node__length__last__bit_axiom :
  ((mmap__node__length__last__bit ) > (mmap__node__length__first__bit ))
 
 axiom mmap__node__length__position_axiom :
  ((mmap__node__length__position ) >= 0)
 
 function user_eq 
   (a : node) (b : node) : bool
 
 function dummy 
   : node
 
 type node__ref =
  { mutable node__content "model_trace:" "name:" : node }
 
 function node__ref___projection 
   (a : node__ref) : node =
  a.node__content
 
 meta "model_projection" function node__ref___projection
 
 meta "inline : no" function node__ref___projection
 
 val node__havoc 
   (x : node__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "Tnode_listB" defined at mmap.ads:39, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mmap__node
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Mmap__node

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Mmap__node.node
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_158   : int.
   (if (( (a__first <= temp___idx_158) /\ (temp___idx_158 <= a__last) )) then (
    ((Mmap__node.bool_eq (get a temp___idx_158) (get b ((b__first - a__first) + temp___idx_158))) = True)) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_158   : int.
    (if (( (a__first <= temp___idx_158) /\ (temp___idx_158 <= a__last) )) then (
     ((Mmap__node.bool_eq (get a temp___idx_158) (get b ((b__first - a__first) + temp___idx_158))) = True)) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tnode_listB" defined at mmap.ads:39, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mmap__node__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Mmap__node

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Mmap__node.component_type, 
 type map = Array__Int__Mmap__node.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mmap__node.get

end

(* Module for axiomatizing type "Tnode_listB" defined at mmap.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Mmap__Tnode_listB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Mmap__node_index
 use        Mmap__node
 use        Array__Int__Mmap__node

 type component_type =
  Mmap__node.node
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Mmap__node.map, 
 function array_bool_eq = Array__Int__Mmap__node.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Mmap__node_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tnode_listB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tnode_listB__ref =
  { mutable tnode_listB__content "model_trace:" "name:" : tnode_listB }
 
 function tnode_listB__ref___projection 
   (a : tnode_listB__ref) : tnode_listB =
  a.tnode_listB__content
 
 meta "model_projection" function tnode_listB__ref___projection
 
 meta "inline : no" function tnode_listB__ref___projection
 
 val tnode_listB__havoc 
   (x : tnode_listB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "node_list" defined at mmap.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Mmap__node_list
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Mmap__node
 use        Array__Int__Mmap__node

 type component_type =
  Mmap__node.node
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4000
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Mmap__node.map, 
 function array_bool_eq = Array__Int__Mmap__node.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "size" defined at mmap.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Mmap__allocate__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"mmap.ads" 15 0 0#"model" "name:Size" "model_trace:9048" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at mmap.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mmap__allocate__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "base" defined at mmap.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Mmap__free__base
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function base #"mmap.ads" 16 0 0#"model" "name:Base" "model_trace:9067" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at mmap.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mmap__free__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "length" defined at mmap.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Mmap__free__length
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function length #"mmap.ads" 16 0 0#"model" "name:Length" "model_trace:9076" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "length" defined at mmap.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mmap__free__length___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "base" defined at mmap.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Mmap__initialise__base
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function base #"mmap.ads" 18 0 0#"model" "name:Base" "model_trace:9094" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at mmap.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mmap__initialise__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "length" defined at mmap.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Mmap__initialise__length
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function length #"mmap.ads" 19 0 0#"model" "name:Length" "model_trace:9103" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "length" defined at mmap.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mmap__initialise__length___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "unit" defined at mmap.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Mmap__initialise__unit
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function unit__ #"mmap.ads" 20 0 0#"model" "model_trace:9112" "name:Unit" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "unit" defined at mmap.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mmap__initialise__unit___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "null_character" defined at x86-dev-keyboard.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__null_character
 use import "_gnatprove_standard".Main

 function null_character #"x86-dev-keyboard.ads" 7 0 0#"model" "model_trace:9281" "name:Null_Character" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backspace" defined at x86-dev-keyboard.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__backspace
 use import "_gnatprove_standard".Main

 function backspace #"x86-dev-keyboard.ads" 8 0 0#"model" "model_trace:9294" "name:Backspace" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "tab" defined at x86-dev-keyboard.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__tab
 use import "_gnatprove_standard".Main

 function tab #"x86-dev-keyboard.ads" 9 0 0#"model" "model_trace:9307" "name:Tab" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lf" defined at x86-dev-keyboard.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__lf
 use import "_gnatprove_standard".Main

 function lf #"x86-dev-keyboard.ads" 10 0 0#"model" "name:LF" "model_trace:9320" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T1s" defined at x86-dev-keyboard.ads:12, created in Gnat2Why.Types.Translate_Type *)
module X86__dev__keyboard__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  12
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "num_row" defined at x86-dev-keyboard.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__num_row
 use import "_gnatprove_standard".Main
 use        Standard__string

 function num_row #"x86-dev-keyboard.ads" 12 0 0#"model_projected" "model_trace:9333" "name:Num_Row" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T2s" defined at x86-dev-keyboard.ads:13, created in Gnat2Why.Types.Translate_Type *)
module X86__dev__keyboard__T2s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  12
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "first_row" defined at x86-dev-keyboard.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__first_row
 use import "_gnatprove_standard".Main
 use        Standard__string

 function first_row #"x86-dev-keyboard.ads" 13 0 0#"model_projected" "model_trace:9343" "name:First_Row" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T3s" defined at x86-dev-keyboard.ads:14, created in Gnat2Why.Types.Translate_Type *)
module X86__dev__keyboard__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  12
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "second_row" defined at x86-dev-keyboard.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__second_row
 use import "_gnatprove_standard".Main
 use        Standard__string

 function second_row #"x86-dev-keyboard.ads" 14 0 0#"model_projected" "model_trace:9353" "name:Second_Row" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T4s" defined at x86-dev-keyboard.ads:15, created in Gnat2Why.Types.Translate_Type *)
module X86__dev__keyboard__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  11
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "third_row" defined at x86-dev-keyboard.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__third_row
 use import "_gnatprove_standard".Main
 use        Standard__string

 function third_row #"x86-dev-keyboard.ads" 15 0 0#"model_projected" "model_trace:9363" "name:Third_Row" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "command_port" defined at x86-dev-keyboard.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__command_port
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function command_port #"x86-dev-keyboard.ads" 27 0 0#"model" "model_trace:9431" "name:Command_Port" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "data_port" defined at x86-dev-keyboard.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module X86__dev__keyboard__data_port
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function data_port #"x86-dev-keyboard.ads" 28 0 0#"model" "model_trace:9441" "name:Data_Port" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "short_short_unsigned" defined at s-unstyp.ads:44, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__short_short_unsigned
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type short_short_unsigned 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 255 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  255
 
 predicate in_range 
   (x : BV8.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = short_short_unsigned, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type short_short_unsigned__ref =
  { mutable short_short_unsigned__content "model_trace:" "name:" : short_short_unsigned }
 
 function short_short_unsigned__ref___projection 
   (a : short_short_unsigned__ref) : short_short_unsigned =
  a.short_short_unsigned__content
 
 meta "model_projection" function short_short_unsigned__ref___projection
 
 meta "inline : no" function short_short_unsigned__ref___projection
 
 val short_short_unsigned__havoc 
   (x : short_short_unsigned__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_unsigned" defined at s-unstyp.ads:44, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__short_short_unsigned__rep
 use        System__unsigned_types__short_short_unsigned
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = System__unsigned_types__short_short_unsigned.short_short_unsigned, 
 predicate in_range = System__unsigned_types__short_short_unsigned.in_range, 
 predicate in_range_int = System__unsigned_types__short_short_unsigned.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_unsigned" defined at s-unstyp.ads:45, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__short_unsigned
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type short_unsigned 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV16.t
 
 function first 
   : BV16.t =
  ( 0 : BV16.t )
 
 function last 
   : BV16.t =
  ( 65535 : BV16.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  65535
 
 predicate in_range 
   (x : BV16.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = short_unsigned, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type short_unsigned__ref =
  { mutable short_unsigned__content "model_trace:" "name:" : short_unsigned }
 
 function short_unsigned__ref___projection 
   (a : short_unsigned__ref) : short_unsigned =
  a.short_unsigned__content
 
 meta "model_projection" function short_unsigned__ref___projection
 
 meta "inline : no" function short_unsigned__ref___projection
 
 val short_unsigned__havoc 
   (x : short_unsigned__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_unsigned" defined at s-unstyp.ads:45, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__short_unsigned__rep
 use        System__unsigned_types__short_unsigned
 use        "_gnatprove_standard".BV16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV16 with
 type t = System__unsigned_types__short_unsigned.short_unsigned, 
 predicate in_range = System__unsigned_types__short_unsigned.in_range, 
 predicate in_range_int = System__unsigned_types__short_unsigned.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned" defined at s-unstyp.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__unsigned
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 4294967295 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  4294967295
 
 predicate in_range 
   (x : BV32.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = unsigned, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned__ref =
  { mutable unsigned__content "model_trace:" "name:" : unsigned }
 
 function unsigned__ref___projection 
   (a : unsigned__ref) : unsigned =
  a.unsigned__content
 
 meta "model_projection" function unsigned__ref___projection
 
 meta "inline : no" function unsigned__ref___projection
 
 val unsigned__havoc 
   (x : unsigned__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned" defined at s-unstyp.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__unsigned__rep
 use        System__unsigned_types__unsigned
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV32 with
 type t = System__unsigned_types__unsigned.unsigned, 
 predicate in_range = System__unsigned_types__unsigned.in_range, 
 predicate in_range_int = System__unsigned_types__unsigned.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_unsigned" defined at s-unstyp.ads:47, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__long_unsigned
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type long_unsigned 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = long_unsigned, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type long_unsigned__ref =
  { mutable long_unsigned__content "model_trace:" "name:" : long_unsigned }
 
 function long_unsigned__ref___projection 
   (a : long_unsigned__ref) : long_unsigned =
  a.long_unsigned__content
 
 meta "model_projection" function long_unsigned__ref___projection
 
 meta "inline : no" function long_unsigned__ref___projection
 
 val long_unsigned__havoc 
   (x : long_unsigned__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_unsigned" defined at s-unstyp.ads:47, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__long_unsigned__rep
 use        System__unsigned_types__long_unsigned
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__unsigned_types__long_unsigned.long_unsigned, 
 predicate in_range = System__unsigned_types__long_unsigned.in_range, 
 predicate in_range_int = System__unsigned_types__long_unsigned.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_unsigned" defined at s-unstyp.ads:48, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__long_long_unsigned
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type long_long_unsigned 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = long_long_unsigned, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type long_long_unsigned__ref =
  { mutable long_long_unsigned__content "model_trace:" "name:" : long_long_unsigned }
 
 function long_long_unsigned__ref___projection 
   (a : long_long_unsigned__ref) : long_long_unsigned =
  a.long_long_unsigned__content
 
 meta "model_projection" function long_long_unsigned__ref___projection
 
 meta "inline : no" function long_long_unsigned__ref___projection
 
 val long_long_unsigned__havoc 
   (x : long_long_unsigned__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_unsigned" defined at s-unstyp.ads:48, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__long_long_unsigned__rep
 use        System__unsigned_types__long_long_unsigned
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__unsigned_types__long_long_unsigned.long_long_unsigned, 
 predicate in_range = System__unsigned_types__long_long_unsigned.in_range, 
 predicate in_range_int = System__unsigned_types__long_long_unsigned.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float_unsigned" defined at s-unstyp.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__float_unsigned
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type float_unsigned 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 4294967295 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  4294967295
 
 predicate in_range 
   (x : BV32.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = float_unsigned, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type float_unsigned__ref =
  { mutable float_unsigned__content "model_trace:" "name:" : float_unsigned }
 
 function float_unsigned__ref___projection 
   (a : float_unsigned__ref) : float_unsigned =
  a.float_unsigned__content
 
 meta "model_projection" function float_unsigned__ref___projection
 
 meta "inline : no" function float_unsigned__ref___projection
 
 val float_unsigned__havoc 
   (x : float_unsigned__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float_unsigned" defined at s-unstyp.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__float_unsigned__rep
 use        System__unsigned_types__float_unsigned
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV32 with
 type t = System__unsigned_types__float_unsigned.float_unsigned, 
 predicate in_range = System__unsigned_types__float_unsigned.in_range, 
 predicate in_range_int = System__unsigned_types__float_unsigned.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "packed_byte" defined at s-unstyp.ads:53, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__packed_byte
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type packed_byte 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 255 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  255
 
 predicate in_range 
   (x : BV8.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = packed_byte, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type packed_byte__ref =
  { mutable packed_byte__content "model_trace:" "name:" : packed_byte }
 
 function packed_byte__ref___projection 
   (a : packed_byte__ref) : packed_byte =
  a.packed_byte__content
 
 meta "model_projection" function packed_byte__ref___projection
 
 meta "inline : no" function packed_byte__ref___projection
 
 val packed_byte__havoc 
   (x : packed_byte__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "packed_byte" defined at s-unstyp.ads:53, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__packed_byte__rep
 use        System__unsigned_types__packed_byte
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = System__unsigned_types__packed_byte.packed_byte, 
 predicate in_range = System__unsigned_types__packed_byte.in_range, 
 predicate in_range_int = System__unsigned_types__packed_byte.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "packed_bytes1" defined at s-unstyp.ads:60, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__System__unsigned_types__packed_byte
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8
 use        System__unsigned_types__packed_byte
 use        System__unsigned_types__packed_byte__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  System__unsigned_types__packed_byte.packed_byte
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_163   : int.
   (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
    ((System__unsigned_types__packed_byte__rep.to_rep (get a temp___idx_163)) = (System__unsigned_types__packed_byte__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_163   : int.
    (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
     ((System__unsigned_types__packed_byte__rep.to_rep (get a temp___idx_163)) = (System__unsigned_types__packed_byte__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "packed_bytes1" defined at s-unstyp.ads:60, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__System__unsigned_types__packed_byte__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__System__unsigned_types__packed_byte

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__System__unsigned_types__packed_byte.component_type, 
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__unsigned_types__packed_byte.get

end

(* Module for axiomatizing comparison for the array theory associated to type "packed_bytes1" defined at s-unstyp.ads:60, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__System__unsigned_types__packed_byte_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__unsigned_types__packed_byte__rep
 use        Array__Int__System__unsigned_types__packed_byte

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_BV8_Rep_Comparison_Axiom with
 type component_type = Array__Int__System__unsigned_types__packed_byte.component_type, 
 function to_rep = System__unsigned_types__packed_byte__rep.to_rep, 
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__System__unsigned_types__packed_byte.get, 
 function bool_eq = Array__Int__System__unsigned_types__packed_byte.bool_eq

end

(* Module for axiomatizing type "packed_bytes1" defined at s-unstyp.ads:60, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__packed_bytes1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        System__unsigned_types__packed_byte
 use        Array__Int__System__unsigned_types__packed_byte

 type component_type =
  System__unsigned_types__packed_byte.packed_byte
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 function array_bool_eq = Array__Int__System__unsigned_types__packed_byte.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type packed_bytes1 =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type packed_bytes1__ref =
  { mutable packed_bytes1__content "model_trace:" "name:" : packed_bytes1 }
 
 function packed_bytes1__ref___projection 
   (a : packed_bytes1__ref) : packed_bytes1 =
  a.packed_bytes1__content
 
 meta "model_projection" function packed_bytes1__ref___projection
 
 meta "inline : no" function packed_bytes1__ref___projection
 
 val packed_bytes1__havoc 
   (x : packed_bytes1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "packed_bytes2" defined at s-unstyp.ads:70, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__packed_bytes2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        System__unsigned_types__packed_byte
 use        Array__Int__System__unsigned_types__packed_byte

 type component_type =
  System__unsigned_types__packed_byte.packed_byte
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 function array_bool_eq = Array__Int__System__unsigned_types__packed_byte.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type packed_bytes2 =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type packed_bytes2__ref =
  { mutable packed_bytes2__content "model_trace:" "name:" : packed_bytes2 }
 
 function packed_bytes2__ref___projection 
   (a : packed_bytes2__ref) : packed_bytes2 =
  a.packed_bytes2__content
 
 meta "model_projection" function packed_bytes2__ref___projection
 
 meta "inline : no" function packed_bytes2__ref___projection
 
 val packed_bytes2__havoc 
   (x : packed_bytes2__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "packed_bytes4" defined at s-unstyp.ads:81, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__packed_bytes4
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        System__unsigned_types__packed_byte
 use        Array__Int__System__unsigned_types__packed_byte

 type component_type =
  System__unsigned_types__packed_byte.packed_byte
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 function array_bool_eq = Array__Int__System__unsigned_types__packed_byte.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type packed_bytes4 =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type packed_bytes4__ref =
  { mutable packed_bytes4__content "model_trace:" "name:" : packed_bytes4 }
 
 function packed_bytes4__ref___projection 
   (a : packed_bytes4__ref) : packed_bytes4 =
  a.packed_bytes4__content
 
 meta "model_projection" function packed_bytes4__ref___projection
 
 meta "inline : no" function packed_bytes4__ref___projection
 
 val packed_bytes4__havoc 
   (x : packed_bytes4__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "bits_1" defined at s-unstyp.ads:92, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__bits_1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type bits_1 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t =
  ( 2 : BV8.t )
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 1 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  1
 
 predicate in_range 
   (x : BV8.t)  =
  ( (BV8.ule first x) /\ (BV8.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt8 with
 type t = bits_1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type bits_1__ref =
  { mutable bits_1__content "model_trace:" "name:" : bits_1 }
 
 function bits_1__ref___projection 
   (a : bits_1__ref) : bits_1 =
  a.bits_1__content
 
 meta "model_projection" function bits_1__ref___projection
 
 meta "inline : no" function bits_1__ref___projection
 
 val bits_1__havoc 
   (x : bits_1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bits_1" defined at s-unstyp.ads:92, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__bits_1__rep
 use        System__unsigned_types__bits_1
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV8 with
 type t = System__unsigned_types__bits_1.bits_1, 
 predicate in_range = System__unsigned_types__bits_1.in_range, 
 predicate in_range_int = System__unsigned_types__bits_1.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = System__unsigned_types__bits_1.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "bits_2" defined at s-unstyp.ads:93, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__bits_2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type bits_2 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t =
  ( 4 : BV8.t )
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 3 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  3
 
 predicate in_range 
   (x : BV8.t)  =
  ( (BV8.ule first x) /\ (BV8.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt8 with
 type t = bits_2, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type bits_2__ref =
  { mutable bits_2__content "model_trace:" "name:" : bits_2 }
 
 function bits_2__ref___projection 
   (a : bits_2__ref) : bits_2 =
  a.bits_2__content
 
 meta "model_projection" function bits_2__ref___projection
 
 meta "inline : no" function bits_2__ref___projection
 
 val bits_2__havoc 
   (x : bits_2__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bits_2" defined at s-unstyp.ads:93, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__bits_2__rep
 use        System__unsigned_types__bits_2
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV8 with
 type t = System__unsigned_types__bits_2.bits_2, 
 predicate in_range = System__unsigned_types__bits_2.in_range, 
 predicate in_range_int = System__unsigned_types__bits_2.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = System__unsigned_types__bits_2.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "bits_4" defined at s-unstyp.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__bits_4
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type bits_4 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t =
  ( 16 : BV8.t )
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 15 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  15
 
 predicate in_range 
   (x : BV8.t)  =
  ( (BV8.ule first x) /\ (BV8.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt8 with
 type t = bits_4, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type bits_4__ref =
  { mutable bits_4__content "model_trace:" "name:" : bits_4 }
 
 function bits_4__ref___projection 
   (a : bits_4__ref) : bits_4 =
  a.bits_4__content
 
 meta "model_projection" function bits_4__ref___projection
 
 meta "inline : no" function bits_4__ref___projection
 
 val bits_4__havoc 
   (x : bits_4__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bits_4" defined at s-unstyp.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__bits_4__rep
 use        System__unsigned_types__bits_4
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV8 with
 type t = System__unsigned_types__bits_4.bits_4, 
 predicate in_range = System__unsigned_types__bits_4.in_range, 
 predicate in_range_int = System__unsigned_types__bits_4.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = System__unsigned_types__bits_4.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tbytes_fP1" defined at s-unstyp.ads:97, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__Tbytes_fP1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tbytes_fP1 =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tbytes_fP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tbytes_fP1__ref =
  { mutable tbytes_fP1__content "model_trace:" "name:" : tbytes_fP1 }
 
 function tbytes_fP1__ref___projection 
   (a : tbytes_fP1__ref) : tbytes_fP1 =
  a.tbytes_fP1__content
 
 meta "model_projection" function tbytes_fP1__ref___projection
 
 meta "inline : no" function tbytes_fP1__ref___projection
 
 val tbytes_fP1__havoc 
   (x : tbytes_fP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tbytes_fP1" defined at s-unstyp.ads:97, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__Tbytes_fP1__rep
 use        System__unsigned_types__Tbytes_fP1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__unsigned_types__Tbytes_fP1.tbytes_fP1) : int =
  (System__unsigned_types__Tbytes_fP1.tbytes_fP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__unsigned_types__Tbytes_fP1.tbytes_fP1, 
 predicate in_range = System__unsigned_types__Tbytes_fP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "bytes_f" defined at s-unstyp.ads:97, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__bytes_f
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__unsigned_types__packed_byte
 use        Array__Int__System__unsigned_types__packed_byte

 type component_type =
  System__unsigned_types__packed_byte.packed_byte
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 function array_bool_eq = Array__Int__System__unsigned_types__packed_byte.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "value" defined at s-unstyp.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"s-unstyp.ads" 101 0 0#"model" "name:Value" "model_trace:11906" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 102 0 0#"model" "name:Amount" "model_trace:11915" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"s-unstyp.ads" 105 0 0#"model" "name:Value" "model_trace:11934" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 106 0 0#"model" "name:Amount" "model_trace:11943" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:109, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"s-unstyp.ads" 109 0 0#"model" "name:Value" "model_trace:11962" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:109, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 110 0 0#"model" "name:Amount" "model_trace:11971" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"s-unstyp.ads" 113 0 0#"model" "name:Value" "model_trace:11990" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 114 0 0#"model" "name:Amount" "model_trace:11999" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:117, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"s-unstyp.ads" 117 0 0#"model" "name:Value" "model_trace:12018" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:117, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 118 0 0#"model" "name:Amount" "model_trace:12027" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"s-unstyp.ads" 121 0 0#"model" "name:Value" "model_trace:12046" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:121, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 122 0 0#"model" "name:Amount" "model_trace:12055" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"s-unstyp.ads" 125 0 0#"model" "name:Value" "model_trace:12074" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 126 0 0#"model" "name:Amount" "model_trace:12083" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"s-unstyp.ads" 129 0 0#"model" "name:Value" "model_trace:12102" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:129, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__2__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 130 0 0#"model" "name:Amount" "model_trace:12111" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"s-unstyp.ads" 133 0 0#"model" "name:Value" "model_trace:12130" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:133, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 134 0 0#"model" "name:Amount" "model_trace:12139" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"s-unstyp.ads" 137 0 0#"model" "name:Value" "model_trace:12158" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 138 0 0#"model" "name:Amount" "model_trace:12167" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"s-unstyp.ads" 141 0 0#"model" "name:Value" "model_trace:12186" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:141, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 142 0 0#"model" "name:Amount" "model_trace:12195" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"s-unstyp.ads" 145 0 0#"model" "name:Value" "model_trace:12214" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:145, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 146 0 0#"model" "name:Amount" "model_trace:12223" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"s-unstyp.ads" 149 0 0#"model" "name:Value" "model_trace:12242" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__3__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 150 0 0#"model" "name:Amount" "model_trace:12251" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"s-unstyp.ads" 153 0 0#"model" "name:Value" "model_trace:12270" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:153, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 154 0 0#"model" "name:Amount" "model_trace:12279" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:157, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"s-unstyp.ads" 157 0 0#"model" "name:Value" "model_trace:12298" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:157, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 158 0 0#"model" "name:Amount" "model_trace:12307" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:161, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 161 0 0#"model" "name:Value" "model_trace:12326" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:161, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 162 0 0#"model" "name:Amount" "model_trace:12335" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 165 0 0#"model" "name:Value" "model_trace:12354" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:166, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 166 0 0#"model" "name:Amount" "model_trace:12363" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:166, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 169 0 0#"model" "name:Value" "model_trace:12382" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:170, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__4__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 170 0 0#"model" "name:Amount" "model_trace:12391" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:170, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:173, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 173 0 0#"model" "name:Value" "model_trace:12410" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:173, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 174 0 0#"model" "name:Amount" "model_trace:12419" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 177 0 0#"model" "name:Value" "model_trace:12438" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:178, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 178 0 0#"model" "name:Amount" "model_trace:12447" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:178, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:181, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__5__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 181 0 0#"model" "name:Value" "model_trace:12466" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:181, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__5__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:182, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_left__5__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 182 0 0#"model" "name:Amount" "model_trace:12475" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:182, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_left__5__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:185, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__5__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 185 0 0#"model" "name:Value" "model_trace:12494" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:185, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__5__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right__5__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 186 0 0#"model" "name:Amount" "model_trace:12503" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right__5__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__5__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 189 0 0#"model" "name:Value" "model_trace:12522" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__5__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__shift_right_arithmetic__5__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 190 0 0#"model" "name:Amount" "model_trace:12531" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:190, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__shift_right_arithmetic__5__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__5__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 193 0 0#"model" "name:Value" "model_trace:12550" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__5__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:194, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_left__5__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 194 0 0#"model" "name:Amount" "model_trace:12559" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:194, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_left__5__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at s-unstyp.ads:197, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__5__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"s-unstyp.ads" 197 0 0#"model" "name:Value" "model_trace:12578" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at s-unstyp.ads:197, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__5__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at s-unstyp.ads:198, created in Gnat2Why.Decls.Translate_Constant *)
module System__unsigned_types__rotate_right__5__amount
 use import "_gnatprove_standard".Main

 function amount #"s-unstyp.ads" 198 0 0#"model" "name:Amount" "model_trace:12587" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at s-unstyp.ads:198, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__unsigned_types__rotate_right__5__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "packed_bytes" defined at s-unstyp.ads:212, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__packed_bytes
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        System__unsigned_types__packed_byte
 use        Array__Int__System__unsigned_types__packed_byte

 type component_type =
  System__unsigned_types__packed_byte.packed_byte
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 function array_bool_eq = Array__Int__System__unsigned_types__packed_byte.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type packed_bytes =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type packed_bytes__ref =
  { mutable packed_bytes__content "model_trace:" "name:" : packed_bytes }
 
 function packed_bytes__ref___projection 
   (a : packed_bytes__ref) : packed_bytes =
  a.packed_bytes__content
 
 meta "model_projection" function packed_bytes__ref___projection
 
 meta "inline : no" function packed_bytes__ref___projection
 
 val packed_bytes__havoc 
   (x : packed_bytes__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "packed_bytes_unaligned" defined at s-unstyp.ads:213, created in Gnat2Why.Types.Translate_Type *)
module System__unsigned_types__packed_bytes_unaligned
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        System__unsigned_types__packed_byte
 use        Array__Int__System__unsigned_types__packed_byte

 type component_type =
  System__unsigned_types__packed_byte.packed_byte
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__unsigned_types__packed_byte.map, 
 function array_bool_eq = Array__Int__System__unsigned_types__packed_byte.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type packed_bytes_unaligned =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type packed_bytes_unaligned__ref =
  { mutable packed_bytes_unaligned__content "model_trace:" "name:" : packed_bytes_unaligned }
 
 function packed_bytes_unaligned__ref___projection 
   (a : packed_bytes_unaligned__ref) : packed_bytes_unaligned =
  a.packed_bytes_unaligned__content
 
 meta "model_projection" function packed_bytes_unaligned__ref___projection
 
 meta "inline : no" function packed_bytes_unaligned__ref___projection
 
 val packed_bytes_unaligned__havoc 
   (x : packed_bytes_unaligned__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "page_size" defined at x86-vm2.ads:25, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__page_size
 use import "_gnatprove_standard".Main
 use import "int".Int

 type page_size 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = page_size, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type page_size__ref =
  { mutable page_size__content "model_trace:" "name:" : page_size }
 
 function page_size__ref___projection 
   (a : page_size__ref) : page_size =
  a.page_size__content
 
 meta "model_projection" function page_size__ref___projection
 
 meta "inline : no" function page_size__ref___projection
 
 val page_size__havoc 
   (x : page_size__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "page_size" defined at x86-vm2.ads:25, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__page_size__rep
 use        X86__vm2__page_size
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__page_size.page_size, 
 predicate in_range = X86__vm2__page_size.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Ttable_levelB" defined at x86-vm2.ads:26, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_levelB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttable_levelB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttable_levelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttable_levelB__ref =
  { mutable ttable_levelB__content "model_trace:" "name:" : ttable_levelB }
 
 function ttable_levelB__ref___projection 
   (a : ttable_levelB__ref) : ttable_levelB =
  a.ttable_levelB__content
 
 meta "model_projection" function ttable_levelB__ref___projection
 
 meta "inline : no" function ttable_levelB__ref___projection
 
 val ttable_levelB__havoc 
   (x : ttable_levelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Ttable_levelB" defined at x86-vm2.ads:26, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_levelB__rep
 use        X86__vm2__Ttable_levelB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__Ttable_levelB.ttable_levelB) : int =
  (X86__vm2__Ttable_levelB.ttable_levelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__Ttable_levelB.ttable_levelB, 
 predicate in_range = X86__vm2__Ttable_levelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "table_level" defined at x86-vm2.ads:26, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_level
 use import "_gnatprove_standard".Main
 use import "int".Int

 type table_level =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = table_level, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type table_level__ref =
  { mutable table_level__content "model_trace:" "name:" : table_level }
 
 function table_level__ref___projection 
   (a : table_level__ref) : table_level =
  a.table_level__content
 
 meta "model_projection" function table_level__ref___projection
 
 meta "inline : no" function table_level__ref___projection
 
 val table_level__havoc 
   (x : table_level__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "table_level" defined at x86-vm2.ads:26, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_level__rep
 use        X86__vm2__table_level
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__table_level.table_level) : int =
  (X86__vm2__table_level.table_level'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__table_level.table_level, 
 predicate in_range = X86__vm2__table_level.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tflags_typeB" defined at x86-vm2.ads:27, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Tflags_typeB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type tflags_typeB 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = tflags_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type tflags_typeB__ref =
  { mutable tflags_typeB__content "model_trace:" "name:" : tflags_typeB }
 
 function tflags_typeB__ref___projection 
   (a : tflags_typeB__ref) : tflags_typeB =
  a.tflags_typeB__content
 
 meta "model_projection" function tflags_typeB__ref___projection
 
 meta "inline : no" function tflags_typeB__ref___projection
 
 val tflags_typeB__havoc 
   (x : tflags_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tflags_typeB" defined at x86-vm2.ads:27, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Tflags_typeB__rep
 use        X86__vm2__Tflags_typeB
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = X86__vm2__Tflags_typeB.tflags_typeB, 
 predicate in_range = X86__vm2__Tflags_typeB.in_range, 
 predicate in_range_int = X86__vm2__Tflags_typeB.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "flags_type" defined at x86-vm2.ads:27, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__flags_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type flags_type 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = flags_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type flags_type__ref =
  { mutable flags_type__content "model_trace:" "name:" : flags_type }
 
 function flags_type__ref___projection 
   (a : flags_type__ref) : flags_type =
  a.flags_type__content
 
 meta "model_projection" function flags_type__ref___projection
 
 meta "inline : no" function flags_type__ref___projection
 
 val flags_type__havoc 
   (x : flags_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "flags_type" defined at x86-vm2.ads:27, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__flags_type__rep
 use        X86__vm2__flags_type
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = X86__vm2__flags_type.flags_type, 
 predicate in_range = X86__vm2__flags_type.in_range, 
 predicate in_range_int = X86__vm2__flags_type.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "I3s" defined at x86-vm2.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__flags_typePredicate__I3s
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function i3s #"x86-vm2.ads" 27 0 0#
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "I3s" defined at x86-vm2.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__flags_typePredicate__I3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flags_typePredicate" defined at x86-vm2.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__flags_typePredicate
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function flags_typePredicate 
   (i3s : BV64.t) : bool
 
 predicate flags_typePredicate__function_guard 
   (result : bool) (i3s : BV64.t) 

end

(* Module for axiomatizing type "Tdirectory_refB" defined at x86-vm2.ads:29, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Tdirectory_refB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tdirectory_refB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tdirectory_refB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tdirectory_refB__ref =
  { mutable tdirectory_refB__content "model_trace:" "name:" : tdirectory_refB }
 
 function tdirectory_refB__ref___projection 
   (a : tdirectory_refB__ref) : tdirectory_refB =
  a.tdirectory_refB__content
 
 meta "model_projection" function tdirectory_refB__ref___projection
 
 meta "inline : no" function tdirectory_refB__ref___projection
 
 val tdirectory_refB__havoc 
   (x : tdirectory_refB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tdirectory_refB" defined at x86-vm2.ads:29, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Tdirectory_refB__rep
 use        X86__vm2__Tdirectory_refB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__Tdirectory_refB.tdirectory_refB) : int =
  (X86__vm2__Tdirectory_refB.tdirectory_refB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__Tdirectory_refB.tdirectory_refB, 
 predicate in_range = X86__vm2__Tdirectory_refB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "directory_ref" defined at x86-vm2.ads:29, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__directory_ref
 use import "_gnatprove_standard".Main
 use import "int".Int

 type directory_ref =
  < range 0 511 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  511
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = directory_ref, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type directory_ref__ref =
  { mutable directory_ref__content "model_trace:" "name:" : directory_ref }
 
 function directory_ref__ref___projection 
   (a : directory_ref__ref) : directory_ref =
  a.directory_ref__content
 
 meta "model_projection" function directory_ref__ref___projection
 
 meta "inline : no" function directory_ref__ref___projection
 
 val directory_ref__havoc 
   (x : directory_ref__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "directory_ref" defined at x86-vm2.ads:29, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__directory_ref__rep
 use        X86__vm2__directory_ref
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__directory_ref.directory_ref) : int =
  (X86__vm2__directory_ref.directory_ref'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__directory_ref.directory_ref, 
 predicate in_range = X86__vm2__directory_ref.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "pml4" defined at x86-vm2.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__dump_pages__pml4
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function pml4 #"x86-vm2.ads" 32 0 0#"model" "model_trace:4034" "name:PML4" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pml4" defined at x86-vm2.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__dump_pages__pml4___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pml4" defined at x86-vm2.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__create_mapping__pml4
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function pml4 #"x86-vm2.ads" 39 0 0#"model" "name:PML4" "model_trace:4061" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pml4" defined at x86-vm2.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__pml4___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "vma" defined at x86-vm2.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__create_mapping__vma
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function vma #"x86-vm2.ads" 40 0 0#"model" "model_trace:4070" "name:VMA" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vma" defined at x86-vm2.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__vma___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pa" defined at x86-vm2.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__create_mapping__pa
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function pa #"x86-vm2.ads" 41 0 0#"model" "model_trace:4079" "name:PA" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pa" defined at x86-vm2.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__pa___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "flags" defined at x86-vm2.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__create_mapping__flags
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function flags #"x86-vm2.ads" 42 0 0#"model" "model_trace:4088" "name:Flags" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "flags" defined at x86-vm2.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__flags___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at x86-vm2.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__create_mapping__size
 use import "_gnatprove_standard".Main

 function size #"x86-vm2.ads" 43 0 0#"model" "name:Size" "model_trace:4097" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at x86-vm2.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Ttable_entryB" defined at x86-vm2.ads:56, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_entryB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type ttable_entryB 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = ttable_entryB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type ttable_entryB__ref =
  { mutable ttable_entryB__content "model_trace:" "name:" : ttable_entryB }
 
 function ttable_entryB__ref___projection 
   (a : ttable_entryB__ref) : ttable_entryB =
  a.ttable_entryB__content
 
 meta "model_projection" function ttable_entryB__ref___projection
 
 meta "inline : no" function ttable_entryB__ref___projection
 
 val ttable_entryB__havoc 
   (x : ttable_entryB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Ttable_entryB" defined at x86-vm2.ads:56, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_entryB__rep
 use        X86__vm2__Ttable_entryB
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = X86__vm2__Ttable_entryB.ttable_entryB, 
 predicate in_range = X86__vm2__Ttable_entryB.in_range, 
 predicate in_range_int = X86__vm2__Ttable_entryB.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "table_entry" defined at x86-vm2.ads:56, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_entry
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type table_entry 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = table_entry, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type table_entry__ref =
  { mutable table_entry__content "model_trace:" "name:" : table_entry }
 
 function table_entry__ref___projection 
   (a : table_entry__ref) : table_entry =
  a.table_entry__content
 
 meta "model_projection" function table_entry__ref___projection
 
 meta "inline : no" function table_entry__ref___projection
 
 val table_entry__havoc 
   (x : table_entry__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "table_entry" defined at x86-vm2.ads:56, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_entry__rep
 use        X86__vm2__table_entry
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = X86__vm2__table_entry.table_entry, 
 predicate in_range = X86__vm2__table_entry.in_range, 
 predicate in_range_int = X86__vm2__table_entry.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Ttable_indexB" defined at x86-vm2.ads:57, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_indexB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttable_indexB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttable_indexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttable_indexB__ref =
  { mutable ttable_indexB__content "model_trace:" "name:" : ttable_indexB }
 
 function ttable_indexB__ref___projection 
   (a : ttable_indexB__ref) : ttable_indexB =
  a.ttable_indexB__content
 
 meta "model_projection" function ttable_indexB__ref___projection
 
 meta "inline : no" function ttable_indexB__ref___projection
 
 val ttable_indexB__havoc 
   (x : ttable_indexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Ttable_indexB" defined at x86-vm2.ads:57, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_indexB__rep
 use        X86__vm2__Ttable_indexB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__Ttable_indexB.ttable_indexB) : int =
  (X86__vm2__Ttable_indexB.ttable_indexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__Ttable_indexB.ttable_indexB, 
 predicate in_range = X86__vm2__Ttable_indexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "table_index" defined at x86-vm2.ads:57, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type table_index =
  < range 0 511 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  511
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = table_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type table_index__ref =
  { mutable table_index__content "model_trace:" "name:" : table_index }
 
 function table_index__ref___projection 
   (a : table_index__ref) : table_index =
  a.table_index__content
 
 meta "model_projection" function table_index__ref___projection
 
 meta "inline : no" function table_index__ref___projection
 
 val table_index__havoc 
   (x : table_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "table_index" defined at x86-vm2.ads:57, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_index__rep
 use        X86__vm2__table_index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__table_index.table_index) : int =
  (X86__vm2__table_index.table_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__table_index.table_index, 
 predicate in_range = X86__vm2__table_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TtableB" defined at x86-vm2.ads:58, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__X86__vm2__table_entry
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        X86__vm2__table_entry
 use        X86__vm2__table_entry__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  X86__vm2__table_entry.table_entry
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_164   : int.
   (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
    ((X86__vm2__table_entry__rep.to_rep (get a temp___idx_164)) = (X86__vm2__table_entry__rep.to_rep (get b ((b__first - a__first) + temp___idx_164))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_164   : int.
    (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
     ((X86__vm2__table_entry__rep.to_rep (get a temp___idx_164)) = (X86__vm2__table_entry__rep.to_rep (get b ((b__first - a__first) + temp___idx_164))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TtableB" defined at x86-vm2.ads:58, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__X86__vm2__table_entry__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__X86__vm2__table_entry

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__X86__vm2__table_entry.component_type, 
 type map = Array__Int__X86__vm2__table_entry.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__X86__vm2__table_entry.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TtableB" defined at x86-vm2.ads:58, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__X86__vm2__table_entry_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_entry__rep
 use        Array__Int__X86__vm2__table_entry

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_BV64_Rep_Comparison_Axiom with
 type component_type = Array__Int__X86__vm2__table_entry.component_type, 
 function to_rep = X86__vm2__table_entry__rep.to_rep, 
 type map = Array__Int__X86__vm2__table_entry.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__X86__vm2__table_entry.get, 
 function bool_eq = Array__Int__X86__vm2__table_entry.bool_eq

end

(* Module for axiomatizing type "TtableB" defined at x86-vm2.ads:58, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__TtableB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_entry
 use        X86__vm2__Ttable_indexB
 use        X86__vm2__Ttable_indexB__rep
 use        X86__vm2__table_index
 use        Array__Int__X86__vm2__table_entry

 type component_type =
  X86__vm2__table_entry.table_entry
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__X86__vm2__table_entry.map, 
 function array_bool_eq = Array__Int__X86__vm2__table_entry.bool_eq, 
 type index_base_type = X86__vm2__Ttable_indexB.ttable_indexB, 
 type index_rep_type = int, 
 function to_rep = X86__vm2__Ttable_indexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = X86__vm2__Ttable_indexB.in_range, 
 predicate index_dynamic_property = X86__vm2__table_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ttableB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type ttableB__ref =
  { mutable ttableB__content "model_trace:" "name:" : ttableB }
 
 function ttableB__ref___2__projection 
   (a : ttableB__ref) : ttableB =
  a.ttableB__content
 
 meta "model_projection" function ttableB__ref___2__projection
 
 meta "inline : no" function ttableB__ref___2__projection
 
 val ttableB__havoc 
   (x : ttableB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "table" defined at x86-vm2.ads:58, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_entry
 use        Array__Int__X86__vm2__table_entry

 type component_type =
  X86__vm2__table_entry.table_entry
 
 function first 
   : int =
  0
 
 function last 
   : int =
  511
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__X86__vm2__table_entry.map, 
 function array_bool_eq = Array__Int__X86__vm2__table_entry.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Ttable_addressB" defined at x86-vm2.ads:60, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_addressB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type ttable_addressB 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = ttable_addressB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type ttable_addressB__ref =
  { mutable ttable_addressB__content "model_trace:" "name:" : ttable_addressB }
 
 function ttable_addressB__ref___projection 
   (a : ttable_addressB__ref) : ttable_addressB =
  a.ttable_addressB__content
 
 meta "model_projection" function ttable_addressB__ref___projection
 
 meta "inline : no" function ttable_addressB__ref___projection
 
 val ttable_addressB__havoc 
   (x : ttable_addressB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Ttable_addressB" defined at x86-vm2.ads:60, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_addressB__rep
 use        X86__vm2__Ttable_addressB
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = X86__vm2__Ttable_addressB.ttable_addressB, 
 predicate in_range = X86__vm2__Ttable_addressB.in_range, 
 predicate in_range_int = X86__vm2__Ttable_addressB.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "table_address" defined at x86-vm2.ads:60, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        X86__vm2__Ttable_addressB
 use        X86__vm2__Ttable_addressB__rep

 type table_address =
  X86__vm2__Ttable_addressB.ttable_addressB
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 2097152 : BV64.t )
 
 function last 
   : BV64.t
 
 predicate dynamic_property 
   (first_int : BV64.t) (last_int : BV64.t) (x : BV64.t)  =
  ( (BV64.ule first_int x) /\ (BV64.ule x last_int) )
 
 predicate dynamic_property_int 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Modular with
 type t = table_address, 
 type rep_type = BV64.t, 
 function base_to_rep = X86__vm2__Ttable_addressB__rep.to_rep, 
 function base_of_rep = X86__vm2__Ttable_addressB__rep.of_rep, 
 predicate dynamic_property = dynamic_property, 
 predicate dynamic_property_int = dynamic_property_int
 
 type table_address__ref =
  { mutable table_address__content "model_trace:" "name:" : table_address }
 
 function table_address__ref___projection 
   (a : table_address__ref) : table_address =
  a.table_address__content
 
 meta "model_projection" function table_address__ref___projection
 
 meta "inline : no" function table_address__ref___projection
 
 val table_address__havoc 
   (x : table_address__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "Ttable_offsetsB" defined at x86-vm2.ads:63, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__X86__vm2__table_index
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_index
 use        X86__vm2__table_index__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  X86__vm2__table_index.table_index
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_165   : int.
   (if (( (a__first <= temp___idx_165) /\ (temp___idx_165 <= a__last) )) then (
    ((X86__vm2__table_index__rep.to_rep (get a temp___idx_165)) = (X86__vm2__table_index__rep.to_rep (get b ((b__first - a__first) + temp___idx_165))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_165   : int.
    (if (( (a__first <= temp___idx_165) /\ (temp___idx_165 <= a__last) )) then (
     ((X86__vm2__table_index__rep.to_rep (get a temp___idx_165)) = (X86__vm2__table_index__rep.to_rep (get b ((b__first - a__first) + temp___idx_165))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Ttable_offsetsB" defined at x86-vm2.ads:63, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__X86__vm2__table_index__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__X86__vm2__table_index

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__X86__vm2__table_index.component_type, 
 type map = Array__Int__X86__vm2__table_index.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__X86__vm2__table_index.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Ttable_offsetsB" defined at x86-vm2.ads:63, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__X86__vm2__table_index_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_index__rep
 use        Array__Int__X86__vm2__table_index

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__X86__vm2__table_index.component_type, 
 function to_rep = X86__vm2__table_index__rep.to_rep, 
 type map = Array__Int__X86__vm2__table_index.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__X86__vm2__table_index.get, 
 function bool_eq = Array__Int__X86__vm2__table_index.bool_eq

end

(* Module for axiomatizing type "Ttable_offsetsB" defined at x86-vm2.ads:63, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Ttable_offsetsB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__Ttable_levelB
 use        X86__vm2__Ttable_levelB__rep
 use        X86__vm2__table_level
 use        X86__vm2__table_index
 use        Array__Int__X86__vm2__table_index

 type component_type =
  X86__vm2__table_index.table_index
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__X86__vm2__table_index.map, 
 function array_bool_eq = Array__Int__X86__vm2__table_index.bool_eq, 
 type index_base_type = X86__vm2__Ttable_levelB.ttable_levelB, 
 type index_rep_type = int, 
 function to_rep = X86__vm2__Ttable_levelB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = X86__vm2__Ttable_levelB.in_range, 
 predicate index_dynamic_property = X86__vm2__table_level.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ttable_offsetsB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type ttable_offsetsB__ref =
  { mutable ttable_offsetsB__content "model_trace:" "name:" : ttable_offsetsB }
 
 function ttable_offsetsB__ref___projection 
   (a : ttable_offsetsB__ref) : ttable_offsetsB =
  a.ttable_offsetsB__content
 
 meta "model_projection" function ttable_offsetsB__ref___projection
 
 meta "inline : no" function ttable_offsetsB__ref___projection
 
 val ttable_offsetsB__havoc 
   (x : ttable_offsetsB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "table_offsets" defined at x86-vm2.ads:63, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__table_offsets
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_index
 use        Array__Int__X86__vm2__table_index

 type component_type =
  X86__vm2__table_index.table_index
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__X86__vm2__table_index.map, 
 function array_bool_eq = Array__Int__X86__vm2__table_index.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the array theory associated to type "TtablesB" defined at x86-vm2.ads:64, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Common__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        Common__address
 use        Common__address__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Common__address.address
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_166   : int.
   (if (( (a__first <= temp___idx_166) /\ (temp___idx_166 <= a__last) )) then (
    ((Common__address__rep.to_rep (get a temp___idx_166)) = (Common__address__rep.to_rep (get b ((b__first - a__first) + temp___idx_166))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_166   : int.
    (if (( (a__first <= temp___idx_166) /\ (temp___idx_166 <= a__last) )) then (
     ((Common__address__rep.to_rep (get a temp___idx_166)) = (Common__address__rep.to_rep (get b ((b__first - a__first) + temp___idx_166))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TtablesB" defined at x86-vm2.ads:64, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Common__address__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Common__address

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Common__address.component_type, 
 type map = Array__Int__Common__address.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Common__address.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TtablesB" defined at x86-vm2.ads:64, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Common__address_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Common__address__rep
 use        Array__Int__Common__address

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_BV64_Rep_Comparison_Axiom with
 type component_type = Array__Int__Common__address.component_type, 
 function to_rep = Common__address__rep.to_rep, 
 type map = Array__Int__Common__address.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Common__address.get, 
 function bool_eq = Array__Int__Common__address.bool_eq

end

(* Module for axiomatizing type "TtablesB" defined at x86-vm2.ads:64, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__TtablesB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Common__address
 use        X86__vm2__Ttable_levelB
 use        X86__vm2__Ttable_levelB__rep
 use        X86__vm2__table_level
 use        Array__Int__Common__address

 type component_type =
  Common__address.address
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Common__address.map, 
 function array_bool_eq = Array__Int__Common__address.bool_eq, 
 type index_base_type = X86__vm2__Ttable_levelB.ttable_levelB, 
 type index_rep_type = int, 
 function to_rep = X86__vm2__Ttable_levelB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = X86__vm2__Ttable_levelB.in_range, 
 predicate index_dynamic_property = X86__vm2__table_level.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ttablesB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type ttablesB__ref =
  { mutable ttablesB__content "model_trace:" "name:" : ttablesB }
 
 function ttablesB__ref___projection 
   (a : ttablesB__ref) : ttablesB =
  a.ttablesB__content
 
 meta "model_projection" function ttablesB__ref___projection
 
 meta "inline : no" function ttablesB__ref___projection
 
 val ttablesB__havoc 
   (x : ttablesB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "tables" defined at x86-vm2.ads:64, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__tables
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Common__address
 use        Array__Int__Common__address

 type component_type =
  Common__address.address
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Common__address.map, 
 function array_bool_eq = Array__Int__Common__address.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tpage_bit_arrayD1" defined at x86-vm2.ads:68, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Tpage_bit_arrayD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tpage_bit_arrayD1 =
  < range 0 511 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  511
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tpage_bit_arrayD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpage_bit_arrayD1__ref =
  { mutable tpage_bit_arrayD1__content "model_trace:" "name:" : tpage_bit_arrayD1 }
 
 function tpage_bit_arrayD1__ref___projection 
   (a : tpage_bit_arrayD1__ref) : tpage_bit_arrayD1 =
  a.tpage_bit_arrayD1__content
 
 meta "model_projection" function tpage_bit_arrayD1__ref___projection
 
 meta "inline : no" function tpage_bit_arrayD1__ref___projection
 
 val tpage_bit_arrayD1__havoc 
   (x : tpage_bit_arrayD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tpage_bit_arrayD1" defined at x86-vm2.ads:68, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Tpage_bit_arrayD1__rep
 use        X86__vm2__Tpage_bit_arrayD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__Tpage_bit_arrayD1.tpage_bit_arrayD1) : int =
  (X86__vm2__Tpage_bit_arrayD1.tpage_bit_arrayD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__Tpage_bit_arrayD1.tpage_bit_arrayD1, 
 predicate in_range = X86__vm2__Tpage_bit_arrayD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tpage_bit_arrayB" defined at x86-vm2.ads:68, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Bool
 use import "_gnatprove_standard".Main
 use import "int".Int

 function index_I1_one 
   : int =
  1
 
 type component_type =
  bool
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_167   : int.
   (if (( (a__first <= temp___idx_167) /\ (temp___idx_167 <= a__last) )) then (
    ((get a temp___idx_167) = (get b ((b__first - a__first) + temp___idx_167)))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_167   : int.
    (if (( (a__first <= temp___idx_167) /\ (temp___idx_167 <= a__last) )) then (
     ((get a temp___idx_167) = (get b ((b__first - a__first) + temp___idx_167)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tpage_bit_arrayB" defined at x86-vm2.ads:68, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Bool__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Bool.component_type, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get

end

(* Module for axiomatizing logical operations for the array theory associated to type "Tpage_bit_arrayB" defined at x86-vm2.ads:68, created in Why.Gen.Arrays.Declare_Logical_Operation_Symbols *)
module Array__Int__Bool__Bool_Op
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Standard_Array_Logical_Op_Axioms with
 type map = Array__Int__Bool.map, 
 function get = Array__Int__Bool.get, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one

end

(* Module for axiomatizing comparison for the array theory associated to type "Tpage_bit_arrayB" defined at x86-vm2.ads:68, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Bool_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Bool.component_type, 
 function to_rep = Boolean.to_int, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get, 
 function bool_eq = Array__Int__Bool.bool_eq

end

(* Module for axiomatizing type "Tpage_bit_arrayB" defined at x86-vm2.ads:68, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__Tpage_bit_arrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        X86__vm2__Tpage_bit_arrayD1
 use        Array__Int__Bool

 type component_type =
  bool
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = X86__vm2__Tpage_bit_arrayD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpage_bit_arrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpage_bit_arrayB__ref =
  { mutable tpage_bit_arrayB__content "model_trace:" "name:" : tpage_bit_arrayB }
 
 function tpage_bit_arrayB__ref___projection 
   (a : tpage_bit_arrayB__ref) : tpage_bit_arrayB =
  a.tpage_bit_arrayB__content
 
 meta "model_projection" function tpage_bit_arrayB__ref___projection
 
 meta "inline : no" function tpage_bit_arrayB__ref___projection
 
 val tpage_bit_arrayB__havoc 
   (x : tpage_bit_arrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "page_bit_array" defined at x86-vm2.ads:68, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__page_bit_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 type component_type =
  bool
 
 function first 
   : int =
  0
 
 function last 
   : int =
  511
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "i" defined at x86-vm2.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__has_free_dir_page__L23s__i
 use import "_gnatprove_standard".Main

 function i #"x86-vm2.ads" 78 0 0#"model" "model_trace:4279" "name:I" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at x86-vm2.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__has_free_dir_page__L23s__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "a" defined at x86-vm2.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__make_directory_entry__a
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function a #"x86-vm2.ads" 91 0 0#"model" "model_trace:4345" "name:A" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at x86-vm2.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__make_directory_entry__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "f" defined at x86-vm2.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__make_directory_entry__f
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function f #"x86-vm2.ads" 91 0 0#"model" "model_trace:4354" "name:F" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "f" defined at x86-vm2.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__make_directory_entry__f___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "make_directory_entry" defined at x86-vm2.ads:91, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__make_directory_entry
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function make_directory_entry 
   (a : BV64.t) (f : BV64.t) : BV64.t
 
 predicate make_directory_entry__function_guard 
   (result : BV64.t) (a : BV64.t) (f : BV64.t) 

end

(* Module for defining the constant "pa" defined at x86-vm2.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__make_frame_entry__pa
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function pa #"x86-vm2.ads" 100 0 0#"model" "name:PA" "model_trace:4401" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pa" defined at x86-vm2.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__make_frame_entry__pa___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "f" defined at x86-vm2.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__make_frame_entry__f
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function f #"x86-vm2.ads" 100 0 0#"model" "name:F" "model_trace:4410" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "f" defined at x86-vm2.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__make_frame_entry__f___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "make_frame_entry" defined at x86-vm2.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__make_frame_entry
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function make_frame_entry 
   (pa : BV64.t) (f : BV64.t) : BV64.t
 
 predicate make_frame_entry__function_guard 
   (result : BV64.t) (pa : BV64.t) (f : BV64.t) 

end

(* Module for defining the constant "t" defined at x86-vm2.ads:108, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__get_directory_address__t
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function t #"x86-vm2.ads" 108 0 0#"model" "model_trace:4447" "name:T" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "t" defined at x86-vm2.ads:108, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__get_directory_address__t___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_directory_address" defined at x86-vm2.ads:108, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__get_directory_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function get_directory_address 
   (t : BV64.t) : BV64.t
 
 predicate get_directory_address__function_guard 
   (result : BV64.t) (t : BV64.t) 

end

(* Module for defining the constant "t" defined at x86-vm2.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__get_directory_ref__t
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function t #"x86-vm2.ads" 113 0 0#"model" "name:T" "model_trace:4477" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "t" defined at x86-vm2.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__get_directory_ref__t___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_directory_ref" defined at x86-vm2.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__get_directory_ref
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function get_directory_ref 
   (t : BV64.t) : int
 
 predicate get_directory_ref__function_guard 
   (result : int) (t : BV64.t) 

end

(* Module for defining the constant "t" defined at x86-vm2.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__get_frame_address__t
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function t #"x86-vm2.ads" 118 0 0#"model" "name:T" "model_trace:4507" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "t" defined at x86-vm2.ads:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__get_frame_address__t___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_frame_address" defined at x86-vm2.ads:118, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__get_frame_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function get_frame_address 
   (t : BV64.t) : BV64.t
 
 predicate get_frame_address__function_guard 
   (result : BV64.t) (t : BV64.t) 

end

(* Module for axiomatizing the array theory associated to type "TdirectoriesB" defined at x86-vm2.adb:12, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__X86__vm2__table
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table
 use        Array__Int__X86__vm2__table_entry
 use        Array__Int__X86__vm2__table_entry

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Array__Int__X86__vm2__table_entry.map
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_168   : int.
   (if (( (a__first <= temp___idx_168) /\ (temp___idx_168 <= a__last) )) then (
    ((X86__vm2__table.bool_eq (get a temp___idx_168) (get b ((b__first - a__first) + temp___idx_168))) = True)) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_168   : int.
    (if (( (a__first <= temp___idx_168) /\ (temp___idx_168 <= a__last) )) then (
     ((X86__vm2__table.bool_eq (get a temp___idx_168) (get b ((b__first - a__first) + temp___idx_168))) = True)) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TdirectoriesB" defined at x86-vm2.adb:12, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__X86__vm2__table__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__X86__vm2__table

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__X86__vm2__table.component_type, 
 type map = Array__Int__X86__vm2__table.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__X86__vm2__table.get

end

(* Module for axiomatizing type "TdirectoriesB" defined at x86-vm2.adb:12, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__TdirectoriesB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__Tdirectory_refB
 use        X86__vm2__Tdirectory_refB__rep
 use        X86__vm2__directory_ref
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table_entry

 type component_type =
  Array__Int__X86__vm2__table_entry.map
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__X86__vm2__table.map, 
 function array_bool_eq = Array__Int__X86__vm2__table.bool_eq, 
 type index_base_type = X86__vm2__Tdirectory_refB.tdirectory_refB, 
 type index_rep_type = int, 
 function to_rep = X86__vm2__Tdirectory_refB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = X86__vm2__Tdirectory_refB.in_range, 
 predicate index_dynamic_property = X86__vm2__directory_ref.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tdirectoriesB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tdirectoriesB__ref =
  { mutable tdirectoriesB__content "model_trace:" "name:" : tdirectoriesB }
 
 function tdirectoriesB__ref___projection 
   (a : tdirectoriesB__ref) : tdirectoriesB =
  a.tdirectoriesB__content
 
 meta "model_projection" function tdirectoriesB__ref___projection
 
 meta "inline : no" function tdirectoriesB__ref___projection
 
 val tdirectoriesB__havoc 
   (x : tdirectoriesB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TdirectoriesT" defined at x86-vm2.adb:12, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__TdirectoriesT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table_entry

 type component_type =
  Array__Int__X86__vm2__table_entry.map
 
 function first 
   : int =
  0
 
 function last 
   : int =
  511
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__X86__vm2__table.map, 
 function array_bool_eq = Array__Int__X86__vm2__table.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the array theory associated to type "TshiftsB" defined at x86-vm2.adb:16, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__natural.natural
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_169   : int.
   (if (( (a__first <= temp___idx_169) /\ (temp___idx_169 <= a__last) )) then (
    ((Standard__natural__rep.to_rep (get a temp___idx_169)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_169))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_169   : int.
    (if (( (a__first <= temp___idx_169) /\ (temp___idx_169 <= a__last) )) then (
     ((Standard__natural__rep.to_rep (get a temp___idx_169)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_169))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TshiftsB" defined at x86-vm2.adb:16, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__natural__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__natural.component_type, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TshiftsB" defined at x86-vm2.adb:16, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__natural_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural__rep
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__natural.component_type, 
 function to_rep = Standard__natural__rep.to_rep, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get, 
 function bool_eq = Array__Int__Standard__natural.bool_eq

end

(* Module for axiomatizing type "TshiftsB" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__TshiftsB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        X86__vm2__Ttable_levelB
 use        X86__vm2__Ttable_levelB__rep
 use        X86__vm2__table_level
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = X86__vm2__Ttable_levelB.ttable_levelB, 
 type index_rep_type = int, 
 function to_rep = X86__vm2__Ttable_levelB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = X86__vm2__Ttable_levelB.in_range, 
 predicate index_dynamic_property = X86__vm2__table_level.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tshiftsB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tshiftsB__ref =
  { mutable tshiftsB__content "model_trace:" "name:" : tshiftsB }
 
 function tshiftsB__ref___projection 
   (a : tshiftsB__ref) : tshiftsB =
  a.tshiftsB__content
 
 meta "model_projection" function tshiftsB__ref___projection
 
 meta "inline : no" function tshiftsB__ref___projection
 
 val tshiftsB__havoc 
   (x : tshiftsB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TshiftsT" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__TshiftsT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5b" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t5b =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t5b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t5b__ref =
  { mutable t5b__content "model_trace:" "name:" : t5b }
 
 function t5b__ref___projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T5b" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__T5b__rep
 use        X86__vm2__T5b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__T5b.t5b) : int =
  (X86__vm2__T5b.t5b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__T5b.t5b, 
 predicate in_range = X86__vm2__T5b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T6b" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "shifts" defined at x86-vm2.adb:16, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__shifts
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function shifts #"x86-vm2.adb" 16 0 0#"model_projected" "model_trace:2417" "name:Shifts" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T11b" defined at x86-vm2.adb:45, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__get_free_dir_page__L_1__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t11b =
  < range 0 511 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  511
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t11b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T11b" defined at x86-vm2.adb:45, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__get_free_dir_page__L_1__T11b__rep
 use        X86__vm2__get_free_dir_page__L_1__T11b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : X86__vm2__get_free_dir_page__L_1__T11b.t11b) : int =
  (X86__vm2__get_free_dir_page__L_1__T11b.t11b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = X86__vm2__get_free_dir_page__L_1__T11b.t11b, 
 predicate in_range = X86__vm2__get_free_dir_page__L_1__T11b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T16b" defined at x86-vm2.adb:51, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__get_free_dir_page__L_1__L15b__T16b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16b__ref =
  { mutable t16b__content "model_trace:" "name:" : t16b }
 
 function t16b__ref___projection 
   (a : t16b__ref) : t16b =
  a.t16b__content
 
 meta "model_projection" function t16b__ref___projection
 
 meta "inline : no" function t16b__ref___projection
 
 val t16b__havoc 
   (x : t16b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at x86-vm2.adb:51, created in Gnat2Why.Types.Translate_Type *)
module X86__vm2__get_free_dir_page__L_1__L13b__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content "model_trace:" "name:" : t14b }
 
 function t14b__ref___projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for defining the constant "page" defined at x86-vm2.adb:63, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__has_free_dir_page__L20b__page
 use import "_gnatprove_standard".Main

 function page #"x86-vm2.adb" 63 0 0#"model" "name:Page" "model_trace:2682" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "page" defined at x86-vm2.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__has_free_dir_page__L20b__page___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "vma" defined at x86-vm2.adb:66, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__free_dir_page__vma
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function vma #"x86-vm2.adb" 66 0 0#"model" "name:VMA" "model_trace:13770" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vma" defined at x86-vm2.adb:66, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__free_dir_page__vma___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "t" defined at x86-vm2.adb:72, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__offsets_to_vma__t
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__vm2__table_index

 function t #"x86-vm2.adb" 72 0 0#"model_projected" "name:T" "model_trace:13813" 
   : Array__Int__X86__vm2__table_index.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "t" defined at x86-vm2.adb:72, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__offsets_to_vma__t___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "offsets_to_vma" defined at x86-vm2.adb:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__offsets_to_vma
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Array__Int__X86__vm2__table_index

 function offsets_to_vma 
   (t : Array__Int__X86__vm2__table_index.map) : BV64.t
 
 predicate offsets_to_vma__function_guard 
   (result : BV64.t) (t : Array__Int__X86__vm2__table_index.map) 

end

(* Module for defining the constant "vma" defined at x86-vm2.adb:83, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__vma_to_offsets__vma
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function vma #"x86-vm2.adb" 83 0 0#"model" "name:VMA" "model_trace:13896" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vma" defined at x86-vm2.adb:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__vma_to_offsets__vma___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "vma_to_offsets" defined at x86-vm2.adb:83, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__vma_to_offsets
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Array__Int__X86__vm2__table_index

 function vma_to_offsets 
   (vma : BV64.t) : Array__Int__X86__vm2__table_index.map
 
 predicate vma_to_offsets__function_guard 
   (result : Array__Int__X86__vm2__table_index.map) (vma : BV64.t) 

end

(* Module for defining the constant "table_addresses" defined at x86-vm2.adb:179, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__print_page__table_addresses
 use import "_gnatprove_standard".Main
 use        Array__Int__Common__address

 function table_addresses #"x86-vm2.adb" 179 0 0#"model_projected" "model_trace:14144" "name:Table_Addresses" 
   : Array__Int__Common__address.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "table_addresses" defined at x86-vm2.adb:179, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__print_page__table_addresses___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offsets" defined at x86-vm2.adb:180, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__print_page__offsets
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__vm2__table_index

 function offsets #"x86-vm2.adb" 180 0 0#"model_projected" "name:Offsets" "model_trace:14151" 
   : Array__Int__X86__vm2__table_index.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offsets" defined at x86-vm2.adb:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__print_page__offsets___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "physical_address" defined at x86-vm2.adb:181, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__print_page__physical_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function physical_address #"x86-vm2.adb" 181 0 0#"model" "model_trace:14158" "name:Physical_Address" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "physical_address" defined at x86-vm2.adb:181, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__print_page__physical_address___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pte" defined at x86-vm2.adb:182, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__print_page__pte
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function pte #"x86-vm2.adb" 182 0 0#"model" "name:PTE" "model_trace:14165" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pte" defined at x86-vm2.adb:182, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__print_page__pte___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "l" defined at x86-vm2.adb:183, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__print_page__l
 use import "_gnatprove_standard".Main

 function l #"x86-vm2.adb" 183 0 0#"model" "name:L" "model_trace:14172" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "l" defined at x86-vm2.adb:183, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__print_page__l___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "l" defined at x86-vm2.adb:236, created in Gnat2Why.Decls.Translate_Constant *)
module X86__vm2__dump_rec__l
 use import "_gnatprove_standard".Main

 function l #"x86-vm2.adb" 236 0 0#"model" "name:L" "model_trace:14606" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "l" defined at x86-vm2.adb:236, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__dump_rec__l___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining a ref holding the value of variable "base" defined at arch.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Arch__scout_memory__base
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val base #"arch.ads" 18 0 0#"model_projected" "model_trace:5511" "name:Base"  : BV64.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at arch.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Arch__scout_memory__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "size" defined at arch.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Arch__scout_memory__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val size #"arch.ads" 18 0 0#"model_projected" "model_trace:5520" "name:Size"  : BV64.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at arch.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Arch__scout_memory__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "table" defined at x86-interrupts.ads:61, created in Gnat2Why.Decls.Translate_Variable *)
module X86__interrupts__table
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__interrupts__idt_entry

 val table #"x86-interrupts.ads" 61 0 0#"model_projected" "model_trace:8551" "name:Table"  : Array__Int__X86__interrupts__idt_entry.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "table" defined at x86-interrupts.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__interrupts__table___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "success" defined at x86-vm2.ads:44, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__create_mapping__success
 use import "_gnatprove_standard".Main

 val success #"x86-vm2.ads" 44 0 0#"model_projected" "model_trace:4106" "name:Success"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "success" defined at x86-vm2.ads:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__success___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "dir_pages" defined at x86-vm2.ads:71, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__dir_pages
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool

 val dir_pages #"x86-vm2.ads" 71 0 0#"model_projected" "model_trace:4243" "name:Dir_Pages"  : Array__Int__Bool.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "dir_pages" defined at x86-vm2.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__dir_pages___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "page" defined at x86-vm2.ads:81, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__get_free_dir_page__page
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val page #"x86-vm2.ads" 81 0 0#"model_projected" "model_trace:4298" "name:Page"  : BV64.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "page" defined at x86-vm2.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__get_free_dir_page__page___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "directories" defined at x86-vm2.adb:12, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__directories
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__vm2__table

 val directories #"x86-vm2.adb" 12 0 0#"model_projected" "model_trace:2395" "name:Directories"  : Array__Int__X86__vm2__table.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "directories" defined at x86-vm2.adb:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__directories___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at x86-vm2.adb:45, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__get_free_dir_page__L_1__i
 use import "_gnatprove_standard".Main

 val i #"x86-vm2.adb" 45 0 0#"model_projected" "name:I" "model_trace:2582"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at x86-vm2.adb:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__get_free_dir_page__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "current_table" defined at x86-vm2.adb:119, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__create_mapping__current_table
 use import "_gnatprove_standard".Main

 val current_table #"x86-vm2.adb" 119 0 0#"model_projected" "model_trace:2959" "name:Current_Table"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "current_table" defined at x86-vm2.adb:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__current_table___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "offsets" defined at x86-vm2.adb:120, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__create_mapping__offsets
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__vm2__table_index

 val offsets #"x86-vm2.adb" 120 0 0#"model_projected" "model_trace:2969" "name:Offsets"  : Array__Int__X86__vm2__table_index.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offsets" defined at x86-vm2.adb:120, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__offsets___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "dir_page" defined at x86-vm2.adb:121, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__create_mapping__dir_page
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val dir_page #"x86-vm2.adb" 121 0 0#"model_projected" "model_trace:2981" "name:Dir_Page"  : BV64.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "dir_page" defined at x86-vm2.adb:121, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__dir_page___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pte" defined at x86-vm2.adb:122, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__create_mapping__pte
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val pte #"x86-vm2.adb" 122 0 0#"model_projected" "model_trace:2990" "name:PTE"  : BV64.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pte" defined at x86-vm2.adb:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__pte___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "target_level" defined at x86-vm2.adb:123, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__create_mapping__target_level
 use import "_gnatprove_standard".Main

 val target_level #"x86-vm2.adb" 123 0 0#"model_projected" "model_trace:2999" "name:Target_Level"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "target_level" defined at x86-vm2.adb:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__target_level___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "l" defined at x86-vm2.adb:125, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__create_mapping__L_4__l
 use import "_gnatprove_standard".Main

 val l #"x86-vm2.adb" 125 0 0#"model_projected" "model_trace:3017" "name:L"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "l" defined at x86-vm2.adb:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__L_4__l___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "table_addresses" defined at x86-vm2.adb:234, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__dump_rec__table_addresses
 use import "_gnatprove_standard".Main
 use        Array__Int__Common__address

 val table_addresses #"x86-vm2.adb" 234 0 0#"model_projected" "name:Table_Addresses" "model_trace:14592"  : Array__Int__Common__address.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "table_addresses" defined at x86-vm2.adb:234, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__dump_rec__table_addresses___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "offsets" defined at x86-vm2.adb:235, created in Gnat2Why.Decls.Translate_Variable *)
module X86__vm2__dump_rec__offsets
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__vm2__table_index

 val offsets #"x86-vm2.adb" 235 0 0#"model_projected" "name:Offsets" "model_trace:14599"  : Array__Int__X86__vm2__table_index.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offsets" defined at x86-vm2.adb:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__dump_rec__offsets___axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "multiboot__boot_info," created in Gnat2Why.Decls.Translate_External_Object *)
module Multiboot__boot_info
 use import "_gnatprove_standard".Main

 val boot_info  : Main.__private__ref 

end

(* Module declaring the external object "console__x," created in Gnat2Why.Decls.Translate_External_Object *)
module Console__x
 use import "_gnatprove_standard".Main

 val x  : Main.__private__ref 

end

(* Module declaring the external object "console__vmem," created in Gnat2Why.Decls.Translate_External_Object *)
module Console__vmem
 use import "_gnatprove_standard".Main

 val vmem  : Main.__private__ref 

end

(* Module declaring the external object "console__y," created in Gnat2Why.Decls.Translate_External_Object *)
module Console__y
 use import "_gnatprove_standard".Main

 val y  : Main.__private__ref 

end

(* Module declaring the external object "console__current_fg," created in Gnat2Why.Decls.Translate_External_Object *)
module Console__current_fg
 use import "_gnatprove_standard".Main

 val current_fg  : Main.__private__ref 

end

(* Module declaring the external object "console__current_bg," created in Gnat2Why.Decls.Translate_External_Object *)
module Console__current_bg
 use import "_gnatprove_standard".Main

 val current_bg  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__rtc__data_port," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__rtc__data_port
 use import "_gnatprove_standard".Main

 val data_port  : Main.__private__ref 

end

(* Module declaring the external object "x86__interrupts__handler_table," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__interrupts__handler_table
 use import "_gnatprove_standard".Main

 val handler_table  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__rtc__selector_port," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__rtc__selector_port
 use import "_gnatprove_standard".Main

 val selector_port  : Main.__private__ref 

end

(* Module declaring the external object "mmap__head," created in Gnat2Why.Decls.Translate_External_Object *)
module Mmap__head
 use import "_gnatprove_standard".Main

 val head  : Main.__private__ref 

end

(* Module declaring the external object "mmap__tail," created in Gnat2Why.Decls.Translate_External_Object *)
module Mmap__tail
 use import "_gnatprove_standard".Main

 val tail  : Main.__private__ref 

end

(* Module declaring the external object "mmap__free_nodes," created in Gnat2Why.Decls.Translate_External_Object *)
module Mmap__free_nodes
 use import "_gnatprove_standard".Main

 val free_nodes  : Main.__private__ref 

end

(* Module declaring the external object "mmap__address_base," created in Gnat2Why.Decls.Translate_External_Object *)
module Mmap__address_base
 use import "_gnatprove_standard".Main

 val address_base  : Main.__private__ref 

end

(* Module declaring the external object "mmap__allocation_unit," created in Gnat2Why.Decls.Translate_External_Object *)
module Mmap__allocation_unit
 use import "_gnatprove_standard".Main

 val allocation_unit  : Main.__private__ref 

end

(* Module declaring the external object "mmap__max_length," created in Gnat2Why.Decls.Translate_External_Object *)
module Mmap__max_length
 use import "_gnatprove_standard".Main

 val max_length  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__keyboard__buffer," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__keyboard__buffer
 use import "_gnatprove_standard".Main

 val buffer  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__keyboard__write_head," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__keyboard__write_head
 use import "_gnatprove_standard".Main

 val write_head  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__keyboard__ticks," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__keyboard__ticks
 use import "_gnatprove_standard".Main

 val ticks  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__keyboard__caps_lock," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__keyboard__caps_lock
 use import "_gnatprove_standard".Main

 val caps_lock  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__keyboard__shifts," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__keyboard__shifts
 use import "_gnatprove_standard".Main

 val shifts  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__keyboard__has_line_flag," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__keyboard__has_line_flag
 use import "_gnatprove_standard".Main

 val has_line_flag  : Main.__private__ref 

end

(* Module declaring the external object "x86__dev__keyboard__read_tail," created in Gnat2Why.Decls.Translate_External_Object *)
module X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main

 val read_tail  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "asm" defined at s-maccod.ads:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "asm__2" defined at s-maccod.ads:69, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "asm__3" defined at s-maccod.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "asm__4" defined at s-maccod.ads:83, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__machine_code__asm__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "scout_memory" defined at arch.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Arch__scout_memory
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initialise_interrupts" defined at arch.ads:19, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Arch__initialise_interrupts
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "io_outb" defined at arch.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Arch__io_outb
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "at_x" defined at console.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__at_x
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put" defined at console.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at console.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at console.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__4" defined at console.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_hex" defined at console.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put_hex
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_hex__2" defined at console.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put_hex__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_size" defined at console.ads:41, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put_size
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line" defined at console.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__put_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "banner" defined at console.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__banner
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_colour" defined at console.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__set_colour
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "clear" defined at console.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__clear
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "shift_lines" defined at console.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Console__shift_lines
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "slow_handler" defined at x86-interrupts.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__interrupts__slow_handler
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "register_handler" defined at x86-interrupts.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__interrupts__register_handler
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lastchance" defined at error.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Error__lastchance
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exception_handler" defined at error.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Error__exception_handler
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "panic" defined at error.ads:19, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Error__panic
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "allocate" defined at mmap.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mmap__allocate
 use        Mmap__head
 use        Mmap__tail
 use        Mmap__free_nodes
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function allocate 
   (size : BV64.t) (mmap__head : Main.__private) (mmap__tail : Main.__private) (mmap__free_nodes : Main.__private) : BV64.t
 
 predicate allocate__function_guard 
   (result : BV64.t) (size : BV64.t) (mmap__head : Main.__private) (mmap__tail : Main.__private) (mmap__free_nodes : Main.__private) 

end

(* Module for possibly declaring a logic function for "free" defined at mmap.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mmap__free
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initialise" defined at mmap.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mmap__initialise
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print" defined at mmap.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mmap__print
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_base" defined at mmap.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mmap__get_base
 use        Mmap__address_base
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function get_base 
   (mmap__address_base : Main.__private) : BV64.t
 
 predicate get_base__function_guard 
   (result : BV64.t) (mmap__address_base : Main.__private) 

end

(* Module for possibly declaring a logic function for "get_length" defined at mmap.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mmap__get_length
 use        Mmap__max_length
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function get_length 
   (mmap__max_length : Main.__private) : BV64.t
 
 predicate get_length__function_guard 
   (result : BV64.t) (mmap__max_length : Main.__private) 

end

(* Module for defining a value for string literal  defined at x86-dev-keyboard.ads:12, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_159
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_159 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_159__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_159 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 1)) = 49) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 2)) = 50) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 3)) = 51) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 4)) = 52) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 5)) = 53) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 6)) = 54) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 7)) = 55) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 8)) = 56) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 9)) = 57) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 10)) = 48) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 11)) = 45) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_159 __void_param) 12)) = 61) ))

end

(* Module for defining a value for string literal  defined at x86-dev-keyboard.ads:13, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_160
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_160 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_160__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_160 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 1)) = 113) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 2)) = 119) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 3)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 4)) = 114) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 5)) = 116) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 6)) = 121) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 7)) = 117) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 8)) = 105) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 9)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 10)) = 112) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 11)) = 91) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_160 __void_param) 12)) = 93) ))

end

(* Module for defining a value for string literal  defined at x86-dev-keyboard.ads:14, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_161
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_161 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_161__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_161 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 1)) = 97) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 2)) = 115) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 3)) = 100) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 4)) = 102) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 5)) = 103) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 6)) = 104) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 7)) = 106) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 8)) = 107) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 9)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 10)) = 59) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 11)) = 39) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_161 __void_param) 12)) = 96) ))

end

(* Module for defining a value for string literal  defined at x86-dev-keyboard.ads:15, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_162
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_162 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_162__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_162 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 1)) = 92) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 2)) = 122) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 3)) = 120) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 4)) = 99) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 5)) = 118) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 6)) = 98) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 7)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 8)) = 109) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 9)) = 44) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 10)) = 46) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_162 __void_param) 11)) = 47) ))

end

(* Module for possibly declaring a logic function for "handler" defined at x86-dev-keyboard.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__dev__keyboard__handler
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_character" defined at x86-dev-keyboard.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__dev__keyboard__get_character
 use        X86__dev__keyboard__buffer
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function get_character 
   (x86__dev__keyboard__buffer : Main.__private) (x86__dev__keyboard__write_head : Main.__private) (x86__dev__keyboard__read_tail : Main.__private) : int
 
 predicate get_character__function_guard 
   (result : int) (x86__dev__keyboard__buffer : Main.__private) (x86__dev__keyboard__write_head : Main.__private) (x86__dev__keyboard__read_tail : Main.__private) 

end

(* Module for possibly declaring a logic function for "get_ticks" defined at x86-dev-keyboard.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__dev__keyboard__get_ticks
 use        X86__dev__keyboard__ticks
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function get_ticks 
   (x86__dev__keyboard__ticks : Main.__private) : BV64.t
 
 predicate get_ticks__function_guard 
   (result : BV64.t) (x86__dev__keyboard__ticks : Main.__private) 

end

(* Module for possibly declaring a logic function for "has_line" defined at x86-dev-keyboard.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__dev__keyboard__has_line
 use        X86__dev__keyboard__has_line_flag
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function has_line 
   (x86__dev__keyboard__has_line_flag : Main.__private) : bool
 
 predicate has_line__function_guard 
   (result : bool) (x86__dev__keyboard__has_line_flag : Main.__private) 

end

(* Module for possibly declaring a logic function for "has_input" defined at x86-dev-keyboard.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__dev__keyboard__has_input
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function has_input 
   (x86__dev__keyboard__write_head : Main.__private) (x86__dev__keyboard__read_tail : Main.__private) : bool
 
 predicate has_input__function_guard 
   (result : bool) (x86__dev__keyboard__write_head : Main.__private) (x86__dev__keyboard__read_tail : Main.__private) 

end

(* Module for possibly declaring a logic function for "flush" defined at x86-dev-keyboard.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__dev__keyboard__flush
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dump_pages" defined at x86-vm2.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__dump_pages
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initialise" defined at x86-vm2.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__initialise
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "create_mapping" defined at x86-vm2.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__create_mapping
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "has_free_dir_page" defined at x86-vm2.ads:75, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__has_free_dir_page
 use        X86__vm2__dir_pages
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool

 function has_free_dir_page 
   (x86__vm2__dir_pages : Array__Int__Bool.map) : bool
 
 predicate has_free_dir_page__function_guard 
   (result : bool) (x86__vm2__dir_pages : Array__Int__Bool.map) 

end

(* Module for possibly declaring a logic function for "get_free_dir_page" defined at x86-vm2.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__get_free_dir_page
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at x86-vm2.adb:16, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module X86__vm2__shifts__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function x86__vm2__shifts__aggregate_def 
   (temp___171 : int) (temp___172 : int) (temp___173 : int) (temp___174 : int) : Array__Int__Standard__natural.map

end

(* Module for defining the loop exit exception for the loop "L_1" defined at x86-vm2.adb:45, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module X86__vm2__get_free_dir_page__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at x86-vm2.adb:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__get_free_dir_page__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "free_dir_page" defined at x86-vm2.adb:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__free_dir_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flush_tlb" defined at x86-vm2.adb:94, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__flush_tlb
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_4" defined at x86-vm2.adb:125, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module X86__vm2__create_mapping__L_4
 use import "_gnatprove_standard".Main

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at x86-vm2.adb:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module X86__vm2__create_mapping__L_4___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_page" defined at x86-vm2.adb:178, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__print_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dump_rec" defined at x86-vm2.adb:234, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module X86__vm2__dump_rec
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "name" defined at system.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant "inline" 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool)  =
  (if (( temp___is_init_176 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_180)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:131, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address

 predicate dynamic_invariant "inline" 
   (temp___expr_187 : BV64.t) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool)  =
  (if (( temp___is_init_183 \/ (BV64.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_187)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_188 : BV64.t) (temp___skip_top_level_189 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:114, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant "inline" 
   (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool)  =
  (if (( temp___is_init_190 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_194)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_195 : int) (temp___skip_top_level_196 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:123, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_201 : int) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool)  =
  (if (( temp___is_init_197 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_201)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_202 : int) (temp___skip_top_level_203 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant "inline" 
   (temp___expr_208 : int) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool)  =
  (if (( temp___is_init_204 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_208)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_209 : int) (temp___skip_top_level_210 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_215 : int) (temp___is_init_211 : bool) (temp___skip_constant_212 : bool) (temp___do_toplevel_213 : bool) (temp___do_typ_inv_214 : bool)  =
  (if (( temp___is_init_211 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_215)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_216 : int) (temp___skip_top_level_217 : bool)  =
  true

end

(* Module giving axioms for type "Tasm_input_operandB" defined at s-maccod.ads:122, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__Tasm_input_operandB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "asm_input_operand" defined at s-maccod.ads:122, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__asm_input_operand___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__asm_input_operand

 predicate dynamic_invariant "inline" 
   (temp___expr_222 : int) (temp___is_init_218 : bool) (temp___skip_constant_219 : bool) (temp___do_toplevel_220 : bool) (temp___do_typ_inv_221 : bool)  =
  (if (( temp___is_init_218 \/ (System__machine_code__asm_input_operand.first <= System__machine_code__asm_input_operand.last) )) then (
   (System__machine_code__asm_input_operand.dynamic_property System__machine_code__asm_input_operand.first System__machine_code__asm_input_operand.last temp___expr_222)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_223 : int) (temp___skip_top_level_224 : bool)  =
  true

end

(* Module giving axioms for type "Tasm_output_operandB" defined at s-maccod.ads:123, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__Tasm_output_operandB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "asm_output_operand" defined at s-maccod.ads:123, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__asm_output_operand___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__asm_output_operand

 predicate dynamic_invariant "inline" 
   (temp___expr_229 : int) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool)  =
  (if (( temp___is_init_225 \/ (System__machine_code__asm_output_operand.first <= System__machine_code__asm_output_operand.last) )) then (
   (System__machine_code__asm_output_operand.dynamic_property System__machine_code__asm_output_operand.first System__machine_code__asm_output_operand.last temp___expr_229)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_230 : int) (temp___skip_top_level_231 : bool)  =
  true

end

(* Module giving axioms for type "asm_input_operand_list" defined at s-maccod.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__asm_input_operand_list___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        System__machine_code__asm_input_operand_list

 predicate dynamic_invariant "inline" 
   (temp___expr_236 : System__machine_code__asm_input_operand_list.asm_input_operand_list) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool)  =
  (if (temp___skip_constant_233) then (
   true) else (
   (System__machine_code__asm_input_operand_list.dynamic_property Standard__integer.first Standard__integer.last (System__machine_code__asm_input_operand_list.first temp___expr_236) (System__machine_code__asm_input_operand_list.last temp___expr_236))))

end

(* Module giving axioms for type "asm_output_operand_list" defined at s-maccod.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__asm_output_operand_list___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        System__machine_code__asm_output_operand_list

 predicate dynamic_invariant "inline" 
   (temp___expr_242 : System__machine_code__asm_output_operand_list.asm_output_operand_list) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool)  =
  (if (temp___skip_constant_239) then (
   true) else (
   (System__machine_code__asm_output_operand_list.dynamic_property Standard__integer.first Standard__integer.last (System__machine_code__asm_output_operand_list.first temp___expr_242) (System__machine_code__asm_output_operand_list.last temp___expr_242))))

end

(* Module giving axioms for type "Tasm_insnB" defined at s-maccod.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__Tasm_insnB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "asm_insn" defined at s-maccod.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__machine_code__asm_insn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__asm_insn

 predicate dynamic_invariant "inline" 
   (temp___expr_248 : int) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool)  =
  (if (( temp___is_init_244 \/ (System__machine_code__asm_insn.first <= System__machine_code__asm_insn.last) )) then (
   (System__machine_code__asm_insn.dynamic_property System__machine_code__asm_insn.first System__machine_code__asm_insn.last temp___expr_248)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_249 : int) (temp___skip_top_level_250 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_8B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_291 : int) (temp___is_init_287 : bool) (temp___skip_constant_288 : bool) (temp___do_toplevel_289 : bool) (temp___do_typ_inv_290 : bool)  =
  (if (( temp___is_init_287 \/ (Interfaces__integer_8.first <= Interfaces__integer_8.last) )) then (
   (Interfaces__integer_8.dynamic_property Interfaces__integer_8.first Interfaces__integer_8.last temp___expr_291)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_292 : int) (temp___skip_top_level_293 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_16B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_298 : int) (temp___is_init_294 : bool) (temp___skip_constant_295 : bool) (temp___do_toplevel_296 : bool) (temp___do_typ_inv_297 : bool)  =
  (if (( temp___is_init_294 \/ (Interfaces__integer_16.first <= Interfaces__integer_16.last) )) then (
   (Interfaces__integer_16.dynamic_property Interfaces__integer_16.first Interfaces__integer_16.last temp___expr_298)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_299 : int) (temp___skip_top_level_300 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_305 : int) (temp___is_init_301 : bool) (temp___skip_constant_302 : bool) (temp___do_toplevel_303 : bool) (temp___do_typ_inv_304 : bool)  =
  (if (( temp___is_init_301 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_305)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_306 : int) (temp___skip_top_level_307 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_312 : int) (temp___is_init_308 : bool) (temp___skip_constant_309 : bool) (temp___do_toplevel_310 : bool) (temp___do_typ_inv_311 : bool)  =
  (if (( temp___is_init_308 \/ (Interfaces__integer_64.first <= Interfaces__integer_64.last) )) then (
   (Interfaces__integer_64.dynamic_property Interfaces__integer_64.first Interfaces__integer_64.last temp___expr_312)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_313 : int) (temp___skip_top_level_314 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_8___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Interfaces__unsigned_8

 predicate dynamic_invariant "inline" 
   (temp___expr_319 : BV8.t) (temp___is_init_315 : bool) (temp___skip_constant_316 : bool) (temp___do_toplevel_317 : bool) (temp___do_typ_inv_318 : bool)  =
  (if (( temp___is_init_315 \/ (BV8.ule Interfaces__unsigned_8.first Interfaces__unsigned_8.last) )) then (
   (Interfaces__unsigned_8.dynamic_property Interfaces__unsigned_8.first Interfaces__unsigned_8.last temp___expr_319)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_320 : BV8.t) (temp___skip_top_level_321 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_16___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        Interfaces__unsigned_16

 predicate dynamic_invariant "inline" 
   (temp___expr_326 : BV16.t) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool)  =
  (if (( temp___is_init_322 \/ (BV16.ule Interfaces__unsigned_16.first Interfaces__unsigned_16.last) )) then (
   (Interfaces__unsigned_16.dynamic_property Interfaces__unsigned_16.first Interfaces__unsigned_16.last temp___expr_326)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_327 : BV16.t) (temp___skip_top_level_328 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_24___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_24

 predicate dynamic_invariant "inline" 
   (temp___expr_333 : BV32.t) (temp___is_init_329 : bool) (temp___skip_constant_330 : bool) (temp___do_toplevel_331 : bool) (temp___do_typ_inv_332 : bool)  =
  (if (( temp___is_init_329 \/ (BV32.ule Interfaces__unsigned_24.first Interfaces__unsigned_24.last) )) then (
   (Interfaces__unsigned_24.dynamic_property Interfaces__unsigned_24.first Interfaces__unsigned_24.last temp___expr_333)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_334 : BV32.t) (temp___skip_top_level_335 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_32

 predicate dynamic_invariant "inline" 
   (temp___expr_340 : BV32.t) (temp___is_init_336 : bool) (temp___skip_constant_337 : bool) (temp___do_toplevel_338 : bool) (temp___do_typ_inv_339 : bool)  =
  (if (( temp___is_init_336 \/ (BV32.ule Interfaces__unsigned_32.first Interfaces__unsigned_32.last) )) then (
   (Interfaces__unsigned_32.dynamic_property Interfaces__unsigned_32.first Interfaces__unsigned_32.last temp___expr_340)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_341 : BV32.t) (temp___skip_top_level_342 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__unsigned_64

 predicate dynamic_invariant "inline" 
   (temp___expr_347 : BV64.t) (temp___is_init_343 : bool) (temp___skip_constant_344 : bool) (temp___do_toplevel_345 : bool) (temp___do_typ_inv_346 : bool)  =
  (if (( temp___is_init_343 \/ (BV64.ule Interfaces__unsigned_64.first Interfaces__unsigned_64.last) )) then (
   (Interfaces__unsigned_64.dynamic_property Interfaces__unsigned_64.first Interfaces__unsigned_64.last temp___expr_347)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_348 : BV64.t) (temp___skip_top_level_349 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Interfaces__ieee_float_32

 predicate dynamic_invariant "inline" 
   (temp___expr_354 : Float32.t) (temp___is_init_350 : bool) (temp___skip_constant_351 : bool) (temp___do_toplevel_352 : bool) (temp___do_typ_inv_353 : bool)  =
  (if (( temp___is_init_350 \/ (Float32.le Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last) )) then (
   (Interfaces__ieee_float_32.dynamic_property Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last temp___expr_354)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_355 : Float32.t) (temp___skip_top_level_356 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Interfaces__ieee_float_64

 predicate dynamic_invariant "inline" 
   (temp___expr_361 : Float64.t) (temp___is_init_357 : bool) (temp___skip_constant_358 : bool) (temp___do_toplevel_359 : bool) (temp___do_typ_inv_360 : bool)  =
  (if (( temp___is_init_357 \/ (Float64.le Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last) )) then (
   (Interfaces__ieee_float_64.dynamic_property Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last temp___expr_361)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_362 : Float64.t) (temp___skip_top_level_363 : bool)  =
  true

end

(* Module giving axioms for type "TaddressB" defined at common.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Common__TaddressB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "address" defined at common.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Common__address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Common__address

 predicate dynamic_invariant "inline" 
   (temp___expr_368 : BV64.t) (temp___is_init_364 : bool) (temp___skip_constant_365 : bool) (temp___do_toplevel_366 : bool) (temp___do_typ_inv_367 : bool)  =
  (if (( temp___is_init_364 \/ (BV64.ule Common__address.first Common__address.last) )) then (
   (Common__address.dynamic_property Common__address.first Common__address.last temp___expr_368)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_369 : BV64.t) (temp___skip_top_level_370 : bool)  =
  true

end

(* Module giving axioms for type "Tphysical_addressB" defined at common.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Common__Tphysical_addressB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "physical_address" defined at common.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Common__physical_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Common__physical_address

 predicate dynamic_invariant "inline" 
   (temp___expr_375 : BV64.t) (temp___is_init_371 : bool) (temp___skip_constant_372 : bool) (temp___do_toplevel_373 : bool) (temp___do_typ_inv_374 : bool)  =
  (if (( temp___is_init_371 \/ (BV64.ule Common__physical_address.first Common__physical_address.last) )) then (
   (Common__physical_address.dynamic_property Common__physical_address.first Common__physical_address.last temp___expr_375)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_376 : BV64.t) (temp___skip_top_level_377 : bool)  =
  true

end

(* Module giving axioms for type "Tvirtual_addressB" defined at common.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Common__Tvirtual_addressB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "virtual_address" defined at common.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Common__virtual_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Common__virtual_address

 predicate dynamic_invariant "inline" 
   (temp___expr_382 : BV64.t) (temp___is_init_378 : bool) (temp___skip_constant_379 : bool) (temp___do_toplevel_380 : bool) (temp___do_typ_inv_381 : bool)  =
  (if (( temp___is_init_378 \/ (BV64.ule Common__virtual_address.first Common__virtual_address.last) )) then (
   (Common__virtual_address.dynamic_property Common__virtual_address.first Common__virtual_address.last temp___expr_382)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_383 : BV64.t) (temp___skip_top_level_384 : bool)  =
  true

end

(* Module giving axioms for type "Tio_portB" defined at arch.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Arch__Tio_portB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "io_port" defined at arch.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Arch__io_port___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        Arch__io_port

 predicate dynamic_invariant "inline" 
   (temp___expr_389 : BV16.t) (temp___is_init_385 : bool) (temp___skip_constant_386 : bool) (temp___do_toplevel_387 : bool) (temp___do_typ_inv_388 : bool)  =
  (if (( temp___is_init_385 \/ (BV16.ule Arch__io_port.first Arch__io_port.last) )) then (
   (Arch__io_port.dynamic_property Arch__io_port.first Arch__io_port.last temp___expr_389)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_390 : BV16.t) (temp___skip_top_level_391 : bool)  =
  true

end

(* Module giving axioms for type "colour" defined at console.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Console__colour___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Console__colour

 predicate dynamic_invariant "inline" 
   (temp___expr_399 : int) (temp___is_init_395 : bool) (temp___skip_constant_396 : bool) (temp___do_toplevel_397 : bool) (temp___do_typ_inv_398 : bool)  =
  (if (( temp___is_init_395 \/ (Console__colour.first <= Console__colour.last) )) then (
   (Console__colour.dynamic_property Console__colour.first Console__colour.last temp___expr_399)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_400 : int) (temp___skip_top_level_401 : bool)  =
  true

end

(* Module giving axioms for type "bg_colour" defined at console.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Console__bg_colour___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Console__bg_colour

 predicate dynamic_invariant "inline" 
   (temp___expr_406 : int) (temp___is_init_402 : bool) (temp___skip_constant_403 : bool) (temp___do_toplevel_404 : bool) (temp___do_typ_inv_405 : bool)  =
  (if (( temp___is_init_402 \/ (Console__bg_colour.first <= Console__bg_colour.last) )) then (
   (Console__bg_colour.dynamic_property Console__bg_colour.first Console__bg_colour.last temp___expr_406)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_407 : int) (temp___skip_top_level_408 : bool)  =
  true

end

(* Module giving axioms for type "cell" defined at console.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Console__cell___axiom
 use import "_gnatprove_standard".Main
 use        Console__cell

 predicate dynamic_invariant "inline" 
   (temp___expr_413 : Console__cell.cell) (temp___is_init_409 : bool) (temp___skip_constant_410 : bool) (temp___do_toplevel_411 : bool) (temp___do_typ_inv_412 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_414 : Console__cell.cell) (temp___skip_top_level_415 : bool)  =
  true

end

(* Module giving axioms for type "interrupt" defined at x86-interrupts.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__interrupt___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__interrupts__interrupt

 predicate dynamic_invariant "inline" 
   (temp___expr_426 : int) (temp___is_init_422 : bool) (temp___skip_constant_423 : bool) (temp___do_toplevel_424 : bool) (temp___do_typ_inv_425 : bool)  =
  (if (( temp___is_init_422 \/ (X86__interrupts__interrupt.first <= X86__interrupts__interrupt.last) )) then (
   (X86__interrupts__interrupt.dynamic_property X86__interrupts__interrupt.first X86__interrupts__interrupt.last temp___expr_426)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_427 : int) (temp___skip_top_level_428 : bool)  =
  true

end

(* Module giving axioms for type "cpu_exception" defined at x86-interrupts.ads:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__cpu_exception___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__interrupts__cpu_exception

 predicate dynamic_invariant "inline" 
   (temp___expr_433 : int) (temp___is_init_429 : bool) (temp___skip_constant_430 : bool) (temp___do_toplevel_431 : bool) (temp___do_typ_inv_432 : bool)  =
  (if (( temp___is_init_429 \/ (X86__interrupts__cpu_exception.first <= X86__interrupts__cpu_exception.last) )) then (
   (X86__interrupts__cpu_exception.dynamic_property X86__interrupts__cpu_exception.first X86__interrupts__cpu_exception.last temp___expr_433)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_434 : int) (temp___skip_top_level_435 : bool)  =
  true

end

(* Module giving axioms for type "external_interrupt" defined at x86-interrupts.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__external_interrupt___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__interrupts__external_interrupt

 predicate dynamic_invariant "inline" 
   (temp___expr_440 : int) (temp___is_init_436 : bool) (temp___skip_constant_437 : bool) (temp___do_toplevel_438 : bool) (temp___do_typ_inv_439 : bool)  =
  (if (( temp___is_init_436 \/ (X86__interrupts__external_interrupt.first <= X86__interrupts__external_interrupt.last) )) then (
   (X86__interrupts__external_interrupt.dynamic_property X86__interrupts__external_interrupt.first X86__interrupts__external_interrupt.last temp___expr_440)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_441 : int) (temp___skip_top_level_442 : bool)  =
  true

end

(* Module giving axioms for type "T1s" defined at x86-interrupts.ads:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__idt_entry__T1s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2s" defined at x86-interrupts.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__idt_entry__T2s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3s" defined at x86-interrupts.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__idt_entry__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "idt_entry" defined at x86-interrupts.ads:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__idt_entry___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8
 use        "_gnatprove_standard".BV16
 use        "_gnatprove_standard".BV32
 use        "_gnatprove_standard".Boolean
 use        Interfaces__unsigned_16
 use        Interfaces__unsigned_16__rep
 use        Interfaces__unsigned_32
 use        Interfaces__unsigned_32__rep
 use        X86__interrupts__idt_entry__T1s
 use        X86__interrupts__idt_entry__T1s__rep
 use        X86__interrupts__idt_entry__T2s
 use        X86__interrupts__idt_entry__T2s__rep
 use        X86__interrupts__idt_entry__T3s
 use        X86__interrupts__idt_entry__T3s__rep
 use        X86__interrupts__idt_entry

 predicate dynamic_invariant "inline" 
   (temp___expr_450 : X86__interrupts__idt_entry.idt_entry) (temp___is_init_446 : bool) (temp___skip_constant_447 : bool) (temp___do_toplevel_448 : bool) (temp___do_typ_inv_449 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_451 : X86__interrupts__idt_entry.idt_entry) (temp___skip_top_level_452 : bool)  =
  ( ( ( ( ( (if ((X86__interrupts__idt_entry.x86__interrupts__idt_entry__selector__pred temp___expr_451)) then (
   ((Interfaces__unsigned_16__rep.to_rep (X86__interrupts__idt_entry.rec__x86__interrupts__idt_entry__selector (X86__interrupts__idt_entry.__split_fields temp___expr_451))) = ( 16 : BV16.t ))) else true) /\ (if ((X86__interrupts__idt_entry.x86__interrupts__idt_entry__ist__pred temp___expr_451)) then (
   ((X86__interrupts__idt_entry__T1s__rep.to_rep (X86__interrupts__idt_entry.rec__x86__interrupts__idt_entry__ist (X86__interrupts__idt_entry.__split_fields temp___expr_451))) = ( 0 : BV8.t ))) else true) ) /\ (if ((X86__interrupts__idt_entry.x86__interrupts__idt_entry__descriptor_type__pred temp___expr_451)) then (
   ((X86__interrupts__idt_entry__T2s__rep.to_rep (X86__interrupts__idt_entry.rec__x86__interrupts__idt_entry__descriptor_type (X86__interrupts__idt_entry.__split_fields temp___expr_451))) = ( 14 : BV8.t ))) else true) ) /\ (if ((X86__interrupts__idt_entry.x86__interrupts__idt_entry__dpl__pred temp___expr_451)) then (
   ((X86__interrupts__idt_entry__T3s__rep.to_rep (X86__interrupts__idt_entry.rec__x86__interrupts__idt_entry__dpl (X86__interrupts__idt_entry.__split_fields temp___expr_451))) = ( 0 : BV8.t ))) else true) ) /\ (if ((X86__interrupts__idt_entry.x86__interrupts__idt_entry__p__pred temp___expr_451)) then (
   ((X86__interrupts__idt_entry.rec__x86__interrupts__idt_entry__p (X86__interrupts__idt_entry.__split_fields temp___expr_451)) = (Boolean.of_int 1))) else true) ) /\ (if ((X86__interrupts__idt_entry.x86__interrupts__idt_entry__pad__pred temp___expr_451)) then (
   ((Interfaces__unsigned_32__rep.to_rep (X86__interrupts__idt_entry.rec__x86__interrupts__idt_entry__pad (X86__interrupts__idt_entry.__split_fields temp___expr_451))) = ( 0 : BV32.t ))) else true) )

end

(* Module giving axioms for type "TtableD1" defined at x86-interrupts.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__TtableD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TtableB" defined at x86-interrupts.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__TtableB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TtableT" defined at x86-interrupts.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__interrupts__TtableT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tstorage_offsetB" defined at s-stoele.ads:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__storage_elements__Tstorage_offsetB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "storage_offset" defined at s-stoele.ads:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__storage_elements__storage_offset___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_elements__storage_offset

 predicate dynamic_invariant "inline" 
   (temp___expr_462 : int) (temp___is_init_458 : bool) (temp___skip_constant_459 : bool) (temp___do_toplevel_460 : bool) (temp___do_typ_inv_461 : bool)  =
  (if (( temp___is_init_458 \/ (System__storage_elements__storage_offset.first <= System__storage_elements__storage_offset.last) )) then (
   (System__storage_elements__storage_offset.dynamic_property System__storage_elements__storage_offset.first System__storage_elements__storage_offset.last temp___expr_462)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_463 : int) (temp___skip_top_level_464 : bool)  =
  true

end

(* Module giving axioms for type "storage_count" defined at s-stoele.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__storage_elements__storage_count___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_elements__storage_count

 predicate dynamic_invariant "inline" 
   (temp___expr_469 : int) (temp___is_init_465 : bool) (temp___skip_constant_466 : bool) (temp___do_toplevel_467 : bool) (temp___do_typ_inv_468 : bool)  =
  (if (( temp___is_init_465 \/ (System__storage_elements__storage_count.first <= System__storage_elements__storage_count.last) )) then (
   (System__storage_elements__storage_count.dynamic_property System__storage_elements__storage_count.first System__storage_elements__storage_count.last temp___expr_469)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_470 : int) (temp___skip_top_level_471 : bool)  =
  true

end

(* Module giving axioms for type "storage_element" defined at s-stoele.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__storage_elements__storage_element___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        System__storage_elements__storage_element

 predicate dynamic_invariant "inline" 
   (temp___expr_476 : BV8.t) (temp___is_init_472 : bool) (temp___skip_constant_473 : bool) (temp___do_toplevel_474 : bool) (temp___do_typ_inv_475 : bool)  =
  (if (( temp___is_init_472 \/ (BV8.ule System__storage_elements__storage_element.first System__storage_elements__storage_element.last) )) then (
   (System__storage_elements__storage_element.dynamic_property System__storage_elements__storage_element.first System__storage_elements__storage_element.last temp___expr_476)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_477 : BV8.t) (temp___skip_top_level_478 : bool)  =
  true

end

(* Module giving axioms for type "storage_array" defined at s-stoele.ads:70, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__storage_elements__storage_array___axiom
 use import "_gnatprove_standard".Main
 use        System__storage_elements__storage_offset
 use        System__storage_elements__storage_array

 predicate dynamic_invariant "inline" 
   (temp___expr_483 : System__storage_elements__storage_array.storage_array) (temp___is_init_479 : bool) (temp___skip_constant_480 : bool) (temp___do_toplevel_481 : bool) (temp___do_typ_inv_482 : bool)  =
  (if (temp___skip_constant_480) then (
   true) else (
   (System__storage_elements__storage_array.dynamic_property System__storage_elements__storage_offset.first System__storage_elements__storage_offset.last (System__storage_elements__storage_array.first temp___expr_483) (System__storage_elements__storage_array.last temp___expr_483))))

end

(* Module giving axioms for type "integer_address" defined at s-stoele.ads:105, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__storage_elements__integer_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__integer_address

 predicate dynamic_invariant "inline" 
   (temp___expr_489 : BV64.t) (temp___is_init_485 : bool) (temp___skip_constant_486 : bool) (temp___do_toplevel_487 : bool) (temp___do_typ_inv_488 : bool)  =
  (if (( temp___is_init_485 \/ (BV64.ule System__storage_elements__integer_address.first System__storage_elements__integer_address.last) )) then (
   (System__storage_elements__integer_address.dynamic_property System__storage_elements__integer_address.first System__storage_elements__integer_address.last temp___expr_489)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_490 : BV64.t) (temp___skip_top_level_491 : bool)  =
  true

end

(* Module giving axioms for type "node_index" defined at mmap.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mmap__node_index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Mmap__node_index

 predicate dynamic_invariant "inline" 
   (temp___expr_496 : int) (temp___is_init_492 : bool) (temp___skip_constant_493 : bool) (temp___do_toplevel_494 : bool) (temp___do_typ_inv_495 : bool)  =
  (if (( temp___is_init_492 \/ (Mmap__node_index.first <= Mmap__node_index.last) )) then (
   (Mmap__node_index.dynamic_property Mmap__node_index.first Mmap__node_index.last temp___expr_496)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_497 : int) (temp___skip_top_level_498 : bool)  =
  true

end

(* Module giving axioms for type "node" defined at mmap.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mmap__node___axiom
 use import "_gnatprove_standard".Main
 use        Mmap__node

 predicate dynamic_invariant "inline" 
   (temp___expr_503 : Mmap__node.node) (temp___is_init_499 : bool) (temp___skip_constant_500 : bool) (temp___do_toplevel_501 : bool) (temp___do_typ_inv_502 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_504 : Mmap__node.node) (temp___skip_top_level_505 : bool)  =
  true

end

(* Module giving axioms for type "Tnode_listB" defined at mmap.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mmap__Tnode_listB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "node_list" defined at mmap.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mmap__node_list___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Mmap__node
 use        Array__Int__Mmap__node

 predicate dynamic_invariant "inline" 
   (temp___expr_513 : Array__Int__Mmap__node.map) (temp___is_init_509 : bool) (temp___skip_constant_510 : bool) (temp___do_toplevel_511 : bool) (temp___do_typ_inv_512 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_515 : Array__Int__Mmap__node.map) (temp___skip_top_level_516 : bool)  =
  true

end

(* Module giving axioms for type "T1s" defined at x86-dev-keyboard.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__dev__keyboard__T1s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2s" defined at x86-dev-keyboard.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__dev__keyboard__T2s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3s" defined at x86-dev-keyboard.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__dev__keyboard__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at x86-dev-keyboard.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__dev__keyboard__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "short_short_unsigned" defined at s-unstyp.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__short_short_unsigned___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        System__unsigned_types__short_short_unsigned

 predicate dynamic_invariant "inline" 
   (temp___expr_526 : BV8.t) (temp___is_init_522 : bool) (temp___skip_constant_523 : bool) (temp___do_toplevel_524 : bool) (temp___do_typ_inv_525 : bool)  =
  (if (( temp___is_init_522 \/ (BV8.ule System__unsigned_types__short_short_unsigned.first System__unsigned_types__short_short_unsigned.last) )) then (
   (System__unsigned_types__short_short_unsigned.dynamic_property System__unsigned_types__short_short_unsigned.first System__unsigned_types__short_short_unsigned.last temp___expr_526)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_527 : BV8.t) (temp___skip_top_level_528 : bool)  =
  true

end

(* Module giving axioms for type "short_unsigned" defined at s-unstyp.ads:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__short_unsigned___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        System__unsigned_types__short_unsigned

 predicate dynamic_invariant "inline" 
   (temp___expr_533 : BV16.t) (temp___is_init_529 : bool) (temp___skip_constant_530 : bool) (temp___do_toplevel_531 : bool) (temp___do_typ_inv_532 : bool)  =
  (if (( temp___is_init_529 \/ (BV16.ule System__unsigned_types__short_unsigned.first System__unsigned_types__short_unsigned.last) )) then (
   (System__unsigned_types__short_unsigned.dynamic_property System__unsigned_types__short_unsigned.first System__unsigned_types__short_unsigned.last temp___expr_533)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_534 : BV16.t) (temp___skip_top_level_535 : bool)  =
  true

end

(* Module giving axioms for type "unsigned" defined at s-unstyp.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__unsigned___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__unsigned_types__unsigned

 predicate dynamic_invariant "inline" 
   (temp___expr_540 : BV32.t) (temp___is_init_536 : bool) (temp___skip_constant_537 : bool) (temp___do_toplevel_538 : bool) (temp___do_typ_inv_539 : bool)  =
  (if (( temp___is_init_536 \/ (BV32.ule System__unsigned_types__unsigned.first System__unsigned_types__unsigned.last) )) then (
   (System__unsigned_types__unsigned.dynamic_property System__unsigned_types__unsigned.first System__unsigned_types__unsigned.last temp___expr_540)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_541 : BV32.t) (temp___skip_top_level_542 : bool)  =
  true

end

(* Module giving axioms for type "long_unsigned" defined at s-unstyp.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__long_unsigned___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__unsigned_types__long_unsigned

 predicate dynamic_invariant "inline" 
   (temp___expr_547 : BV64.t) (temp___is_init_543 : bool) (temp___skip_constant_544 : bool) (temp___do_toplevel_545 : bool) (temp___do_typ_inv_546 : bool)  =
  (if (( temp___is_init_543 \/ (BV64.ule System__unsigned_types__long_unsigned.first System__unsigned_types__long_unsigned.last) )) then (
   (System__unsigned_types__long_unsigned.dynamic_property System__unsigned_types__long_unsigned.first System__unsigned_types__long_unsigned.last temp___expr_547)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_548 : BV64.t) (temp___skip_top_level_549 : bool)  =
  true

end

(* Module giving axioms for type "long_long_unsigned" defined at s-unstyp.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__long_long_unsigned___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__unsigned_types__long_long_unsigned

 predicate dynamic_invariant "inline" 
   (temp___expr_554 : BV64.t) (temp___is_init_550 : bool) (temp___skip_constant_551 : bool) (temp___do_toplevel_552 : bool) (temp___do_typ_inv_553 : bool)  =
  (if (( temp___is_init_550 \/ (BV64.ule System__unsigned_types__long_long_unsigned.first System__unsigned_types__long_long_unsigned.last) )) then (
   (System__unsigned_types__long_long_unsigned.dynamic_property System__unsigned_types__long_long_unsigned.first System__unsigned_types__long_long_unsigned.last temp___expr_554)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_555 : BV64.t) (temp___skip_top_level_556 : bool)  =
  true

end

(* Module giving axioms for type "float_unsigned" defined at s-unstyp.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__float_unsigned___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__unsigned_types__float_unsigned

 predicate dynamic_invariant "inline" 
   (temp___expr_561 : BV32.t) (temp___is_init_557 : bool) (temp___skip_constant_558 : bool) (temp___do_toplevel_559 : bool) (temp___do_typ_inv_560 : bool)  =
  (if (( temp___is_init_557 \/ (BV32.ule System__unsigned_types__float_unsigned.first System__unsigned_types__float_unsigned.last) )) then (
   (System__unsigned_types__float_unsigned.dynamic_property System__unsigned_types__float_unsigned.first System__unsigned_types__float_unsigned.last temp___expr_561)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_562 : BV32.t) (temp___skip_top_level_563 : bool)  =
  true

end

(* Module giving axioms for type "packed_byte" defined at s-unstyp.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__packed_byte___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        System__unsigned_types__packed_byte

 predicate dynamic_invariant "inline" 
   (temp___expr_568 : BV8.t) (temp___is_init_564 : bool) (temp___skip_constant_565 : bool) (temp___do_toplevel_566 : bool) (temp___do_typ_inv_567 : bool)  =
  (if (( temp___is_init_564 \/ (BV8.ule System__unsigned_types__packed_byte.first System__unsigned_types__packed_byte.last) )) then (
   (System__unsigned_types__packed_byte.dynamic_property System__unsigned_types__packed_byte.first System__unsigned_types__packed_byte.last temp___expr_568)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_569 : BV8.t) (temp___skip_top_level_570 : bool)  =
  true

end

(* Module giving axioms for type "packed_bytes1" defined at s-unstyp.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__packed_bytes1___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        System__unsigned_types__packed_bytes1

 predicate dynamic_invariant "inline" 
   (temp___expr_575 : System__unsigned_types__packed_bytes1.packed_bytes1) (temp___is_init_571 : bool) (temp___skip_constant_572 : bool) (temp___do_toplevel_573 : bool) (temp___do_typ_inv_574 : bool)  =
  (if (temp___skip_constant_572) then (
   true) else (
   (System__unsigned_types__packed_bytes1.dynamic_property Standard__natural.first Standard__natural.last (System__unsigned_types__packed_bytes1.first temp___expr_575) (System__unsigned_types__packed_bytes1.last temp___expr_575))))

end

(* Module giving axioms for type "packed_bytes2" defined at s-unstyp.ads:70, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__packed_bytes2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        System__unsigned_types__packed_bytes2

 predicate dynamic_invariant "inline" 
   (temp___expr_581 : System__unsigned_types__packed_bytes2.packed_bytes2) (temp___is_init_577 : bool) (temp___skip_constant_578 : bool) (temp___do_toplevel_579 : bool) (temp___do_typ_inv_580 : bool)  =
  (if (temp___skip_constant_578) then (
   true) else (
   (System__unsigned_types__packed_bytes2.dynamic_property Standard__natural.first Standard__natural.last (System__unsigned_types__packed_bytes2.first temp___expr_581) (System__unsigned_types__packed_bytes2.last temp___expr_581))))

end

(* Module giving axioms for type "packed_bytes4" defined at s-unstyp.ads:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__packed_bytes4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        System__unsigned_types__packed_bytes4

 predicate dynamic_invariant "inline" 
   (temp___expr_587 : System__unsigned_types__packed_bytes4.packed_bytes4) (temp___is_init_583 : bool) (temp___skip_constant_584 : bool) (temp___do_toplevel_585 : bool) (temp___do_typ_inv_586 : bool)  =
  (if (temp___skip_constant_584) then (
   true) else (
   (System__unsigned_types__packed_bytes4.dynamic_property Standard__natural.first Standard__natural.last (System__unsigned_types__packed_bytes4.first temp___expr_587) (System__unsigned_types__packed_bytes4.last temp___expr_587))))

end

(* Module giving axioms for type "bits_1" defined at s-unstyp.ads:92, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__bits_1___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        System__unsigned_types__bits_1

 predicate dynamic_invariant "inline" 
   (temp___expr_593 : BV8.t) (temp___is_init_589 : bool) (temp___skip_constant_590 : bool) (temp___do_toplevel_591 : bool) (temp___do_typ_inv_592 : bool)  =
  (if (( temp___is_init_589 \/ (BV8.ule System__unsigned_types__bits_1.first System__unsigned_types__bits_1.last) )) then (
   (System__unsigned_types__bits_1.dynamic_property System__unsigned_types__bits_1.first System__unsigned_types__bits_1.last temp___expr_593)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_594 : BV8.t) (temp___skip_top_level_595 : bool)  =
  true

end

(* Module giving axioms for type "bits_2" defined at s-unstyp.ads:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__bits_2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        System__unsigned_types__bits_2

 predicate dynamic_invariant "inline" 
   (temp___expr_600 : BV8.t) (temp___is_init_596 : bool) (temp___skip_constant_597 : bool) (temp___do_toplevel_598 : bool) (temp___do_typ_inv_599 : bool)  =
  (if (( temp___is_init_596 \/ (BV8.ule System__unsigned_types__bits_2.first System__unsigned_types__bits_2.last) )) then (
   (System__unsigned_types__bits_2.dynamic_property System__unsigned_types__bits_2.first System__unsigned_types__bits_2.last temp___expr_600)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_601 : BV8.t) (temp___skip_top_level_602 : bool)  =
  true

end

(* Module giving axioms for type "bits_4" defined at s-unstyp.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__bits_4___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        System__unsigned_types__bits_4

 predicate dynamic_invariant "inline" 
   (temp___expr_607 : BV8.t) (temp___is_init_603 : bool) (temp___skip_constant_604 : bool) (temp___do_toplevel_605 : bool) (temp___do_typ_inv_606 : bool)  =
  (if (( temp___is_init_603 \/ (BV8.ule System__unsigned_types__bits_4.first System__unsigned_types__bits_4.last) )) then (
   (System__unsigned_types__bits_4.dynamic_property System__unsigned_types__bits_4.first System__unsigned_types__bits_4.last temp___expr_607)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_608 : BV8.t) (temp___skip_top_level_609 : bool)  =
  true

end

(* Module giving axioms for type "Tbytes_fP1" defined at s-unstyp.ads:97, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__Tbytes_fP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "bytes_f" defined at s-unstyp.ads:97, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__bytes_f___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__System__unsigned_types__packed_byte
 use        Array__Int__System__unsigned_types__packed_byte

 predicate dynamic_invariant "inline" 
   (temp___expr_614 : Array__Int__System__unsigned_types__packed_byte.map) (temp___is_init_610 : bool) (temp___skip_constant_611 : bool) (temp___do_toplevel_612 : bool) (temp___do_typ_inv_613 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_616 : Array__Int__System__unsigned_types__packed_byte.map) (temp___skip_top_level_617 : bool)  =
  true

end

(* Module giving axioms for type "packed_bytes" defined at s-unstyp.ads:212, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__packed_bytes___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        System__unsigned_types__packed_bytes

 predicate dynamic_invariant "inline" 
   (temp___expr_624 : System__unsigned_types__packed_bytes.packed_bytes) (temp___is_init_620 : bool) (temp___skip_constant_621 : bool) (temp___do_toplevel_622 : bool) (temp___do_typ_inv_623 : bool)  =
  (if (temp___skip_constant_621) then (
   true) else (
   (System__unsigned_types__packed_bytes.dynamic_property Standard__natural.first Standard__natural.last (System__unsigned_types__packed_bytes.first temp___expr_624) (System__unsigned_types__packed_bytes.last temp___expr_624))))

end

(* Module giving axioms for type "packed_bytes_unaligned" defined at s-unstyp.ads:213, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__unsigned_types__packed_bytes_unaligned___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        System__unsigned_types__packed_bytes_unaligned

 predicate dynamic_invariant "inline" 
   (temp___expr_630 : System__unsigned_types__packed_bytes_unaligned.packed_bytes_unaligned) (temp___is_init_626 : bool) (temp___skip_constant_627 : bool) (temp___do_toplevel_628 : bool) (temp___do_typ_inv_629 : bool)  =
  (if (temp___skip_constant_627) then (
   true) else (
   (System__unsigned_types__packed_bytes_unaligned.dynamic_property Standard__natural.first Standard__natural.last (System__unsigned_types__packed_bytes_unaligned.first temp___expr_630) (System__unsigned_types__packed_bytes_unaligned.last temp___expr_630))))

end

(* Module giving axioms for type "page_size" defined at x86-vm2.ads:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__page_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__page_size

 predicate dynamic_invariant "inline" 
   (temp___expr_636 : int) (temp___is_init_632 : bool) (temp___skip_constant_633 : bool) (temp___do_toplevel_634 : bool) (temp___do_typ_inv_635 : bool)  =
  (if (( temp___is_init_632 \/ (X86__vm2__page_size.first <= X86__vm2__page_size.last) )) then (
   (X86__vm2__page_size.dynamic_property X86__vm2__page_size.first X86__vm2__page_size.last temp___expr_636)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_637 : int) (temp___skip_top_level_638 : bool)  =
  true

end

(* Module giving axioms for type "Ttable_levelB" defined at x86-vm2.ads:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Ttable_levelB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "table_level" defined at x86-vm2.ads:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__table_level___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_level

 predicate dynamic_invariant "inline" 
   (temp___expr_643 : int) (temp___is_init_639 : bool) (temp___skip_constant_640 : bool) (temp___do_toplevel_641 : bool) (temp___do_typ_inv_642 : bool)  =
  (if (( temp___is_init_639 \/ (X86__vm2__table_level.first <= X86__vm2__table_level.last) )) then (
   (X86__vm2__table_level.dynamic_property X86__vm2__table_level.first X86__vm2__table_level.last temp___expr_643)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_644 : int) (temp___skip_top_level_645 : bool)  =
  true

end

(* Module giving axioms for type "Tflags_typeB" defined at x86-vm2.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Tflags_typeB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "flags_type" defined at x86-vm2.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__flags_type___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__flags_type

 predicate dynamic_invariant "inline" 
   (temp___expr_650 : BV64.t) (temp___is_init_646 : bool) (temp___skip_constant_647 : bool) (temp___do_toplevel_648 : bool) (temp___do_typ_inv_649 : bool)  =
  ( (if (( temp___is_init_646 \/ (BV64.ule X86__vm2__flags_type.first X86__vm2__flags_type.last) )) then (
   (X86__vm2__flags_type.dynamic_property X86__vm2__flags_type.first X86__vm2__flags_type.last temp___expr_650)) else true) /\ (if (temp___do_toplevel_648) then (
   (if (temp___is_init_646) then (
    (let temp___651 = temp___expr_650 in (
     ((BV64.bw_and temp___651 ( 4503599627366400 : BV64.t )) = ( 0 : BV64.t ))))
   ) else true)) else true) )
 
 predicate default_initial_assumption "inline" 
   (temp___expr_652 : BV64.t) (temp___skip_top_level_653 : bool)  =
  true
 
 predicate dynamic_predicate "inline" 
   (temp___654 : BV64.t)  =
  (let temp___655 = temp___654 in (
   ((BV64.bw_and temp___655 ( 4503599627366400 : BV64.t )) = ( 0 : BV64.t ))))


end

(* Module giving axioms for type "Tdirectory_refB" defined at x86-vm2.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Tdirectory_refB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "directory_ref" defined at x86-vm2.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__directory_ref___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__directory_ref

 predicate dynamic_invariant "inline" 
   (temp___expr_660 : int) (temp___is_init_656 : bool) (temp___skip_constant_657 : bool) (temp___do_toplevel_658 : bool) (temp___do_typ_inv_659 : bool)  =
  (if (( temp___is_init_656 \/ (X86__vm2__directory_ref.first <= X86__vm2__directory_ref.last) )) then (
   (X86__vm2__directory_ref.dynamic_property X86__vm2__directory_ref.first X86__vm2__directory_ref.last temp___expr_660)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_661 : int) (temp___skip_top_level_662 : bool)  =
  true

end

(* Module giving axioms for type "Ttable_entryB" defined at x86-vm2.ads:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Ttable_entryB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "table_entry" defined at x86-vm2.ads:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__table_entry___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__table_entry

 predicate dynamic_invariant "inline" 
   (temp___expr_681 : BV64.t) (temp___is_init_677 : bool) (temp___skip_constant_678 : bool) (temp___do_toplevel_679 : bool) (temp___do_typ_inv_680 : bool)  =
  (if (( temp___is_init_677 \/ (BV64.ule X86__vm2__table_entry.first X86__vm2__table_entry.last) )) then (
   (X86__vm2__table_entry.dynamic_property X86__vm2__table_entry.first X86__vm2__table_entry.last temp___expr_681)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_682 : BV64.t) (temp___skip_top_level_683 : bool)  =
  true

end

(* Module giving axioms for type "Ttable_indexB" defined at x86-vm2.ads:57, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Ttable_indexB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "table_index" defined at x86-vm2.ads:57, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__table_index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__table_index

 predicate dynamic_invariant "inline" 
   (temp___expr_688 : int) (temp___is_init_684 : bool) (temp___skip_constant_685 : bool) (temp___do_toplevel_686 : bool) (temp___do_typ_inv_687 : bool)  =
  (if (( temp___is_init_684 \/ (X86__vm2__table_index.first <= X86__vm2__table_index.last) )) then (
   (X86__vm2__table_index.dynamic_property X86__vm2__table_index.first X86__vm2__table_index.last temp___expr_688)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_689 : int) (temp___skip_top_level_690 : bool)  =
  true

end

(* Module giving axioms for type "TtableB" defined at x86-vm2.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__TtableB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "table" defined at x86-vm2.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__table___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__vm2__table_entry
 use        Array__Int__X86__vm2__table_entry

 predicate dynamic_invariant "inline" 
   (temp___expr_695 : Array__Int__X86__vm2__table_entry.map) (temp___is_init_691 : bool) (temp___skip_constant_692 : bool) (temp___do_toplevel_693 : bool) (temp___do_typ_inv_694 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_697 : Array__Int__X86__vm2__table_entry.map) (temp___skip_top_level_698 : bool)  =
  true

end

(* Module giving axioms for type "Ttable_addressB" defined at x86-vm2.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Ttable_addressB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "table_address" defined at x86-vm2.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__table_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__table
 use        X86__vm2__table_address

 predicate dynamic_invariant "inline" 
   (temp___expr_705 : BV64.t) (temp___is_init_701 : bool) (temp___skip_constant_702 : bool) (temp___do_toplevel_703 : bool) (temp___do_typ_inv_704 : bool)  =
  (if (( temp___is_init_701 \/ (BV64.ule (X86__vm2__table_address.first ) (X86__vm2__table_address.last )) )) then (
   (X86__vm2__table_address.dynamic_property (X86__vm2__table_address.first ) (X86__vm2__table_address.last ) temp___expr_705)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_706 : BV64.t) (temp___skip_top_level_707 : bool)  =
  true
 
 axiom last__def_axiom :
  ((X86__vm2__table_address.last ) = (BV64.sub (BV64.add ( 2097152 : BV64.t ) (BV64.mul ( 2097152 : BV64.t ) (BV64.of_int X86__vm2__table.value__size))) ( 1 : BV64.t )))

end

(* Module giving axioms for type "Ttable_offsetsB" defined at x86-vm2.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Ttable_offsetsB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "table_offsets" defined at x86-vm2.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__table_offsets___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__X86__vm2__table_index
 use        Array__Int__X86__vm2__table_index

 predicate dynamic_invariant "inline" 
   (temp___expr_712 : Array__Int__X86__vm2__table_index.map) (temp___is_init_708 : bool) (temp___skip_constant_709 : bool) (temp___do_toplevel_710 : bool) (temp___do_typ_inv_711 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_714 : Array__Int__X86__vm2__table_index.map) (temp___skip_top_level_715 : bool)  =
  true

end

(* Module giving axioms for type "TtablesB" defined at x86-vm2.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__TtablesB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "tables" defined at x86-vm2.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__tables___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Common__address
 use        Array__Int__Common__address

 predicate dynamic_invariant "inline" 
   (temp___expr_722 : Array__Int__Common__address.map) (temp___is_init_718 : bool) (temp___skip_constant_719 : bool) (temp___do_toplevel_720 : bool) (temp___do_typ_inv_721 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_724 : Array__Int__Common__address.map) (temp___skip_top_level_725 : bool)  =
  true

end

(* Module giving axioms for type "Tpage_bit_arrayD1" defined at x86-vm2.ads:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Tpage_bit_arrayD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tpage_bit_arrayB" defined at x86-vm2.ads:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__Tpage_bit_arrayB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "page_bit_array" defined at x86-vm2.ads:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__page_bit_array___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool
 use        Array__Int__Bool

 predicate dynamic_invariant "inline" 
   (temp___expr_732 : Array__Int__Bool.map) (temp___is_init_728 : bool) (temp___skip_constant_729 : bool) (temp___do_toplevel_730 : bool) (temp___do_typ_inv_731 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_734 : Array__Int__Bool.map) (temp___skip_top_level_735 : bool)  =
  true

end

(* Module giving axioms for type "TdirectoriesB" defined at x86-vm2.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__TdirectoriesB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TdirectoriesT" defined at x86-vm2.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__TdirectoriesT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TshiftsB" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__TshiftsB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TshiftsT" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__TshiftsT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6b" defined at x86-vm2.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__T6b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at x86-vm2.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__get_free_dir_page__L_1__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16b" defined at x86-vm2.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__get_free_dir_page__L_1__L15b__T16b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14b" defined at x86-vm2.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module X86__vm2__get_free_dir_page__L_1__L13b__T14b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "system_name" defined at system.ads:70, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:115, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:120, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = ( 0 : BV64.t ))

end

(* Module for defining the value of constant "atomic_sync_default" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__atomic_sync_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__atomic_sync_default

 axiom atomic_sync_default__def_axiom :
  ((System__atomic_sync_default.atomic_sync_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:147, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:148, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "denorm" defined at system.ads:149, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:150, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:151, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:152, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:153, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:154, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:155, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:156, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:157, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:158, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:159, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:160, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:161, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:162, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:163, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:164, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:166, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:167, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:168, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:169, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:170, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "no_input_operands" defined at s-maccod.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_code__no_input_operands___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__no_input_operands

 axiom no_input_operands__def_axiom :
  ((System__machine_code__no_input_operands.no_input_operands ) = 0)

end

(* Module for defining the value of constant "no_output_operands" defined at s-maccod.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_code__no_output_operands___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__machine_code__no_output_operands

 axiom no_output_operands__def_axiom :
  ((System__machine_code__no_output_operands.no_output_operands ) = 0)

end

(* Module for defining the value of constant "null_address" defined at common.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Common__null_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Common__null_address

 axiom null_address__def_axiom :
  ((Common__null_address.null_address ) = ( 0 : BV64.t ))

end

(* Module for defining the value of constant "width" defined at console.ads:7, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Console__width___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Console__width

 axiom width__def_axiom :
  ((Console__width.width ) = 80)

end

(* Module for defining the value of constant "height" defined at console.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Console__height___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Console__height

 axiom height__def_axiom :
  ((Console__height.height ) = 25)

end

(* Module for defining the value of constant "lf" defined at console.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Console__lf___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Console__lf

 axiom lf__def_axiom :
  ((Console__lf.lf ) = 10)

end

(* Module for defining the value of constant "max_allocations" defined at mmap.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Mmap__max_allocations___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Mmap__max_allocations

 axiom max_allocations__def_axiom :
  ((Mmap__max_allocations.max_allocations ) = 4000)

end

(* Module for defining the value of constant "null_character" defined at x86-dev-keyboard.ads:7, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__null_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__dev__keyboard__null_character

 axiom null_character__def_axiom :
  ((X86__dev__keyboard__null_character.null_character ) = 0)

end

(* Module for defining the value of constant "backspace" defined at x86-dev-keyboard.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__backspace___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__dev__keyboard__backspace

 axiom backspace__def_axiom :
  ((X86__dev__keyboard__backspace.backspace ) = 8)

end

(* Module for defining the value of constant "tab" defined at x86-dev-keyboard.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__tab___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__dev__keyboard__tab

 axiom tab__def_axiom :
  ((X86__dev__keyboard__tab.tab ) = 9)

end

(* Module for defining the value of constant "lf" defined at x86-dev-keyboard.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__lf___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__dev__keyboard__lf

 axiom lf__def_axiom :
  ((X86__dev__keyboard__lf.lf ) = 10)

end

(* Module for defining the value of constant "num_row" defined at x86-dev-keyboard.ads:12, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__num_row___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        X86__dev__keyboard__num_row
 use        Temp___String_Literal_159
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom num_row__def_axiom :
  ((X86__dev__keyboard__num_row.num_row ) = (Standard__string.of_array (Temp___String_Literal_159.temp___String_Literal_159 ()) 1 12))

end

(* Module for defining the value of constant "first_row" defined at x86-dev-keyboard.ads:13, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__first_row___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        X86__dev__keyboard__first_row
 use        Temp___String_Literal_160
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom first_row__def_axiom :
  ((X86__dev__keyboard__first_row.first_row ) = (Standard__string.of_array (Temp___String_Literal_160.temp___String_Literal_160 ()) 1 12))

end

(* Module for defining the value of constant "second_row" defined at x86-dev-keyboard.ads:14, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__second_row___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        X86__dev__keyboard__second_row
 use        Temp___String_Literal_161
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom second_row__def_axiom :
  ((X86__dev__keyboard__second_row.second_row ) = (Standard__string.of_array (Temp___String_Literal_161.temp___String_Literal_161 ()) 1 12))

end

(* Module for defining the value of constant "third_row" defined at x86-dev-keyboard.ads:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__third_row___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        X86__dev__keyboard__third_row
 use        Temp___String_Literal_162
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom third_row__def_axiom :
  ((X86__dev__keyboard__third_row.third_row ) = (Standard__string.of_array (Temp___String_Literal_162.temp___String_Literal_162 ()) 1 11))

end

(* Module for defining the value of constant "command_port" defined at x86-dev-keyboard.ads:27, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__command_port___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        X86__dev__keyboard__command_port

 axiom command_port__def_axiom :
  ((X86__dev__keyboard__command_port.command_port ) = ( 100 : BV16.t ))

end

(* Module for defining the value of constant "data_port" defined at x86-dev-keyboard.ads:28, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__dev__keyboard__data_port___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        X86__dev__keyboard__data_port

 axiom data_port__def_axiom :
  ((X86__dev__keyboard__data_port.data_port ) = ( 96 : BV16.t ))

end

(* Module for defining the value of the aggregate at x86-vm2.adb:16, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module X86__vm2__shifts__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural___axiom
 use        Array__Int__Standard__natural
 use        X86__vm2__shifts__aggregate_def
 use        Array__Int__Standard__natural

 axiom def_axiom :
  (forall temp___171   temp___172   temp___173   temp___174   : int.
   (let temp___170 = (X86__vm2__shifts__aggregate_def.x86__vm2__shifts__aggregate_def temp___171 temp___172 temp___173 temp___174) in (
    (if (( ( ( (Standard__natural___axiom.dynamic_invariant temp___171 True True True True) /\ (Standard__natural___axiom.dynamic_invariant temp___172 True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant temp___173 True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant temp___174 True True True True) )) then (
     ( ( ( ((Array__Int__Standard__natural.get temp___170 1) = ( 12 : Standard__natural.natural )) /\ ((Array__Int__Standard__natural.get temp___170 2) = ( 21 : Standard__natural.natural )) ) /\ ((Array__Int__Standard__natural.get temp___170 3) = ( 30 : Standard__natural.natural )) ) /\ ((Array__Int__Standard__natural.get temp___170 4) = ( 39 : Standard__natural.natural )) )) else true)))
  )

end

(* Module for defining the value of constant "shifts" defined at x86-vm2.adb:16, created in Gnat2Why.Decls.Translate_Constant_Value *)
module X86__vm2__shifts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__shifts
 use        Array__Int__Standard__natural
 use        X86__vm2__shifts__aggregate_def
 use        Array__Int__Standard__natural

 axiom shifts__def_axiom :
  ((X86__vm2__shifts.shifts ) = (X86__vm2__shifts__aggregate_def.x86__vm2__shifts__aggregate_def 12 21 30 39))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:100, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Olt
 use        System__address___axiom

 val olt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Olt.olt left right)) /\ true ) /\ true ) }
 
 axiom olt__post_axiom :
  (forall left   right   : BV64.t [(System__Olt.olt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Olt.olt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ole
 use        System__address___axiom

 val ole 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ole.ole left right)) /\ true ) /\ true ) }
 
 axiom ole__post_axiom :
  (forall left   right   : BV64.t [(System__Ole.ole left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ole.ole left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:102, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ogt
 use        System__address___axiom

 val ogt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ogt.ogt left right)) /\ true ) /\ true ) }
 
 axiom ogt__post_axiom :
  (forall left   right   : BV64.t [(System__Ogt.ogt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ogt.ogt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:103, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oge
 use        System__address___axiom

 val oge 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oge.oge left right)) /\ true ) /\ true ) }
 
 axiom oge__post_axiom :
  (forall left   right   : BV64.t [(System__Oge.oge left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oge.oge left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oeq
 use        System__address___axiom

 val oeq 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oeq.oeq left right)) /\ true ) /\ true ) }
 
 axiom oeq__post_axiom :
  (forall left   right   : BV64.t [(System__Oeq.oeq left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oeq.oeq left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "asm" defined at s-maccod.ads:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        System__machine_code__asm_input_operand_list
 use        System__machine_code__asm_output_operand_list

 val asm 
   (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "asm__2" defined at s-maccod.ads:69, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        System__machine_code__asm_input_operand_list

 val asm__2 
   (template : Standard__string.string) (outputs : int) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "asm__3" defined at s-maccod.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        System__machine_code__asm_output_operand_list

 val asm__3 
   (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : int) (clobber : Standard__string.string) (volatile : bool) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "asm__4" defined at s-maccod.ads:83, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val asm__4 
   (template : Standard__string.string) (outputs : int) (inputs : int) (clobber : Standard__string.string) (volatile : bool) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "asm__5" defined at s-maccod.ads:90, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm__5___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__machine_code__asm__5
 use        System__machine_code__asm_input_operand_list
 use        System__machine_code__asm_input_operand_list___axiom
 use        System__machine_code__asm_output_operand_list
 use        System__machine_code__asm_output_operand_list___axiom
 use        System__machine_code__asm_insn___axiom

 val asm__5 
   (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) : int
  requires {  true }
  ensures {  ( ( (result = (System__machine_code__asm__5.asm__5 template outputs inputs clobber volatile)) /\ true ) /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) }
 
 axiom asm__5__post_axiom :
  (forall template   clobber   : Standard__string.string.
  (forall outputs   : System__machine_code__asm_output_operand_list.asm_output_operand_list.
  (forall inputs   : System__machine_code__asm_input_operand_list.asm_input_operand_list.
  (forall volatile   : bool [(System__machine_code__asm__5.asm__5 template outputs inputs clobber volatile)].
   ( ( ( ( (Standard__string___axiom.dynamic_invariant template True True True True) /\ (System__machine_code__asm_output_operand_list___axiom.dynamic_invariant outputs True True True True) ) /\ (System__machine_code__asm_input_operand_list___axiom.dynamic_invariant inputs True True True True) ) /\ (Standard__string___axiom.dynamic_invariant clobber True True True True) ) -> (let result = (System__machine_code__asm__5.asm__5 template outputs inputs clobber volatile) in (
    ( ( true /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))))

end

(* Module for declaring a program function (and possibly an axiom) for "asm__6" defined at s-maccod.ads:97, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm__6___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__machine_code__asm__6
 use        System__machine_code__asm_output_operand___axiom
 use        System__machine_code__asm_input_operand_list
 use        System__machine_code__asm_input_operand_list___axiom
 use        System__machine_code__asm_insn___axiom

 val asm__6 
   (template : Standard__string.string) (outputs : int) (inputs : System__machine_code__asm_input_operand_list.asm_input_operand_list) (clobber : Standard__string.string) (volatile : bool) : int
  requires {  true }
  ensures {  ( ( (result = (System__machine_code__asm__6.asm__6 template outputs inputs clobber volatile)) /\ true ) /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) }
 
 axiom asm__6__post_axiom :
  (forall template   clobber   : Standard__string.string.
  (forall outputs   : int.
  (forall inputs   : System__machine_code__asm_input_operand_list.asm_input_operand_list.
  (forall volatile   : bool [(System__machine_code__asm__6.asm__6 template outputs inputs clobber volatile)].
   ( ( ( ( (Standard__string___axiom.dynamic_invariant template True True True True) /\ (System__machine_code__asm_output_operand___axiom.dynamic_invariant outputs True True True True) ) /\ (System__machine_code__asm_input_operand_list___axiom.dynamic_invariant inputs True True True True) ) /\ (Standard__string___axiom.dynamic_invariant clobber True True True True) ) -> (let result = (System__machine_code__asm__6.asm__6 template outputs inputs clobber volatile) in (
    ( ( true /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))))

end

(* Module for declaring a program function (and possibly an axiom) for "asm__7" defined at s-maccod.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm__7___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__machine_code__asm__7
 use        System__machine_code__asm_input_operand___axiom
 use        System__machine_code__asm_output_operand_list
 use        System__machine_code__asm_output_operand_list___axiom
 use        System__machine_code__asm_insn___axiom

 val asm__7 
   (template : Standard__string.string) (outputs : System__machine_code__asm_output_operand_list.asm_output_operand_list) (inputs : int) (clobber : Standard__string.string) (volatile : bool) : int
  requires {  true }
  ensures {  ( ( (result = (System__machine_code__asm__7.asm__7 template outputs inputs clobber volatile)) /\ true ) /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) }
 
 axiom asm__7__post_axiom :
  (forall template   clobber   : Standard__string.string.
  (forall outputs   : System__machine_code__asm_output_operand_list.asm_output_operand_list.
  (forall inputs   : int.
  (forall volatile   : bool [(System__machine_code__asm__7.asm__7 template outputs inputs clobber volatile)].
   ( ( ( ( (Standard__string___axiom.dynamic_invariant template True True True True) /\ (System__machine_code__asm_output_operand_list___axiom.dynamic_invariant outputs True True True True) ) /\ (System__machine_code__asm_input_operand___axiom.dynamic_invariant inputs True True True True) ) /\ (Standard__string___axiom.dynamic_invariant clobber True True True True) ) -> (let result = (System__machine_code__asm__7.asm__7 template outputs inputs clobber volatile) in (
    ( ( true /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))))

end

(* Module for declaring a program function (and possibly an axiom) for "asm__8" defined at s-maccod.ads:111, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__machine_code__asm__8___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__machine_code__asm__8
 use        System__machine_code__asm_input_operand___axiom
 use        System__machine_code__asm_output_operand___axiom
 use        System__machine_code__asm_insn___axiom

 val asm__8 
   (template : Standard__string.string) (outputs : int) (inputs : int) (clobber : Standard__string.string) (volatile : bool) : int
  requires {  true }
  ensures {  ( ( (result = (System__machine_code__asm__8.asm__8 template outputs inputs clobber volatile)) /\ true ) /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) }
 
 axiom asm__8__post_axiom :
  (forall template   clobber   : Standard__string.string.
  (forall outputs   inputs   : int.
  (forall volatile   : bool [(System__machine_code__asm__8.asm__8 template outputs inputs clobber volatile)].
   ( ( ( ( (Standard__string___axiom.dynamic_invariant template True True True True) /\ (System__machine_code__asm_output_operand___axiom.dynamic_invariant outputs True True True True) ) /\ (System__machine_code__asm_input_operand___axiom.dynamic_invariant inputs True True True True) ) /\ (Standard__string___axiom.dynamic_invariant clobber True True True True) ) -> (let result = (System__machine_code__asm__8.asm__8 template outputs inputs clobber volatile) in (
    ( ( true /\ (System__machine_code__asm_insn___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "scout_memory" defined at arch.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Arch__scout_memory___axiom
 use        Multiboot__boot_info
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__unsigned_64___axiom
 use        Common__address___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Multiboot__boot_info
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val scout_memory 
   (base : BV64.t__ref) (size : BV64.t__ref) (debug : bool) : unit
  requires {  true }
  ensures {  ( (Common__address___axiom.dynamic_invariant base.BV64.t__content True True True True) /\ (Interfaces__unsigned_64___axiom.dynamic_invariant size.BV64.t__content True True True True) ) }
  reads {Multiboot__boot_info.boot_info, Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg, base, size}

end

(* Module for declaring a program function (and possibly an axiom) for "initialise_interrupts" defined at arch.ads:19, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Arch__initialise_interrupts___axiom
 use        X86__dev__rtc__data_port
 use        X86__interrupts__handler_table
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        X86__interrupts__table
 use        Console__current_fg
 use        Console__current_bg
 use        X86__dev__rtc__selector_port
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__interrupts__table
 use        X86__interrupts__idt_entry
 use        X86__interrupts__idt_entry___axiom
 use        X86__interrupts__TtableD1
 use        Array__Int__X86__interrupts__idt_entry
 use        Array__Int__X86__interrupts__idt_entry
 use        X86__interrupts__handler_table
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        X86__dev__rtc__data_port
 use        X86__interrupts__handler_table
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        X86__dev__rtc__selector_port

 val initialise_interrupts 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  (forall temp___393   : int.
   (if (( (X86__interrupts__TtableD1.first <= temp___393) /\ (temp___393 <= X86__interrupts__TtableD1.last) )) then (
    (X86__interrupts__idt_entry___axiom.dynamic_invariant (Array__Int__X86__interrupts__idt_entry.get X86__interrupts__table.table.Array__Int__X86__interrupts__idt_entry.map__content temp___393) True False True True)) else true)) }
  reads {X86__dev__rtc__data_port.data_port, X86__interrupts__handler_table.handler_table, Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg, X86__interrupts__table.table, X86__dev__rtc__selector_port.selector_port}
  writes {X86__interrupts__handler_table.handler_table, Console__x.x, Console__vmem.vmem, Console__y.y, X86__interrupts__table.table}

end

(* Module for declaring a program function (and possibly an axiom) for "io_inb" defined at arch.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Arch__io_inb___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        "_gnatprove_standard".BV16
 use        Arch__io_inb
 use        Interfaces__unsigned_8___axiom

 val io_inb 
   (port : BV16.t) : BV8.t
  requires {  true }
  ensures {  ( ( (result = (Arch__io_inb.io_inb port)) /\ (Arch__io_inb.io_inb__function_guard result port) ) /\ (Interfaces__unsigned_8___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "io_outb" defined at arch.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Arch__io_outb___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        "_gnatprove_standard".BV16

 val io_outb 
   (port : BV16.t) (data : BV8.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "cr3_address" defined at arch.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Arch__cr3_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Arch__cr3_address
 use        Common__physical_address___axiom

 val cr3_address 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Arch__cr3_address.cr3_address ())) /\ (Arch__cr3_address.cr3_address__function_guard result ()) ) /\ (Common__physical_address___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "at_x" defined at console.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__at_x___axiom
 use        Console__x
 use import "_gnatprove_standard".Main
 use        Console__x
 use        Console__x

 val at_x 
   (x : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x}
  writes {Console__x.x}

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at console.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put 
   (c : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at console.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put__2___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put__2 
   (s : Standard__string.string) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at console.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put__3___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put__3 
   (n : BV64.t) (base : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at console.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put__4___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put__4 
   (n : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "put_hex" defined at console.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put_hex___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put_hex 
   (n : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "put_hex__2" defined at console.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put_hex__2___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put_hex__2 
   (n : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "put_size" defined at console.ads:41, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put_size___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put_size 
   (n : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at console.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__put_line___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val put_line 
   (s : Standard__string.string) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y}

end

(* Module for declaring a program function (and possibly an axiom) for "banner" defined at console.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__banner___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val banner 
   (s : Standard__string.string) (fg : int) (bg : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "set_colour" defined at console.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__set_colour___axiom
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Console__current_fg
 use        Console__current_bg
 use        Console__current_fg
 use        Console__current_bg

 val set_colour 
   (fg : int) (bg : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "clear" defined at console.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__clear___axiom
 use        Console__vmem
 use import "_gnatprove_standard".Main
 use        Console__vmem
 use        Console__vmem

 val clear 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Console__vmem.vmem}
  writes {Console__vmem.vmem}

end

(* Module for declaring a program function (and possibly an axiom) for "shift_lines" defined at console.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Console__shift_lines___axiom
 use        Console__vmem
 use import "_gnatprove_standard".Main
 use        Console__vmem
 use        Console__vmem

 val shift_lines 
   (num : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__vmem.vmem}
  writes {Console__vmem.vmem}

end

(* Module for declaring a program function (and possibly an axiom) for "slow_handler" defined at x86-interrupts.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__interrupts__slow_handler___axiom
 use        X86__interrupts__handler_table
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__interrupts__handler_table
 use        X86__interrupts__handler_table

 val slow_handler 
   (irq : int) (handler : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {X86__interrupts__handler_table.handler_table}
  writes {X86__interrupts__handler_table.handler_table}

end

(* Module for declaring a program function (and possibly an axiom) for "register_handler" defined at x86-interrupts.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__interrupts__register_handler___axiom
 use        X86__interrupts__table
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        X86__interrupts__table
 use        X86__interrupts__idt_entry
 use        X86__interrupts__idt_entry___axiom
 use        X86__interrupts__TtableD1
 use        Array__Int__X86__interrupts__idt_entry
 use        Array__Int__X86__interrupts__idt_entry

 val register_handler 
   (irq : int) (handler : BV64.t) : unit
  requires {  true }
  ensures {  (forall temp___444   : int.
   (if (( (X86__interrupts__TtableD1.first <= temp___444) /\ (temp___444 <= X86__interrupts__TtableD1.last) )) then (
    (X86__interrupts__idt_entry___axiom.dynamic_invariant (Array__Int__X86__interrupts__idt_entry.get X86__interrupts__table.table.Array__Int__X86__interrupts__idt_entry.map__content temp___444) True False True True)) else true)) }
  reads {X86__interrupts__table.table}
  writes {X86__interrupts__table.table}

end

(* Module for declaring a program function (and possibly an axiom) for "lastchance" defined at error.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Error__lastchance___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val lastchance 
   (msg : Standard__string.string) (line : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "exception_handler" defined at error.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Error__exception_handler___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val exception_handler 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "panic" defined at error.ads:19, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Error__panic___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val panic 
   (s : Standard__string.string) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "Oadd" defined at s-stoele.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__storage_elements__Oadd___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__Oadd
 use        System__address___axiom
 use        System__storage_elements__storage_offset___axiom

 val oadd 
   (left : BV64.t) (right : int) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__storage_elements__Oadd.oadd left right)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom oadd__post_axiom :
  (forall left   : BV64.t.
  (forall right   : int [(System__storage_elements__Oadd.oadd left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__storage_elements__storage_offset___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__storage_elements__Oadd.oadd left right) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Oadd__2" defined at s-stoele.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__storage_elements__Oadd__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__Oadd__2
 use        System__address___axiom
 use        System__storage_elements__storage_offset___axiom

 val oadd__2 
   (left : int) (right : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__storage_elements__Oadd__2.oadd__2 left right)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom oadd__2__post_axiom :
  (forall left   : int.
  (forall right   : BV64.t [(System__storage_elements__Oadd__2.oadd__2 left right)].
   ( ( (System__storage_elements__storage_offset___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__storage_elements__Oadd__2.oadd__2 left right) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Osubtract" defined at s-stoele.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__storage_elements__Osubtract___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__Osubtract
 use        System__address___axiom
 use        System__storage_elements__storage_offset___axiom

 val osubtract 
   (left : BV64.t) (right : int) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__storage_elements__Osubtract.osubtract left right)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom osubtract__post_axiom :
  (forall left   : BV64.t.
  (forall right   : int [(System__storage_elements__Osubtract.osubtract left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__storage_elements__storage_offset___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__storage_elements__Osubtract.osubtract left right) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Osubtract__2" defined at s-stoele.ads:91, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__storage_elements__Osubtract__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__Osubtract__2
 use        System__address___axiom
 use        System__storage_elements__storage_offset___axiom

 val osubtract__2 
   (left : BV64.t) (right : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__storage_elements__Osubtract__2.osubtract__2 left right)) /\ true ) /\ (System__storage_elements__storage_offset___axiom.dynamic_invariant result True False True True) ) }
 
 axiom osubtract__2__post_axiom :
  (forall left   right   : BV64.t [(System__storage_elements__Osubtract__2.osubtract__2 left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__storage_elements__Osubtract__2.osubtract__2 left right) in (
    ( ( true /\ (System__storage_elements__storage_offset___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Omod" defined at s-stoele.ads:96, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__storage_elements__Omod___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__Omod
 use        System__address___axiom
 use        System__storage_elements__storage_offset___axiom

 val omod 
   (left : BV64.t) (right : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__storage_elements__Omod.omod left right)) /\ true ) /\ (System__storage_elements__storage_offset___axiom.dynamic_invariant result True False True True) ) }
 
 axiom omod__post_axiom :
  (forall left   : BV64.t.
  (forall right   : int [(System__storage_elements__Omod.omod left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__storage_elements__storage_offset___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__storage_elements__Omod.omod left right) in (
    ( ( true /\ (System__storage_elements__storage_offset___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "to_address" defined at s-stoele.ads:107, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__storage_elements__to_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__to_address
 use        System__address___axiom
 use        System__storage_elements__integer_address___axiom

 val to_address 
   (value : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__storage_elements__to_address.to_address value)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom to_address__post_axiom :
  (forall value   : BV64.t [(System__storage_elements__to_address.to_address value)].
   ( (System__storage_elements__integer_address___axiom.dynamic_invariant value True True True True) -> (let result = (System__storage_elements__to_address.to_address value) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_integer" defined at s-stoele.ads:112, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__storage_elements__to_integer___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__storage_elements__to_integer
 use        System__address___axiom
 use        System__storage_elements__integer_address___axiom

 val to_integer 
   (value : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__storage_elements__to_integer.to_integer value)) /\ true ) /\ (System__storage_elements__integer_address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom to_integer__post_axiom :
  (forall value   : BV64.t [(System__storage_elements__to_integer.to_integer value)].
   ( (System__address___axiom.dynamic_invariant value True True True True) -> (let result = (System__storage_elements__to_integer.to_integer value) in (
    ( ( true /\ (System__storage_elements__integer_address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "allocate" defined at mmap.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mmap__allocate___axiom
 use        Mmap__head
 use        Mmap__tail
 use        Mmap__free_nodes
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Mmap__allocate
 use        Common__address___axiom
 use        Mmap__free_nodes
 use        Mmap__head
 use        Mmap__tail
 use        Mmap__free_nodes
 use        Mmap__head
 use        Mmap__tail
 use        Mmap__free_nodes

 val allocate 
   (size : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Mmap__allocate.allocate size Mmap__head.head.Main.__private__content Mmap__tail.tail.Main.__private__content Mmap__free_nodes.free_nodes.Main.__private__content)) /\ (Mmap__allocate.allocate__function_guard result size Mmap__head.head.Main.__private__content Mmap__tail.tail.Main.__private__content Mmap__free_nodes.free_nodes.Main.__private__content) ) /\ (Common__address___axiom.dynamic_invariant result True False True True) ) }
  reads {Mmap__head.head, Mmap__tail.tail, Mmap__free_nodes.free_nodes}
  writes {Mmap__free_nodes.free_nodes}

end

(* Module for declaring a program function (and possibly an axiom) for "free" defined at mmap.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mmap__free___axiom
 use        Mmap__head
 use        Mmap__tail
 use        Mmap__free_nodes
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Mmap__free_nodes
 use        Mmap__head
 use        Mmap__tail
 use        Mmap__free_nodes

 val free 
   (base : BV64.t) (length : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {Mmap__head.head, Mmap__tail.tail, Mmap__free_nodes.free_nodes}
  writes {Mmap__free_nodes.free_nodes}

end

(* Module for declaring a program function (and possibly an axiom) for "initialise" defined at mmap.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mmap__initialise___axiom
 use        Mmap__tail
 use        Mmap__free_nodes
 use        Mmap__address_base
 use        Mmap__allocation_unit
 use        Mmap__max_length
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Mmap__free_nodes
 use        Mmap__address_base
 use        Mmap__allocation_unit
 use        Mmap__max_length
 use        Mmap__tail
 use        Mmap__free_nodes
 use        Mmap__address_base
 use        Mmap__allocation_unit
 use        Mmap__max_length

 val initialise 
   (base : BV64.t) (length : BV64.t) (unit__ : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {Mmap__tail.tail, Mmap__free_nodes.free_nodes, Mmap__address_base.address_base, Mmap__allocation_unit.allocation_unit, Mmap__max_length.max_length}
  writes {Mmap__free_nodes.free_nodes, Mmap__address_base.address_base, Mmap__allocation_unit.allocation_unit, Mmap__max_length.max_length}

end

(* Module for declaring a program function (and possibly an axiom) for "print" defined at mmap.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mmap__print___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Mmap__head
 use        Console__current_fg
 use        Mmap__tail
 use        Console__current_bg
 use        Mmap__free_nodes
 use import "_gnatprove_standard".Main
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Mmap__head
 use        Console__current_bg
 use        Mmap__tail
 use        Mmap__free_nodes

 val print 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Mmap__head.head, Console__current_bg.current_bg, Mmap__tail.tail, Mmap__free_nodes.free_nodes}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "get_base" defined at mmap.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mmap__get_base___axiom
 use        Mmap__address_base
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Mmap__get_base
 use        Common__address___axiom
 use        Mmap__address_base
 use        Mmap__address_base

 val get_base 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Mmap__get_base.get_base Mmap__address_base.address_base.Main.__private__content)) /\ (Mmap__get_base.get_base__function_guard result Mmap__address_base.address_base.Main.__private__content) ) /\ (Common__address___axiom.dynamic_invariant result True False True True) ) }
  reads {Mmap__address_base.address_base}

end

(* Module for declaring a program function (and possibly an axiom) for "get_length" defined at mmap.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mmap__get_length___axiom
 use        Mmap__max_length
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Mmap__get_length
 use        Interfaces__unsigned_64___axiom
 use        Mmap__max_length
 use        Mmap__max_length

 val get_length 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Mmap__get_length.get_length Mmap__max_length.max_length.Main.__private__content)) /\ (Mmap__get_length.get_length__function_guard result Mmap__max_length.max_length.Main.__private__content) ) /\ (Interfaces__unsigned_64___axiom.dynamic_invariant result True False True True) ) }
  reads {Mmap__max_length.max_length}

end

(* Module for declaring a program function (and possibly an axiom) for "handler" defined at x86-dev-keyboard.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__dev__keyboard__handler___axiom
 use        X86__dev__keyboard__buffer
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__ticks
 use        X86__dev__keyboard__caps_lock
 use        X86__dev__keyboard__shifts
 use        X86__dev__keyboard__has_line_flag
 use import "_gnatprove_standard".Main
 use        X86__dev__keyboard__buffer
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__ticks
 use        X86__dev__keyboard__caps_lock
 use        X86__dev__keyboard__shifts
 use        X86__dev__keyboard__has_line_flag
 use        X86__dev__keyboard__buffer
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__ticks
 use        X86__dev__keyboard__caps_lock
 use        X86__dev__keyboard__shifts
 use        X86__dev__keyboard__has_line_flag

 val handler 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {X86__dev__keyboard__buffer.buffer, X86__dev__keyboard__write_head.write_head, X86__dev__keyboard__ticks.ticks, X86__dev__keyboard__caps_lock.caps_lock, X86__dev__keyboard__shifts.shifts, X86__dev__keyboard__has_line_flag.has_line_flag}
  writes {X86__dev__keyboard__buffer.buffer, X86__dev__keyboard__write_head.write_head, X86__dev__keyboard__ticks.ticks, X86__dev__keyboard__caps_lock.caps_lock, X86__dev__keyboard__shifts.shifts, X86__dev__keyboard__has_line_flag.has_line_flag}

end

(* Module for declaring a program function (and possibly an axiom) for "get_character" defined at x86-dev-keyboard.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__dev__keyboard__get_character___axiom
 use        X86__dev__keyboard__buffer
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        X86__dev__keyboard__get_character
 use        X86__dev__keyboard__read_tail
 use        X86__dev__keyboard__buffer
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use        X86__dev__keyboard__buffer
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail

 val get_character 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (X86__dev__keyboard__get_character.get_character X86__dev__keyboard__buffer.buffer.Main.__private__content X86__dev__keyboard__write_head.write_head.Main.__private__content X86__dev__keyboard__read_tail.read_tail.Main.__private__content)) /\ (X86__dev__keyboard__get_character.get_character__function_guard result X86__dev__keyboard__buffer.buffer.Main.__private__content X86__dev__keyboard__write_head.write_head.Main.__private__content X86__dev__keyboard__read_tail.read_tail.Main.__private__content) ) /\ (Standard__character___axiom.dynamic_invariant result True False True True) ) }
  reads {X86__dev__keyboard__buffer.buffer, X86__dev__keyboard__write_head.write_head, X86__dev__keyboard__read_tail.read_tail}
  writes {X86__dev__keyboard__read_tail.read_tail}

end

(* Module for declaring a program function (and possibly an axiom) for "get_ticks" defined at x86-dev-keyboard.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__dev__keyboard__get_ticks___axiom
 use        X86__dev__keyboard__ticks
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__dev__keyboard__get_ticks
 use        Interfaces__unsigned_64___axiom
 use        X86__dev__keyboard__ticks
 use        X86__dev__keyboard__ticks

 val get_ticks 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (X86__dev__keyboard__get_ticks.get_ticks X86__dev__keyboard__ticks.ticks.Main.__private__content)) /\ (X86__dev__keyboard__get_ticks.get_ticks__function_guard result X86__dev__keyboard__ticks.ticks.Main.__private__content) ) /\ (Interfaces__unsigned_64___axiom.dynamic_invariant result True False True True) ) }
  reads {X86__dev__keyboard__ticks.ticks}

end

(* Module for declaring a program function (and possibly an axiom) for "has_line" defined at x86-dev-keyboard.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__dev__keyboard__has_line___axiom
 use        X86__dev__keyboard__has_line_flag
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        X86__dev__keyboard__has_line
 use        X86__dev__keyboard__has_line_flag
 use        X86__dev__keyboard__has_line_flag

 val has_line 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (X86__dev__keyboard__has_line.has_line X86__dev__keyboard__has_line_flag.has_line_flag.Main.__private__content)) /\ (X86__dev__keyboard__has_line.has_line__function_guard result X86__dev__keyboard__has_line_flag.has_line_flag.Main.__private__content) ) /\ true ) }
  reads {X86__dev__keyboard__has_line_flag.has_line_flag}

end

(* Module for declaring a program function (and possibly an axiom) for "has_input" defined at x86-dev-keyboard.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__dev__keyboard__has_input___axiom
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        X86__dev__keyboard__has_input
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail

 val has_input 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (X86__dev__keyboard__has_input.has_input X86__dev__keyboard__write_head.write_head.Main.__private__content X86__dev__keyboard__read_tail.read_tail.Main.__private__content)) /\ (X86__dev__keyboard__has_input.has_input__function_guard result X86__dev__keyboard__write_head.write_head.Main.__private__content X86__dev__keyboard__read_tail.read_tail.Main.__private__content) ) /\ true ) }
  reads {X86__dev__keyboard__write_head.write_head, X86__dev__keyboard__read_tail.read_tail}

end

(* Module for declaring a program function (and possibly an axiom) for "flush" defined at x86-dev-keyboard.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__dev__keyboard__flush___axiom
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__has_line_flag
 use        X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main
 use        X86__dev__keyboard__has_line_flag
 use        X86__dev__keyboard__read_tail
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__has_line_flag
 use        X86__dev__keyboard__read_tail

 val flush 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {X86__dev__keyboard__write_head.write_head, X86__dev__keyboard__has_line_flag.has_line_flag, X86__dev__keyboard__read_tail.read_tail}
  writes {X86__dev__keyboard__has_line_flag.has_line_flag, X86__dev__keyboard__read_tail.read_tail}

end

(* Module for declaring a program function (and possibly an axiom) for "flags_typePredicate" defined at x86-vm2.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__flags_typePredicate___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__flags_typePredicate
 use        X86__vm2__flags_type___axiom

 val flags_typePredicate 
   (i3s : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (X86__vm2__flags_typePredicate.flags_typePredicate i3s)) /\ (X86__vm2__flags_typePredicate.flags_typePredicate__function_guard result i3s) ) /\ true ) }
 
 axiom flags_typePredicate__post_axiom :
  (forall i3s   : BV64.t [(X86__vm2__flags_typePredicate.flags_typePredicate i3s)].
   ( (X86__vm2__flags_type___axiom.dynamic_invariant i3s True True True True) -> (let result = (X86__vm2__flags_typePredicate.flags_typePredicate i3s) in (
    (if ((X86__vm2__flags_typePredicate.flags_typePredicate__function_guard result i3s)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "dump_pages" defined at x86-vm2.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__dump_pages___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail

 val dump_pages 
   (pml4 : BV64.t) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg, X86__dev__keyboard__write_head.write_head, X86__dev__keyboard__read_tail.read_tail}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "initialise" defined at x86-vm2.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__initialise___axiom
 use        X86__vm2__dir_pages
 use        X86__vm2__directories
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__directory_ref
 use        X86__vm2__dir_pages
 use        X86__vm2__directories
 use        X86__vm2__table___axiom
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table_entry

 val initialise 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True True True True) /\ (forall temp___666   : int.
   (if (( (X86__vm2__directory_ref.first <= temp___666) /\ (temp___666 <= X86__vm2__directory_ref.last) )) then (
    (X86__vm2__table___axiom.dynamic_invariant (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content temp___666) True False True True)) else true)) ) }
  reads {X86__vm2__dir_pages.dir_pages, X86__vm2__directories.directories}
  writes {X86__vm2__dir_pages.dir_pages, X86__vm2__directories.directories}

end

(* Module for declaring a program function (and possibly an axiom) for "create_mapping" defined at x86-vm2.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__create_mapping___axiom
 use        X86__vm2__dir_pages
 use        X86__vm2__directories
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        X86__vm2__directory_ref
 use        X86__vm2__dir_pages
 use        X86__vm2__directories
 use        X86__vm2__table___axiom
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table_entry

 val create_mapping 
   (pml4 : BV64.t) (vma : BV64.t) (pa : BV64.t) (flags : BV64.t) (size : int) (success : bool__ref) : unit
  requires {  ( ((BV64.bw_and pa ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t )) /\ ((BV64.bw_and flags ( 128 : BV64.t )) <> ( 0 : BV64.t )) ) }
  ensures {  ( (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True True True True) /\ (forall temp___673   : int.
   (if (( (X86__vm2__directory_ref.first <= temp___673) /\ (temp___673 <= X86__vm2__directory_ref.last) )) then (
    (X86__vm2__table___axiom.dynamic_invariant (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content temp___673) True False True True)) else true)) ) }
  reads {X86__vm2__dir_pages.dir_pages, X86__vm2__directories.directories}
  writes {X86__vm2__dir_pages.dir_pages, X86__vm2__directories.directories, success}

end

(* Module giving a program function and a defining axiom for the expression function "has_free_dir_page" defined at x86-vm2.ads:75, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module X86__vm2__has_free_dir_page___axiom
 use        X86__vm2__dir_pages
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__has_free_dir_page
 use        X86__vm2__dir_pages
 use        X86__vm2__Tpage_bit_arrayD1
 use        Array__Int__Bool
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool

 val has_free_dir_page 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (X86__vm2__has_free_dir_page.has_free_dir_page X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content)) /\ (X86__vm2__has_free_dir_page.has_free_dir_page__function_guard result X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) ) /\ ( ( (result = True) <-> (exists temp___739  : int.
   ( ( (X86__vm2__Tpage_bit_arrayD1.first <= temp___739) /\ (temp___739 <= X86__vm2__Tpage_bit_arrayD1.last) ) /\ (let page = (Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___739) in (
    not ( (page = True) )))
    )) ) /\ ( (result = True) <-> (exists temp___738  : int.
   ( ( (X86__vm2__Tpage_bit_arrayD1.first <= temp___738) /\ (temp___738 <= X86__vm2__Tpage_bit_arrayD1.last) ) /\ (let i = (Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___738) in (
    ( (i = True) <-> false )))
    )) ) ) ) }
  reads {X86__vm2__dir_pages.dir_pages}
 
 axiom has_free_dir_page__post_axiom :
  (forall x86__vm2__dir_pages   : Array__Int__Bool.map [(X86__vm2__has_free_dir_page.has_free_dir_page x86__vm2__dir_pages)].
   ( (X86__vm2__page_bit_array___axiom.dynamic_invariant x86__vm2__dir_pages True True True True) -> (let result = (X86__vm2__has_free_dir_page.has_free_dir_page x86__vm2__dir_pages) in (
    (if ((X86__vm2__has_free_dir_page.has_free_dir_page__function_guard result x86__vm2__dir_pages)) then (
     ( ( ( (result = True) <-> (exists temp___741  : int.
      ( ( (X86__vm2__Tpage_bit_arrayD1.first <= temp___741) /\ (temp___741 <= X86__vm2__Tpage_bit_arrayD1.last) ) /\ (let i = (Array__Int__Bool.get x86__vm2__dir_pages temp___741) in (
       ( (i = True) <-> false )))
       )) ) /\ true ) /\ true )) else true)))
    ))
 
 axiom has_free_dir_page__def_axiom :
  (forall x86__vm2__dir_pages   : Array__Int__Bool.map [(X86__vm2__has_free_dir_page.has_free_dir_page x86__vm2__dir_pages)].
   ( (let result = (X86__vm2__has_free_dir_page.has_free_dir_page x86__vm2__dir_pages) in (
    (X86__vm2__has_free_dir_page.has_free_dir_page__function_guard result x86__vm2__dir_pages)))
    -> ( ((X86__vm2__has_free_dir_page.has_free_dir_page x86__vm2__dir_pages) = True) <-> (exists temp___743  : int.
    ( ( (X86__vm2__Tpage_bit_arrayD1.first <= temp___743) /\ (temp___743 <= X86__vm2__Tpage_bit_arrayD1.last) ) /\ (let page = (Array__Int__Bool.get x86__vm2__dir_pages temp___743) in (
     not ( (page = True) )))
     )) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_free_dir_page" defined at x86-vm2.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__get_free_dir_page___axiom
 use        X86__vm2__dir_pages
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__has_free_dir_page
 use        Common__virtual_address___axiom
 use        X86__vm2__dir_pages
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool

 val get_free_dir_page 
   (page : BV64.t__ref) : unit
  requires {  ((epsilon temp___result_744 : bool.
   ( (temp___result_744 = (X86__vm2__has_free_dir_page.has_free_dir_page X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content)) /\ (X86__vm2__has_free_dir_page.has_free_dir_page__function_guard temp___result_744 X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) )) = True) }
  ensures {  ( (if (((old (epsilon temp___result_745 : bool.
   ( (temp___result_745 = (X86__vm2__has_free_dir_page.has_free_dir_page X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content)) /\ (X86__vm2__has_free_dir_page.has_free_dir_page__function_guard temp___result_745 X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) )) ) = True)) then (
   ((BV64.bw_and page.BV64.t__content ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t ))) else (
   (page.BV64.t__content = ( 0 : BV64.t )))) /\ ( (Common__virtual_address___axiom.dynamic_invariant page.BV64.t__content True True True True) /\ (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True True True True) ) ) }
  reads {X86__vm2__dir_pages.dir_pages}
  writes {X86__vm2__dir_pages.dir_pages, page}

end

(* Module giving a program function and a defining axiom for the expression function "make_directory_entry" defined at x86-vm2.ads:91, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module X86__vm2__make_directory_entry___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__make_directory_entry
 use        Common__virtual_address___axiom
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__table_entry___axiom

 val make_directory_entry 
   (a : BV64.t) (f : BV64.t) : BV64.t
  requires {  ( ((BV64.bw_and a ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t )) /\ ((BV64.bw_and f ( 128 : BV64.t )) = ( 0 : BV64.t )) ) }
  ensures {  ( ( (result = (X86__vm2__make_directory_entry.make_directory_entry a f)) /\ (X86__vm2__make_directory_entry.make_directory_entry__function_guard result a f) ) /\ ( (X86__vm2__table_entry___axiom.dynamic_invariant result True False True True) /\ ( (result = (BV64.bw_or a f)) /\ (result = a) ) ) ) }
 
 axiom make_directory_entry__def_axiom :
  (forall a   f   : BV64.t [(X86__vm2__make_directory_entry.make_directory_entry a f)].
   ( ( ( (Common__virtual_address___axiom.dynamic_invariant a True True True True) /\ (X86__vm2__flags_type___axiom.dynamic_invariant f True True True True) ) /\ (let result = (X86__vm2__make_directory_entry.make_directory_entry a f) in (
    (X86__vm2__make_directory_entry.make_directory_entry__function_guard result a f)))
    ) -> ((X86__vm2__make_directory_entry.make_directory_entry a f) = (BV64.bw_or a f)) ))

end

(* Module giving a program function and a defining axiom for the expression function "make_frame_entry" defined at x86-vm2.ads:100, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module X86__vm2__make_frame_entry___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__make_frame_entry
 use        Common__physical_address___axiom
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__table_entry___axiom

 val make_frame_entry 
   (pa : BV64.t) (f : BV64.t) : BV64.t
  requires {  ( ((BV64.bw_and pa ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t )) /\ ((BV64.bw_and f ( 128 : BV64.t )) <> ( 0 : BV64.t )) ) }
  ensures {  ( ( (result = (X86__vm2__make_frame_entry.make_frame_entry pa f)) /\ (X86__vm2__make_frame_entry.make_frame_entry__function_guard result pa f) ) /\ ( (X86__vm2__table_entry___axiom.dynamic_invariant result True False True True) /\ (result = (BV64.bw_or pa f)) ) ) }
 
 axiom make_frame_entry__def_axiom :
  (forall pa   f   : BV64.t [(X86__vm2__make_frame_entry.make_frame_entry pa f)].
   ( ( ( (Common__physical_address___axiom.dynamic_invariant pa True True True True) /\ (X86__vm2__flags_type___axiom.dynamic_invariant f True True True True) ) /\ (let result = (X86__vm2__make_frame_entry.make_frame_entry pa f) in (
    (X86__vm2__make_frame_entry.make_frame_entry__function_guard result pa f)))
    ) -> ((X86__vm2__make_frame_entry.make_frame_entry pa f) = (BV64.bw_or pa f)) ))

end

(* Module giving a program function and a defining axiom for the expression function "get_directory_address" defined at x86-vm2.ads:108, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module X86__vm2__get_directory_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__get_directory_address
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__table_address___axiom

 val get_directory_address 
   (t : BV64.t) : BV64.t
  requires {  ((BV64.bw_and t ( 128 : BV64.t )) = ( 0 : BV64.t )) }
  ensures {  ( ( (result = (X86__vm2__get_directory_address.get_directory_address t)) /\ (X86__vm2__get_directory_address.get_directory_address__function_guard result t) ) /\ ( (X86__vm2__table_address___axiom.dynamic_invariant result True False True True) /\ (result = (BV64.bw_and t ( 4503599627366400 : BV64.t ))) ) ) }
 
 axiom get_directory_address__def_axiom :
  (forall t   : BV64.t [(X86__vm2__get_directory_address.get_directory_address t)].
   ( ( (X86__vm2__table_entry___axiom.dynamic_invariant t True True True True) /\ (let result = (X86__vm2__get_directory_address.get_directory_address t) in (
    (X86__vm2__get_directory_address.get_directory_address__function_guard result t)))
    ) -> ((X86__vm2__get_directory_address.get_directory_address t) = (BV64.bw_and t ( 4503599627366400 : BV64.t ))) ))

end

(* Module giving a program function and a defining axiom for the expression function "get_directory_ref" defined at x86-vm2.ads:113, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module X86__vm2__get_directory_ref___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__get_directory_ref
 use        X86__vm2__directory_ref___axiom
 use        X86__vm2__table_entry___axiom

 val get_directory_ref 
   (t : BV64.t) : int
  requires {  ((BV64.bw_and t ( 128 : BV64.t )) = ( 0 : BV64.t )) }
  ensures {  ( ( (result = (X86__vm2__get_directory_ref.get_directory_ref t)) /\ (X86__vm2__get_directory_ref.get_directory_ref__function_guard result t) ) /\ ( (X86__vm2__directory_ref___axiom.dynamic_invariant result True False True True) /\ (result = (BV64.t'int (BV64.udiv (BV64.sub (BV64.bw_and t ( 4503599627366400 : BV64.t )) ( 2097152 : BV64.t )) ( 4096 : BV64.t )))) ) ) }
 
 axiom get_directory_ref__def_axiom :
  (forall t   : BV64.t [(X86__vm2__get_directory_ref.get_directory_ref t)].
   ( ( (X86__vm2__table_entry___axiom.dynamic_invariant t True True True True) /\ (let result = (X86__vm2__get_directory_ref.get_directory_ref t) in (
    (X86__vm2__get_directory_ref.get_directory_ref__function_guard result t)))
    ) -> ((X86__vm2__get_directory_ref.get_directory_ref t) = (BV64.t'int (BV64.udiv (BV64.sub (BV64.bw_and t ( 4503599627366400 : BV64.t )) ( 2097152 : BV64.t )) ( 4096 : BV64.t )))) ))

end

(* Module giving a program function and a defining axiom for the expression function "get_frame_address" defined at x86-vm2.ads:118, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module X86__vm2__get_frame_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__get_frame_address
 use        Common__physical_address___axiom
 use        X86__vm2__table_entry___axiom

 val get_frame_address 
   (t : BV64.t) : BV64.t
  requires {  ((BV64.bw_and t ( 128 : BV64.t )) <> ( 0 : BV64.t )) }
  ensures {  ( ( (result = (X86__vm2__get_frame_address.get_frame_address t)) /\ (X86__vm2__get_frame_address.get_frame_address__function_guard result t) ) /\ ( (Common__physical_address___axiom.dynamic_invariant result True False True True) /\ (result = (BV64.bw_and t ( 4503599627366400 : BV64.t ))) ) ) }
 
 axiom get_frame_address__def_axiom :
  (forall t   : BV64.t [(X86__vm2__get_frame_address.get_frame_address t)].
   ( ( (X86__vm2__table_entry___axiom.dynamic_invariant t True True True True) /\ (let result = (X86__vm2__get_frame_address.get_frame_address t) in (
    (X86__vm2__get_frame_address.get_frame_address__function_guard result t)))
    ) -> ((X86__vm2__get_frame_address.get_frame_address t) = (BV64.bw_and t ( 4503599627366400 : BV64.t ))) ))

end

(* Module for declaring a program function (and possibly an axiom) for "free_dir_page" defined at x86-vm2.adb:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__free_dir_page___axiom
 use        X86__vm2__dir_pages
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__dir_pages
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool

 val free_dir_page 
   (vma : BV64.t) : unit
  requires {  true }
  ensures {  (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True True True True) }
  reads {X86__vm2__dir_pages.dir_pages}
  writes {X86__vm2__dir_pages.dir_pages}

end

(* Module for declaring a program function (and possibly an axiom) for "offsets_to_vma" defined at x86-vm2.adb:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__offsets_to_vma___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__offsets_to_vma
 use        Common__virtual_address___axiom
 use        Array__Int__X86__vm2__table_index

 val offsets_to_vma 
   (t : Array__Int__X86__vm2__table_index.map) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (X86__vm2__offsets_to_vma.offsets_to_vma t)) /\ (X86__vm2__offsets_to_vma.offsets_to_vma__function_guard result t) ) /\ (Common__virtual_address___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "vma_to_offsets" defined at x86-vm2.adb:83, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__vma_to_offsets___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__vma_to_offsets
 use        X86__vm2__table_offsets___axiom
 use        Array__Int__X86__vm2__table_index

 val vma_to_offsets 
   (vma : BV64.t) : Array__Int__X86__vm2__table_index.map
  requires {  true }
  ensures {  ( ( (result = (X86__vm2__vma_to_offsets.vma_to_offsets vma)) /\ (X86__vm2__vma_to_offsets.vma_to_offsets__function_guard result vma) ) /\ (X86__vm2__table_offsets___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "flush_tlb" defined at x86-vm2.adb:94, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__flush_tlb___axiom
 use import "_gnatprove_standard".Main

 val flush_tlb 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_page" defined at x86-vm2.adb:178, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__print_page___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Array__Int__Common__address
 use        Array__Int__X86__vm2__table_index
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg

 val print_page 
   (table_addresses : Array__Int__Common__address.map) (offsets : Array__Int__X86__vm2__table_index.map) (physical_address : BV64.t) (pte : BV64.t) (l : int) : unit
  requires {  true }
  ensures {  true }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg}

end

(* Module for declaring a program function (and possibly an axiom) for "dump_rec" defined at x86-vm2.adb:234, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module X86__vm2__dump_rec___axiom
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail
 use import "_gnatprove_standard".Main
 use        X86__vm2__table_offsets___axiom
 use        X86__vm2__tables___axiom
 use        Array__Int__Common__address
 use        Array__Int__X86__vm2__table_index
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        Console__x
 use        Console__vmem
 use        Console__y
 use        Console__current_fg
 use        Console__current_bg
 use        X86__dev__keyboard__write_head
 use        X86__dev__keyboard__read_tail

 val dump_rec 
   (table_addresses : Array__Int__Common__address.map__ref) (offsets : Array__Int__X86__vm2__table_index.map__ref) (l : int) : unit
  requires {  true }
  ensures {  ( (X86__vm2__tables___axiom.dynamic_invariant table_addresses.Array__Int__Common__address.map__content True True True True) /\ (X86__vm2__table_offsets___axiom.dynamic_invariant offsets.Array__Int__X86__vm2__table_index.map__content True True True True) ) }
  reads {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg, X86__dev__keyboard__write_head.write_head, X86__dev__keyboard__read_tail.read_tail}
  writes {Console__x.x, Console__vmem.vmem, Console__y.y, Console__current_fg.current_fg, Console__current_bg.current_bg, table_addresses, offsets}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "vm2" defined at x86-vm2.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module X86__vm2__package_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Common__virtual_address
 use        X86__vm2__dir_pages
 use        X86__vm2__table
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__table___axiom
 use        X86__vm2__page_bit_array___axiom
 use        X86__vm2__dir_pages___axiom
 use        Common__virtual_address___axiom

 let def #"x86-vm2.ads" 5 0 0#"GP_Subp:x86-vm2.ads:5" "W:diverges:N" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 5 0 0# true }
  ensures { #"x86-vm2.ads" 5 0 0# true }
   =
  ( (#"x86-vm2.ads" 6 0 0# ());
  (#"x86-vm2.ads" 8 0 0# ());
  (#"x86-vm2.ads" 12 0 0# ());
  (#"x86-vm2.ads" 13 0 0# ());
  (#"x86-vm2.ads" 14 0 0# ());
  (#"x86-vm2.ads" 15 0 0# ());
  (#"x86-vm2.ads" 16 0 0# ());
  (#"x86-vm2.ads" 17 0 0# ());
  (#"x86-vm2.ads" 18 0 0# ());
  (#"x86-vm2.ads" 19 0 0# ());
  (#"x86-vm2.ads" 20 0 0# ());
  (#"x86-vm2.ads" 21 0 0# ());
  (#"x86-vm2.ads" 25 0 0# ());
  (#"x86-vm2.ads" 26 0 0# ());
  (#"x86-vm2.ads" 27 0 0# ());
  (#"x86-vm2.ads" 27 0 0# ());
  (#"x86-vm2.ads" 27 0 0# ());
  (#"x86-vm2.ads" 29 0 0# ());
  (#"x86-vm2.ads" 32 0 0# ());
  (#"x86-vm2.ads" 34 0 0# ());
  (#"x86-vm2.ads" 39 0 0# ());
  (#"x86-vm2.ads" 27 0 0# ());
  (#"x86-vm2.ads" 27 0 0# ());
  (#"x86-vm2.ads" 39 0 0# ());
  (#"x86-vm2.ads" 47 0 0# ());
  (#"x86-vm2.ads" 47 0 0# ());
  (#"x86-vm2.ads" 46 0 0# ());
  (#"x86-vm2.ads" 56 0 0# ());
  (#"x86-vm2.ads" 56 0 0# ());
  (#"x86-vm2.ads" 57 0 0# ());
  (#"x86-vm2.ads" 58 0 0# ());
  (#"x86-vm2.ads" 60 0 0# ());
  (#"x86-vm2.ads" 60 0 0# ());
  (#"x86-vm2.ads" 60 0 0# ());
  (#"x86-vm2.ads" 60 0 0# ());
  (#"x86-vm2.ads" 60 0 0# ());
  (#"x86-vm2.ads" 60 0 0# ());
  (#"x86-vm2.ads" 60 0 0# (#"x86-vm2.ads" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.ads:60:9" "GP_Reason:VC_RANGE_CHECK" "GP_Id:0" "comment:   type Table_Address is new Virtual_Address range 
        ^ x86-vm2.ads:60:9:VC_RANGE_CHECK" "GP_Shape:table_address_def" #"x86-vm2.ads" 60 0 0# (any unit
  requires {#"x86-vm2.ads" 60 0 0# ( (BV64.ule ( 2097152 : BV64.t ) (BV64.sub (BV64.add ( 2097152 : BV64.t ) (BV64.mul ( 2097152 : BV64.t ) (BV64.of_int X86__vm2__table.value__size))) ( 1 : BV64.t ))) -> ( (BV64.uge ( 2097152 : BV64.t ) Common__virtual_address.first) /\ (BV64.ule (BV64.sub (BV64.add ( 2097152 : BV64.t ) (BV64.mul ( 2097152 : BV64.t ) (BV64.of_int X86__vm2__table.value__size))) ( 1 : BV64.t )) Common__virtual_address.last) ) )} 
  ensures {#"x86-vm2.ads" 60 0 0# true} 
  ) )));
  (#"x86-vm2.ads" 63 0 0# ());
  (#"x86-vm2.ads" 64 0 0# ());
  (#"x86-vm2.ads" 68 0 0# ());
  (#"x86-vm2.ads" 69 0 0# ());
  (#"x86-vm2.ads" 71 0 0# ());
  (#"x86-vm2.ads" 71 0 0# ());
  (#"x86-vm2.ads" 71 0 0# ( #"x86-vm2.ads" 71 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"x86-vm2.ads" 71 0 0# assume { #"x86-vm2.ads" 71 0 0# (X86__vm2__page_bit_array___axiom.default_initial_assumption X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content False) };
  #"x86-vm2.ads" 71 0 0# assume { #"x86-vm2.ads" 71 0 0# (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content False False True True) } ));
  (#"x86-vm2.ads" 75 0 0# ());
  (#"x86-vm2.ads" 78 0 0# ());
  (#"x86-vm2.ads" 77 0 0# ());
  (#"x86-vm2.ads" 76 0 0# ());
  (#"x86-vm2.ads" 81 0 0# ());
  (#"x86-vm2.ads" 86 0 0# ());
  (#"x86-vm2.ads" 84 0 0# ());
  (#"x86-vm2.ads" 83 0 0# ());
  (#"x86-vm2.ads" 82 0 0# ());
  (#"x86-vm2.ads" 91 0 0# ());
  (#"x86-vm2.ads" 97 0 0# ());
  (#"x86-vm2.ads" 95 0 0# ());
  (#"x86-vm2.ads" 95 0 0# ());
  (#"x86-vm2.ads" 94 0 0# ());
  (#"x86-vm2.ads" 100 0 0# ());
  (#"x86-vm2.ads" 104 0 0# ());
  (#"x86-vm2.ads" 104 0 0# ());
  (#"x86-vm2.ads" 103 0 0# ());
  (#"x86-vm2.ads" 108 0 0# ());
  (#"x86-vm2.ads" 111 0 0# ());
  (#"x86-vm2.ads" 110 0 0# ());
  (#"x86-vm2.ads" 113 0 0# ());
  (#"x86-vm2.ads" 116 0 0# ());
  (#"x86-vm2.ads" 115 0 0# ());
  (#"x86-vm2.ads" 118 0 0# ());
  (#"x86-vm2.ads" 121 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ());
  (#"x86-vm2.ads" 120 0 0# ()) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "flags_typePredicate" defined at x86-vm2.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__flags_typePredicate__subprogram_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__flags_typePredicate__I3s
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__flags_typePredicate__I3s___axiom

 val x86__vm2__flags_typePredicate__result  : bool__ref 
 
 let def #"x86-vm2.ads" 27 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:27" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 27 0 0# true }
  ensures { #"x86-vm2.ads" 27 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:27 *)
  ;
  #"x86-vm2.ads" 27 0 0# assume { #"x86-vm2.ads" 27 0 0# (X86__vm2__flags_type___axiom.dynamic_invariant X86__vm2__flags_typePredicate__I3s.i3s True False False True) };
  #"x86-vm2.ads" 27 0 0# assume { #"x86-vm2.ads" 27 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram x86-vm2.ads:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:27 *)
  ;
  #"x86-vm2.ads" 27 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:27 *)
  ;
  #"x86-vm2.ads" 27 0 0# assume { #"x86-vm2.ads" 27 0 0# true };
  #"x86-vm2.ads" 27 0 0# try
   ( ( "GP_Sloc:x86-vm2.ads:27:9" (#"x86-vm2.ads" 27 0 0# ( #"x86-vm2.ads" 27 0 0# x86__vm2__flags_typePredicate__result.bool__content <- ( ((BV64.bw_and(X86__vm2__flags_typePredicate__I3s.i3s) (( 4503599627366400 : BV64.t ))) = ( 0 : BV64.t )) );
   #"x86-vm2.ads" 27 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  x86__vm2__flags_typePredicate__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "dump_pages" defined at x86-vm2.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__dump_pages__subprogram_def
 use import "_gnatprove_standard".Main
 use        Common__physical_address___axiom
 use        X86__vm2__dump_pages__pml4
 use        X86__vm2__dump_pages__pml4___axiom
 use        Common__physical_address___axiom

 let def #"x86-vm2.ads" 32 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:32" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 32 0 0# true }
  ensures { #"x86-vm2.ads" 32 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:32 *)
  ;
  #"x86-vm2.ads" 32 0 0# assume { #"x86-vm2.ads" 32 0 0# (Common__physical_address___axiom.dynamic_invariant X86__vm2__dump_pages__pml4.pml4 True False True True) };
  #"x86-vm2.ads" 32 0 0# assume { #"x86-vm2.ads" 32 0 0# true };
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:32 *)
  ;
  #"x86-vm2.ads" 32 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:32 *)
  ;
  #"x86-vm2.ads" 32 0 0# assume { #"x86-vm2.ads" 32 0 0# true } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "initialise" defined at x86-vm2.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__initialise__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        X86__vm2__directory_ref
 use        X86__vm2__dir_pages
 use        X86__vm2__directories
 use        X86__vm2__table___axiom
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table_entry
 use        X86__vm2__directories___axiom
 use        X86__vm2__directory_ref___axiom
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__table___axiom
 use        X86__vm2__page_bit_array___axiom
 use        X86__vm2__dir_pages___axiom

 let def #"x86-vm2.ads" 34 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:34" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 34 0 0# true }
  ensures { #"x86-vm2.ads" 34 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:34 *)
  ;
  #"x86-vm2.ads" 34 0 0# assume { #"x86-vm2.ads" 34 0 0# (forall temp___750 #"x86-vm2.ads" 34 0 0#  : int.
   (if (( (X86__vm2__directory_ref.first <= temp___750) /\ (temp___750 <= X86__vm2__directory_ref.last) )) then (
    (X86__vm2__table___axiom.dynamic_invariant (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content temp___750) True False True True)) else true)) };
  #"x86-vm2.ads" 34 0 0# assume { #"x86-vm2.ads" 34 0 0# (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True False True True) };
  #"x86-vm2.ads" 34 0 0# assume { #"x86-vm2.ads" 34 0 0# true };
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:34 *)
  ;
  #"x86-vm2.ads" 34 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:34 *)
  ;
  #"x86-vm2.ads" 34 0 0# assume { #"x86-vm2.ads" 34 0 0# true } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "create_mapping" defined at x86-vm2.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__create_mapping__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        "_gnatprove_standard".Boolean
 use        X86__vm2__has_free_dir_page___axiom
 use        X86__vm2__get_free_dir_page___axiom
 use        X86__vm2__make_directory_entry___axiom
 use        X86__vm2__make_frame_entry___axiom
 use        X86__vm2__get_directory_ref___axiom
 use        Array__Int__X86__vm2__table_index
 use        X86__vm2__vma_to_offsets___axiom
 use        Common__physical_address___axiom
 use        Common__virtual_address___axiom
 use        X86__vm2__page_size___axiom
 use        X86__vm2__table_level___axiom
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__flags_typePredicate__I3s
 use        X86__vm2__directory_ref
 use        X86__vm2__directory_ref___axiom
 use        X86__vm2__dir_pages
 use        X86__vm2__directories
 use        X86__vm2__create_mapping__pml4
 use        X86__vm2__create_mapping__vma
 use        X86__vm2__create_mapping__pa
 use        X86__vm2__create_mapping__flags
 use        X86__vm2__create_mapping__size
 use        X86__vm2__create_mapping__success
 use        X86__vm2__table_entry
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__table_entry__rep
 use        X86__vm2__table_index
 use        X86__vm2__table_index__rep
 use        Array__Int__X86__vm2__table_entry
 use        X86__vm2__table___axiom
 use        Array__Int__X86__vm2__table_index
 use        X86__vm2__table_offsets___axiom
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool
 use        Array__Int__X86__vm2__table
 use        Array__Int__X86__vm2__table
 use        X86__vm2__create_mapping__current_table
 use        Array__Int__X86__vm2__table_index
 use        X86__vm2__create_mapping__offsets
 use        X86__vm2__create_mapping__dir_page
 use        X86__vm2__create_mapping__pte
 use        X86__vm2__create_mapping__target_level
 use        X86__vm2__create_mapping__L_4
 use        X86__vm2__create_mapping__L_4__l
 use        Array__Int__X86__vm2__table_index
 use        Array__Int__X86__vm2__table_entry
 use        Array__Int__X86__vm2__table_entry
 use        Array__Int__X86__vm2__table_entry
 use        Array__Int__X86__vm2__table_entry
 use        Array__Int__X86__vm2__table_entry
 use        X86__vm2__directories___axiom
 use        X86__vm2__create_mapping__current_table___axiom
 use        X86__vm2__create_mapping__offsets___axiom
 use        X86__vm2__create_mapping__dir_page___axiom
 use        X86__vm2__create_mapping__pte___axiom
 use        X86__vm2__create_mapping__target_level___axiom
 use        X86__vm2__create_mapping__L_4__l___axiom
 use        X86__vm2__create_mapping__L_4___axiom
 use        X86__vm2__page_size___axiom
 use        X86__vm2__table_level___axiom
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__directory_ref___axiom
 use        X86__vm2__create_mapping__pml4___axiom
 use        X86__vm2__create_mapping__vma___axiom
 use        X86__vm2__create_mapping__pa___axiom
 use        X86__vm2__create_mapping__flags___axiom
 use        X86__vm2__create_mapping__size___axiom
 use        X86__vm2__create_mapping__success___axiom
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__table_index___axiom
 use        X86__vm2__table___axiom
 use        X86__vm2__table_offsets___axiom
 use        X86__vm2__page_bit_array___axiom
 use        X86__vm2__dir_pages___axiom
 use        X86__vm2__has_free_dir_page___axiom
 use        X86__vm2__get_free_dir_page___axiom
 use        X86__vm2__make_directory_entry___axiom
 use        X86__vm2__make_frame_entry___axiom
 use        X86__vm2__get_directory_ref___axiom
 use        Common__physical_address___axiom
 use        Common__virtual_address___axiom
 use        X86__vm2__flags_typePredicate__I3s___axiom
 use        X86__vm2__Tpage_bit_arrayD1___axiom
 use        X86__vm2__vma_to_offsets___axiom

 let def #"x86-vm2.ads" 39 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:39" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 39 0 0# true }
  ensures { #"x86-vm2.ads" 39 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:39 *)
  ;
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (X86__vm2__flags_type___axiom.dynamic_invariant X86__vm2__flags_typePredicate__I3s.i3s True False True True) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (forall temp___774 #"x86-vm2.ads" 39 0 0#  : int.
   (if (( (X86__vm2__directory_ref.first <= temp___774) /\ (temp___774 <= X86__vm2__directory_ref.last) )) then (
    (X86__vm2__table___axiom.dynamic_invariant (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content temp___774) True False True True)) else true)) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (Common__physical_address___axiom.dynamic_invariant X86__vm2__create_mapping__pml4.pml4 True False True True) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (Common__virtual_address___axiom.dynamic_invariant X86__vm2__create_mapping__vma.vma True False True True) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (Common__physical_address___axiom.dynamic_invariant X86__vm2__create_mapping__pa.pa True False True True) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (X86__vm2__flags_type___axiom.dynamic_invariant X86__vm2__create_mapping__flags.flags True False True True) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (X86__vm2__page_size___axiom.dynamic_invariant X86__vm2__create_mapping__size.size True False True True) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True False True True) };
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram x86-vm2.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:39 *)
  ;
  #"x86-vm2.ads" 39 0 0# abstract ensures {true}(let _ = ( ((BV64.bw_and(X86__vm2__create_mapping__pa.pa) (( 18442240474082185215 : BV64.t ))) = ( 0 : BV64.t )) && ((BV64.bw_and(X86__vm2__create_mapping__flags.flags) (( 128 : BV64.t ))) <> ( 0 : BV64.t )) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:39 *)
  ;
  #"x86-vm2.ads" 39 0 0# assume { #"x86-vm2.ads" 39 0 0# ( ((BV64.bw_and X86__vm2__create_mapping__pa.pa ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t )) /\ ((BV64.bw_and X86__vm2__create_mapping__flags.flags ( 128 : BV64.t )) <> ( 0 : BV64.t )) ) };
  #"x86-vm2.ads" 39 0 0# try
   ( (#"x86-vm2.adb" 117 0 0# ());
   (#"x86-vm2.adb" 119 0 0# ( #"x86-vm2.adb" 119 0 0# X86__vm2__create_mapping__current_table.current_table.int__content <- ( 0 );
   #"x86-vm2.adb" 119 0 0# assume { #"x86-vm2.adb" 119 0 0# (X86__vm2__directory_ref___axiom.dynamic_invariant X86__vm2__create_mapping__current_table.current_table.int__content True False True True) } ));
   (#"x86-vm2.adb" 120 0 0# ());
   (#"x86-vm2.adb" 120 0 0# ( #"x86-vm2.adb" 120 0 0# X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content <- ( (X86__vm2__vma_to_offsets___axiom.vma_to_offsets(X86__vm2__create_mapping__vma.vma)) );
   #"x86-vm2.adb" 120 0 0# assume { #"x86-vm2.adb" 120 0 0# (X86__vm2__table_offsets___axiom.dynamic_invariant X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content True False True True) } ));
   (#"x86-vm2.adb" 121 0 0# ( #"x86-vm2.adb" 121 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"x86-vm2.adb" 121 0 0# assume { #"x86-vm2.adb" 121 0 0# (Common__virtual_address___axiom.default_initial_assumption X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content False) };
   #"x86-vm2.adb" 121 0 0# assume { #"x86-vm2.adb" 121 0 0# (Common__virtual_address___axiom.dynamic_invariant X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content False False True True) } ));
   (#"x86-vm2.adb" 122 0 0# ( #"x86-vm2.adb" 122 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"x86-vm2.adb" 122 0 0# assume { #"x86-vm2.adb" 122 0 0# (X86__vm2__table_entry___axiom.default_initial_assumption X86__vm2__create_mapping__pte.pte.BV64.t__content False) };
   #"x86-vm2.adb" 122 0 0# assume { #"x86-vm2.adb" 122 0 0# (X86__vm2__table_entry___axiom.dynamic_invariant X86__vm2__create_mapping__pte.pte.BV64.t__content False False True True) } ));
   (#"x86-vm2.adb" 123 0 0# ( #"x86-vm2.adb" 123 0 0# X86__vm2__create_mapping__target_level.target_level.int__content <- ( (if ((X86__vm2__create_mapping__size.size = 0)) then (
    1) else (
    2)) );
   #"x86-vm2.adb" 123 0 0# assume { #"x86-vm2.adb" 123 0 0# (X86__vm2__table_level___axiom.dynamic_invariant X86__vm2__create_mapping__target_level.target_level.int__content True False True True) } ));
   (#"x86-vm2.adb" 125 0 0# ());
   ( "GP_Sloc:x86-vm2.adb:125:42" (#"x86-vm2.adb" 125 0 0# (let temp___754 = 1 in (
   (let temp___755 = 4 in (
    ( () (* Translation of an Ada loop from x86-vm2.adb:125 *)
    ;
    #"x86-vm2.adb" 125 0 0# try
     ( #"x86-vm2.adb" 125 0 0# abstract ensures {true}(let _ = X86__vm2__create_mapping__current_table.current_table.int__content in (
      ()))
      end ;
     (let temp___770 = #"x86-vm2.adb" 125 0 0# (any int
     ensures {#"x86-vm2.adb" 125 0 0# (result = X86__vm2__create_mapping__current_table.current_table.int__content)} 
     ) in (
      ( #"x86-vm2.adb" 125 0 0# abstract ensures {true}(let _ = X86__vm2__create_mapping__success.success.bool__content in (
       ()))
       end ;
      (let temp___769 = #"x86-vm2.adb" 125 0 0# (any bool
      ensures {#"x86-vm2.adb" 125 0 0# (result = X86__vm2__create_mapping__success.success.bool__content)} 
      ) in (
       ( #"x86-vm2.adb" 125 0 0# abstract ensures {true}(let _ = X86__vm2__create_mapping__pte.pte.BV64.t__content in (
        ()))
        end ;
       (let temp___768 = #"x86-vm2.adb" 125 0 0# (any BV64.t
       ensures {#"x86-vm2.adb" 125 0 0# (result = X86__vm2__create_mapping__pte.pte.BV64.t__content)} 
       ) in (
        ( #"x86-vm2.adb" 125 0 0# abstract ensures {true}(let _ = X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content in (
         ()))
         end ;
        (let temp___767 = #"x86-vm2.adb" 125 0 0# (any BV64.t
        ensures {#"x86-vm2.adb" 125 0 0# (result = X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content)} 
        ) in (
         ( #"x86-vm2.adb" 125 0 0# abstract ensures {true}(let _ = X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content in (
          ()))
          end ;
         (let temp___764 = #"x86-vm2.adb" 125 0 0# (any Array__Int__X86__vm2__table.map
         ensures {#"x86-vm2.adb" 125 0 0# (result = X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content)} 
         ) in (
          ( #"x86-vm2.adb" 125 0 0# abstract ensures {true}(let _ = X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content in (
           ()))
           end ;
          (let temp___762 = #"x86-vm2.adb" 125 0 0# (any Array__Int__Bool.map
          ensures {#"x86-vm2.adb" 125 0 0# (result = X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content)} 
          ) in (
           ( () (* Unrolling of the loop statements of loop x86-vm2.adb:125 *)
           ;
           #"x86-vm2.adb" 125 0 0# X86__vm2__create_mapping__L_4__l.l.int__content <- ( 4 );
           ( "GP_Sloc:x86-vm2.adb:126:10" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:29" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:44" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:14" (#"x86-vm2.adb" 126 0 0# #"x86-vm2.adb" 126 0 0# X86__vm2__create_mapping__pte.pte.BV64.t__content <- ( (X86__vm2__table_entry__rep.to_rep((let temp___756 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___756) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )) )) );
           ( "GP_Sloc:x86-vm2.adb:128:17" (#"x86-vm2.adb" 128 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:128:10" (#"x86-vm2.adb" 128 0 0# (if ((X86__vm2__create_mapping__L_4__l.l.int__content = X86__vm2__create_mapping__target_level.target_level.int__content)) then (
            ( ( "GP_Sloc:x86-vm2.adb:129:17" (#"x86-vm2.adb" 129 0 0# ()) );
            ( "GP_Sloc:x86-vm2.adb:129:13" (#"x86-vm2.adb" 129 0 0# (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:130:24" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:130:34" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# raise Return__exc) ) )) else (
             ( ( "GP_Sloc:x86-vm2.adb:132:28" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:132:43" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:22" (#"x86-vm2.adb" 133 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:19" (#"x86-vm2.adb" 133 0 0# #"x86-vm2.adb" 133 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___760 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
              (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 133 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:133:22" "GP_Id:4" "comment:                  := Make_Frame_Entry(PA, Flags);
                     ^ x86-vm2.adb:133:22:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__directories_assign__call_make_frame_entry" (X86__vm2__make_frame_entry___axiom.make_frame_entry(X86__vm2__create_mapping__pa.pa) (X86__vm2__create_mapping__flags.flags)) ))))))))
             )) )) );
             ( "GP_Sloc:x86-vm2.adb:134:24" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(1)) )) );
             ( "GP_Sloc:x86-vm2.adb:134:33" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# raise Return__exc) ) )))) ) )) else (
            ( "GP_Sloc:x86-vm2.adb:137:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 128 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:138:21" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:138:31" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# raise Return__exc) ) )) else (
             ( "GP_Sloc:x86-vm2.adb:140:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) = ( 0 : BV64.t ))) then (
              ( ( "GP_Sloc:x86-vm2.adb:141:16" (#"x86-vm2.adb" 141 0 0# ()) );
              ( "GP_Sloc:x86-vm2.adb:141:13" (#"x86-vm2.adb" 141 0 0# (if ((X86__vm2__has_free_dir_page___axiom.has_free_dir_page(()))) then (
               ( ( "GP_Sloc:x86-vm2.adb:142:34" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ( (#"x86-vm2.adb" 142 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:142:16" "GP_Reason:VC_PRECONDITION" "GP_Id:1" "comment:               Get_Free_Dir_Page(Dir_Page);
               ^ x86-vm2.adb:142:16:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__call_get_free_dir_page" (X86__vm2__get_free_dir_page___axiom.get_free_dir_page(X86__vm2__create_mapping__dir_page.dir_page)) )) )) );
               ( "GP_Sloc:x86-vm2.adb:143:28" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:143:43" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:43" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:22" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:19" (#"x86-vm2.adb" 144 0 0# #"x86-vm2.adb" 144 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___759 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
                (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:144:22" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" "GP_Id:3" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                     ^ x86-vm2.adb:144:22:VC_PRECONDITION" (X86__vm2__make_directory_entry___axiom.make_directory_entry(X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content) ((let temp___757 = ( 3 : BV64.t ) in (
                 ( #"x86-vm2.adb" 144 0 0# assert { #"x86-vm2.adb" 144 0 0# (#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:144:61" "GP_Reason:VC_PREDICATE_CHECK" "GP_Id:2" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                                                            ^ x86-vm2.adb:144:61:VC_PREDICATE_CHECK" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" (let temp___758 = temp___757 in (
                  ((BV64.bw_and temp___758 ( 4503599627366400 : BV64.t )) = ( 0 : BV64.t ))))
                  )) };
                 temp___757 )))
                )) ))))))))
               )) )) ) )) else (
               ( ( "GP_Sloc:x86-vm2.adb:146:24" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
               ( "GP_Sloc:x86-vm2.adb:146:34" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# raise Return__exc) ) )))) ) )) else (
              ())) ))) )))) );
           ( "GP_Sloc:x86-vm2.adb:150:13" (#"x86-vm2.adb" 150 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:19" (#"x86-vm2.adb" 151 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:16" (#"x86-vm2.adb" 151 0 0# #"x86-vm2.adb" 151 0 0# X86__vm2__create_mapping__current_table.current_table.int__content <- ( (#"x86-vm2.adb" 151 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:151:19" "GP_Id:5" "comment:               := Get_Directory_Ref(Directories(Current_Table)(Offsets(L)));
                  ^ x86-vm2.adb:151:19:VC_PRECONDITION" "GP_Shape:L_4_while__current_table_assign__call_get_directory_ref" (X86__vm2__get_directory_ref___axiom.get_directory_ref((X86__vm2__table_entry__rep.to_rep((let temp___761 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___761) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )))) )) )) );
            X86__vm2__create_mapping__L_4__l.l.int__content <- ( 3 );
           ( "GP_Sloc:x86-vm2.adb:126:10" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:29" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:44" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:14" (#"x86-vm2.adb" 126 0 0# #"x86-vm2.adb" 126 0 0# X86__vm2__create_mapping__pte.pte.BV64.t__content <- ( (X86__vm2__table_entry__rep.to_rep((let temp___756 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___756) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )) )) );
           ( "GP_Sloc:x86-vm2.adb:128:17" (#"x86-vm2.adb" 128 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:128:10" (#"x86-vm2.adb" 128 0 0# (if ((X86__vm2__create_mapping__L_4__l.l.int__content = X86__vm2__create_mapping__target_level.target_level.int__content)) then (
            ( ( "GP_Sloc:x86-vm2.adb:129:17" (#"x86-vm2.adb" 129 0 0# ()) );
            ( "GP_Sloc:x86-vm2.adb:129:13" (#"x86-vm2.adb" 129 0 0# (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:130:24" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:130:34" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# raise Return__exc) ) )) else (
             ( ( "GP_Sloc:x86-vm2.adb:132:28" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:132:43" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:22" (#"x86-vm2.adb" 133 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:19" (#"x86-vm2.adb" 133 0 0# #"x86-vm2.adb" 133 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___760 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
              (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 133 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:133:22" "GP_Id:4" "comment:                  := Make_Frame_Entry(PA, Flags);
                     ^ x86-vm2.adb:133:22:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__directories_assign__call_make_frame_entry" (X86__vm2__make_frame_entry___axiom.make_frame_entry(X86__vm2__create_mapping__pa.pa) (X86__vm2__create_mapping__flags.flags)) ))))))))
             )) )) );
             ( "GP_Sloc:x86-vm2.adb:134:24" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(1)) )) );
             ( "GP_Sloc:x86-vm2.adb:134:33" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# raise Return__exc) ) )))) ) )) else (
            ( "GP_Sloc:x86-vm2.adb:137:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 128 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:138:21" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:138:31" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# raise Return__exc) ) )) else (
             ( "GP_Sloc:x86-vm2.adb:140:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) = ( 0 : BV64.t ))) then (
              ( ( "GP_Sloc:x86-vm2.adb:141:16" (#"x86-vm2.adb" 141 0 0# ()) );
              ( "GP_Sloc:x86-vm2.adb:141:13" (#"x86-vm2.adb" 141 0 0# (if ((X86__vm2__has_free_dir_page___axiom.has_free_dir_page(()))) then (
               ( ( "GP_Sloc:x86-vm2.adb:142:34" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ( (#"x86-vm2.adb" 142 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:142:16" "GP_Reason:VC_PRECONDITION" "GP_Id:1" "comment:               Get_Free_Dir_Page(Dir_Page);
               ^ x86-vm2.adb:142:16:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__call_get_free_dir_page" (X86__vm2__get_free_dir_page___axiom.get_free_dir_page(X86__vm2__create_mapping__dir_page.dir_page)) )) )) );
               ( "GP_Sloc:x86-vm2.adb:143:28" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:143:43" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:43" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:22" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:19" (#"x86-vm2.adb" 144 0 0# #"x86-vm2.adb" 144 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___759 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
                (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:144:22" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" "GP_Id:3" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                     ^ x86-vm2.adb:144:22:VC_PRECONDITION" (X86__vm2__make_directory_entry___axiom.make_directory_entry(X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content) ((let temp___757 = ( 3 : BV64.t ) in (
                 ( #"x86-vm2.adb" 144 0 0# assert { #"x86-vm2.adb" 144 0 0# (#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:144:61" "GP_Reason:VC_PREDICATE_CHECK" "GP_Id:2" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                                                            ^ x86-vm2.adb:144:61:VC_PREDICATE_CHECK" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" (let temp___758 = temp___757 in (
                  ((BV64.bw_and temp___758 ( 4503599627366400 : BV64.t )) = ( 0 : BV64.t ))))
                  )) };
                 temp___757 )))
                )) ))))))))
               )) )) ) )) else (
               ( ( "GP_Sloc:x86-vm2.adb:146:24" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
               ( "GP_Sloc:x86-vm2.adb:146:34" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# raise Return__exc) ) )))) ) )) else (
              ())) ))) )))) );
           ( "GP_Sloc:x86-vm2.adb:150:13" (#"x86-vm2.adb" 150 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:19" (#"x86-vm2.adb" 151 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:16" (#"x86-vm2.adb" 151 0 0# #"x86-vm2.adb" 151 0 0# X86__vm2__create_mapping__current_table.current_table.int__content <- ( (#"x86-vm2.adb" 151 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:151:19" "GP_Id:5" "comment:               := Get_Directory_Ref(Directories(Current_Table)(Offsets(L)));
                  ^ x86-vm2.adb:151:19:VC_PRECONDITION" "GP_Shape:L_4_while__current_table_assign__call_get_directory_ref" (X86__vm2__get_directory_ref___axiom.get_directory_ref((X86__vm2__table_entry__rep.to_rep((let temp___761 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___761) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )))) )) )) );
            X86__vm2__create_mapping__L_4__l.l.int__content <- ( 2 );
           ( "GP_Sloc:x86-vm2.adb:126:10" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:29" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:44" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:14" (#"x86-vm2.adb" 126 0 0# #"x86-vm2.adb" 126 0 0# X86__vm2__create_mapping__pte.pte.BV64.t__content <- ( (X86__vm2__table_entry__rep.to_rep((let temp___756 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___756) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )) )) );
           ( "GP_Sloc:x86-vm2.adb:128:17" (#"x86-vm2.adb" 128 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:128:10" (#"x86-vm2.adb" 128 0 0# (if ((X86__vm2__create_mapping__L_4__l.l.int__content = X86__vm2__create_mapping__target_level.target_level.int__content)) then (
            ( ( "GP_Sloc:x86-vm2.adb:129:17" (#"x86-vm2.adb" 129 0 0# ()) );
            ( "GP_Sloc:x86-vm2.adb:129:13" (#"x86-vm2.adb" 129 0 0# (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:130:24" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:130:34" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# raise Return__exc) ) )) else (
             ( ( "GP_Sloc:x86-vm2.adb:132:28" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:132:43" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:22" (#"x86-vm2.adb" 133 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:19" (#"x86-vm2.adb" 133 0 0# #"x86-vm2.adb" 133 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___760 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
              (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 133 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:133:22" "GP_Id:4" "comment:                  := Make_Frame_Entry(PA, Flags);
                     ^ x86-vm2.adb:133:22:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__directories_assign__call_make_frame_entry" (X86__vm2__make_frame_entry___axiom.make_frame_entry(X86__vm2__create_mapping__pa.pa) (X86__vm2__create_mapping__flags.flags)) ))))))))
             )) )) );
             ( "GP_Sloc:x86-vm2.adb:134:24" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(1)) )) );
             ( "GP_Sloc:x86-vm2.adb:134:33" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# raise Return__exc) ) )))) ) )) else (
            ( "GP_Sloc:x86-vm2.adb:137:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 128 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:138:21" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:138:31" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# raise Return__exc) ) )) else (
             ( "GP_Sloc:x86-vm2.adb:140:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) = ( 0 : BV64.t ))) then (
              ( ( "GP_Sloc:x86-vm2.adb:141:16" (#"x86-vm2.adb" 141 0 0# ()) );
              ( "GP_Sloc:x86-vm2.adb:141:13" (#"x86-vm2.adb" 141 0 0# (if ((X86__vm2__has_free_dir_page___axiom.has_free_dir_page(()))) then (
               ( ( "GP_Sloc:x86-vm2.adb:142:34" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ( (#"x86-vm2.adb" 142 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:142:16" "GP_Reason:VC_PRECONDITION" "GP_Id:1" "comment:               Get_Free_Dir_Page(Dir_Page);
               ^ x86-vm2.adb:142:16:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__call_get_free_dir_page" (X86__vm2__get_free_dir_page___axiom.get_free_dir_page(X86__vm2__create_mapping__dir_page.dir_page)) )) )) );
               ( "GP_Sloc:x86-vm2.adb:143:28" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:143:43" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:43" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:22" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:19" (#"x86-vm2.adb" 144 0 0# #"x86-vm2.adb" 144 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___759 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
                (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:144:22" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" "GP_Id:3" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                     ^ x86-vm2.adb:144:22:VC_PRECONDITION" (X86__vm2__make_directory_entry___axiom.make_directory_entry(X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content) ((let temp___757 = ( 3 : BV64.t ) in (
                 ( #"x86-vm2.adb" 144 0 0# assert { #"x86-vm2.adb" 144 0 0# (#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:144:61" "GP_Reason:VC_PREDICATE_CHECK" "GP_Id:2" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                                                            ^ x86-vm2.adb:144:61:VC_PREDICATE_CHECK" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" (let temp___758 = temp___757 in (
                  ((BV64.bw_and temp___758 ( 4503599627366400 : BV64.t )) = ( 0 : BV64.t ))))
                  )) };
                 temp___757 )))
                )) ))))))))
               )) )) ) )) else (
               ( ( "GP_Sloc:x86-vm2.adb:146:24" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
               ( "GP_Sloc:x86-vm2.adb:146:34" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# raise Return__exc) ) )))) ) )) else (
              ())) ))) )))) );
           ( "GP_Sloc:x86-vm2.adb:150:13" (#"x86-vm2.adb" 150 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:19" (#"x86-vm2.adb" 151 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:16" (#"x86-vm2.adb" 151 0 0# #"x86-vm2.adb" 151 0 0# X86__vm2__create_mapping__current_table.current_table.int__content <- ( (#"x86-vm2.adb" 151 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:151:19" "GP_Id:5" "comment:               := Get_Directory_Ref(Directories(Current_Table)(Offsets(L)));
                  ^ x86-vm2.adb:151:19:VC_PRECONDITION" "GP_Shape:L_4_while__current_table_assign__call_get_directory_ref" (X86__vm2__get_directory_ref___axiom.get_directory_ref((X86__vm2__table_entry__rep.to_rep((let temp___761 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___761) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )))) )) )) );
            X86__vm2__create_mapping__L_4__l.l.int__content <- ( 1 );
           ( "GP_Sloc:x86-vm2.adb:126:10" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:29" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:44" (#"x86-vm2.adb" 126 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:126:14" (#"x86-vm2.adb" 126 0 0# #"x86-vm2.adb" 126 0 0# X86__vm2__create_mapping__pte.pte.BV64.t__content <- ( (X86__vm2__table_entry__rep.to_rep((let temp___756 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___756) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )) )) );
           ( "GP_Sloc:x86-vm2.adb:128:17" (#"x86-vm2.adb" 128 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:128:10" (#"x86-vm2.adb" 128 0 0# (if ((X86__vm2__create_mapping__L_4__l.l.int__content = X86__vm2__create_mapping__target_level.target_level.int__content)) then (
            ( ( "GP_Sloc:x86-vm2.adb:129:17" (#"x86-vm2.adb" 129 0 0# ()) );
            ( "GP_Sloc:x86-vm2.adb:129:13" (#"x86-vm2.adb" 129 0 0# (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:130:24" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:130:34" (#"x86-vm2.adb" 130 0 0# #"x86-vm2.adb" 130 0 0# raise Return__exc) ) )) else (
             ( ( "GP_Sloc:x86-vm2.adb:132:28" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:132:43" (#"x86-vm2.adb" 132 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:22" (#"x86-vm2.adb" 133 0 0# ()) );
             ( "GP_Sloc:x86-vm2.adb:133:19" (#"x86-vm2.adb" 133 0 0# #"x86-vm2.adb" 133 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___760 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
              (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 133 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:133:22" "GP_Id:4" "comment:                  := Make_Frame_Entry(PA, Flags);
                     ^ x86-vm2.adb:133:22:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__directories_assign__call_make_frame_entry" (X86__vm2__make_frame_entry___axiom.make_frame_entry(X86__vm2__create_mapping__pa.pa) (X86__vm2__create_mapping__flags.flags)) ))))))))
             )) )) );
             ( "GP_Sloc:x86-vm2.adb:134:24" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(1)) )) );
             ( "GP_Sloc:x86-vm2.adb:134:33" (#"x86-vm2.adb" 134 0 0# #"x86-vm2.adb" 134 0 0# raise Return__exc) ) )))) ) )) else (
            ( "GP_Sloc:x86-vm2.adb:137:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 128 : BV64.t ))) <> ( 0 : BV64.t ))) then (
             ( ( "GP_Sloc:x86-vm2.adb:138:21" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
             ( "GP_Sloc:x86-vm2.adb:138:31" (#"x86-vm2.adb" 138 0 0# #"x86-vm2.adb" 138 0 0# raise Return__exc) ) )) else (
             ( "GP_Sloc:x86-vm2.adb:140:10" (if (((BV64.bw_and(X86__vm2__create_mapping__pte.pte.BV64.t__content) (( 1 : BV64.t ))) = ( 0 : BV64.t ))) then (
              ( ( "GP_Sloc:x86-vm2.adb:141:16" (#"x86-vm2.adb" 141 0 0# ()) );
              ( "GP_Sloc:x86-vm2.adb:141:13" (#"x86-vm2.adb" 141 0 0# (if ((X86__vm2__has_free_dir_page___axiom.has_free_dir_page(()))) then (
               ( ( "GP_Sloc:x86-vm2.adb:142:34" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:142:16" (#"x86-vm2.adb" 142 0 0# ( (#"x86-vm2.adb" 142 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:142:16" "GP_Reason:VC_PRECONDITION" "GP_Id:1" "comment:               Get_Free_Dir_Page(Dir_Page);
               ^ x86-vm2.adb:142:16:VC_PRECONDITION" "GP_Shape:L_4_while__if__if__call_get_free_dir_page" (X86__vm2__get_free_dir_page___axiom.get_free_dir_page(X86__vm2__create_mapping__dir_page.dir_page)) )) )) );
               ( "GP_Sloc:x86-vm2.adb:143:28" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:143:43" (#"x86-vm2.adb" 143 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:43" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:22" (#"x86-vm2.adb" 144 0 0# ()) );
               ( "GP_Sloc:x86-vm2.adb:144:19" (#"x86-vm2.adb" 144 0 0# #"x86-vm2.adb" 144 0 0# X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content <- ( (Array__Int__X86__vm2__table.set(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content) ((let temp___759 = (Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content) in (
                (Array__Int__X86__vm2__table_entry.set((Array__Int__X86__vm2__table.get X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content X86__vm2__create_mapping__current_table.current_table.int__content)) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))) ((X86__vm2__table_entry__rep.of_rep((#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:144:22" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" "GP_Id:3" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                     ^ x86-vm2.adb:144:22:VC_PRECONDITION" (X86__vm2__make_directory_entry___axiom.make_directory_entry(X86__vm2__create_mapping__dir_page.dir_page.BV64.t__content) ((let temp___757 = ( 3 : BV64.t ) in (
                 ( #"x86-vm2.adb" 144 0 0# assert { #"x86-vm2.adb" 144 0 0# (#"x86-vm2.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:144:61" "GP_Reason:VC_PREDICATE_CHECK" "GP_Id:2" "comment:                  := Make_Directory_Entry(Dir_Page, PRESENT or WRITEABLE);
                                                            ^ x86-vm2.adb:144:61:VC_PREDICATE_CHECK" "GP_Shape:L_4_while__if__if__directories_assign__call_make_directory_entry" (let temp___758 = temp___757 in (
                  ((BV64.bw_and temp___758 ( 4503599627366400 : BV64.t )) = ( 0 : BV64.t ))))
                  )) };
                 temp___757 )))
                )) ))))))))
               )) )) ) )) else (
               ( ( "GP_Sloc:x86-vm2.adb:146:24" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# X86__vm2__create_mapping__success.success.bool__content <- ( (Boolean.of_int(0)) )) );
               ( "GP_Sloc:x86-vm2.adb:146:34" (#"x86-vm2.adb" 146 0 0# #"x86-vm2.adb" 146 0 0# raise Return__exc) ) )))) ) )) else (
              ())) ))) )))) );
           ( "GP_Sloc:x86-vm2.adb:150:13" (#"x86-vm2.adb" 150 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:19" (#"x86-vm2.adb" 151 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:151:16" (#"x86-vm2.adb" 151 0 0# #"x86-vm2.adb" 151 0 0# X86__vm2__create_mapping__current_table.current_table.int__content <- ( (#"x86-vm2.adb" 151 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:x86-vm2.adb:151:19" "GP_Id:5" "comment:               := Get_Directory_Ref(Directories(Current_Table)(Offsets(L)));
                  ^ x86-vm2.adb:151:19:VC_PRECONDITION" "GP_Shape:L_4_while__current_table_assign__call_get_directory_ref" (X86__vm2__get_directory_ref___axiom.get_directory_ref((X86__vm2__table_entry__rep.to_rep((let temp___761 = (Array__Int__X86__vm2__table.get(X86__vm2__directories.directories.Array__Int__X86__vm2__table.map__content) (X86__vm2__create_mapping__current_table.current_table.int__content)) in (
            (Array__Int__X86__vm2__table_entry.get(temp___761) ((X86__vm2__table_index__rep.to_rep((Array__Int__X86__vm2__table_index.get(X86__vm2__create_mapping__offsets.offsets.Array__Int__X86__vm2__table_index.map__content) (X86__vm2__create_mapping__L_4__l.l.int__content))))))))
           )))) )) )) ) )))
           )))
          )))
         )))
        )))
       )))
      )
    with
     X86__vm2__create_mapping__L_4.L_4 -> ()
    end )))
   ))
   ) );
   ( "GP_Sloc:x86-vm2.adb:154:7" (#"x86-vm2.adb" 154 0 0# (#"x86-vm2.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:154:7" "GP_Reason:VC_RAISE" "GP_Id:6" "comment:      raise Program_Error;
      ^ x86-vm2.adb:154:7:VC_RAISE" "GP_Shape:raise_program_error" absurd ))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "has_free_dir_page" defined at x86-vm2.ads:75, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__has_free_dir_page__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        X86__vm2__dir_pages
 use        X86__vm2__Tpage_bit_arrayD1
 use        Array__Int__Bool
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool
 use        X86__vm2__page_bit_array___axiom
 use        X86__vm2__dir_pages___axiom
 use        X86__vm2__Tpage_bit_arrayD1___axiom

 val x86__vm2__has_free_dir_page__result "model_projected" "model_trace:4252@result" "name:Has_Free_Dir_Page"  : bool__ref 
 
 let def #"x86-vm2.ads" 75 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:75" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 75 0 0# true }
  ensures { #"x86-vm2.ads" 75 0 0# (#"x86-vm2.ads" 78 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:x86-vm2.ads:78:13" "GP_Reason:VC_POSTCONDITION" "GP_Id:7" "comment:   Post  => Has_Free_Dir_Page'Result = (for some I of Dir_Pages => I = False);
            ^ x86-vm2.ads:78:13:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:12923" "GP_Sloc:x86-vm2.ads:78:13" ( (x86__vm2__has_free_dir_page__result.bool__content = True) <-> (exists temp___783  : int.
   ( ( (X86__vm2__Tpage_bit_arrayD1.first <= temp___783) /\ (temp___783 <= X86__vm2__Tpage_bit_arrayD1.last) ) /\ (let i = (Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___783) in (
    ( (i = True) <-> false )))
    )) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:75 *)
  ;
   assume {  (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram x86-vm2.ads:75 *)
  ;
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:75 *)
  ;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:75 *)
  ;
   assume {  true };
   try
   ( (#"x86-vm2.adb" 63 0 0# ());
   ( "GP_Sloc:x86-vm2.adb:63:8" (#"x86-vm2.adb" 63 0 0# ( #"x86-vm2.adb" 63 0 0# x86__vm2__has_free_dir_page__result.bool__content <- ( ( (let temp___778 = #"x86-vm2.adb" 63 0 0# (any int
   ) in (
    (if ((Boolean.andb((X86__vm2__Tpage_bit_arrayD1.first <= temp___778)) ((temp___778 <= X86__vm2__Tpage_bit_arrayD1.last)))) then (
     #"x86-vm2.adb" 63 0 0# abstract ensures {true}(let _ = (let page = (Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___778) in (
      not ( page )))
      in (
      ()))
      end ))))
   ;
   #"x86-vm2.adb" 63 0 0# (any bool
   requires {#"x86-vm2.adb" 63 0 0# true} 
   ensures {#"x86-vm2.adb" 63 0 0# ( (result = True) <-> (exists temp___779  : int.
    ( ( (X86__vm2__Tpage_bit_arrayD1.first <= temp___779) /\ (temp___779 <= X86__vm2__Tpage_bit_arrayD1.last) ) /\ (let page = (Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___779) in (
     not ( (page = True) )))
     )) )} 
   ) ) );
   #"x86-vm2.adb" 63 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Boolean.to_int(x86__vm2__has_free_dir_page__result.bool__content)) = (Boolean.to_int(( (let temp___780 =  (any int
  ) in (
   (if ((Boolean.andb((X86__vm2__Tpage_bit_arrayD1.first <= temp___780)) ((temp___780 <= X86__vm2__Tpage_bit_arrayD1.last)))) then (
     abstract ensures {true}(let _ = (let i = (Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___780) in (
     ((Boolean.to_int(i)) = (Boolean.to_int((Boolean.of_int(0)))))))
     in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists temp___781  : int.
   ( ( (X86__vm2__Tpage_bit_arrayD1.first <= temp___781) /\ (temp___781 <= X86__vm2__Tpage_bit_arrayD1.last) ) /\ (let i = (Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___781) in (
    ( (i = True) <-> false )))
    )) )} 
  ) )))) in (
   ()))
   end ;
  x86__vm2__has_free_dir_page__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_free_dir_page" defined at x86-vm2.ads:81, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__get_free_dir_page__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        X86__vm2__has_free_dir_page
 use        X86__vm2__has_free_dir_page___axiom
 use        Common__virtual_address
 use        Common__virtual_address___axiom
 use        X86__vm2__dir_pages
 use        X86__vm2__Tpage_bit_arrayD1
 use        Array__Int__Bool
 use        X86__vm2__page_bit_array___axiom
 use        Array__Int__Bool
 use        X86__vm2__get_free_dir_page__page
 use        X86__vm2__get_free_dir_page__L_1
 use        X86__vm2__get_free_dir_page__L_1__T11b
 use        X86__vm2__get_free_dir_page__L_1__i
 use        Standard__integer___axiom
 use        X86__vm2__get_free_dir_page__L_1__i___axiom
 use        X86__vm2__get_free_dir_page__L_1___axiom
 use        X86__vm2__page_bit_array___axiom
 use        X86__vm2__dir_pages___axiom
 use        X86__vm2__has_free_dir_page___axiom
 use        X86__vm2__get_free_dir_page__page___axiom
 use        Common__virtual_address___axiom
 use        X86__vm2__Tpage_bit_arrayD1___axiom
 use        X86__vm2__get_free_dir_page__L_1__T11b___axiom

 let def #"x86-vm2.ads" 81 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:81" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 81 0 0# true }
  ensures { #"x86-vm2.ads" 81 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:81 *)
  ;
  #"x86-vm2.ads" 81 0 0# assume { #"x86-vm2.ads" 81 0 0# (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True False True True) };
  #"x86-vm2.ads" 81 0 0# assume { #"x86-vm2.ads" 81 0 0# (Common__virtual_address___axiom.dynamic_invariant X86__vm2__get_free_dir_page__page.page.BV64.t__content False False True True) };
  #"x86-vm2.ads" 81 0 0# assume { #"x86-vm2.ads" 81 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram x86-vm2.ads:81 *)
  ;
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:81 *)
  ;
  #"x86-vm2.ads" 81 0 0# abstract ensures {true}(let _ = (X86__vm2__has_free_dir_page___axiom.has_free_dir_page(())) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:81 *)
  ;
  #"x86-vm2.ads" 81 0 0# assume { #"x86-vm2.ads" 81 0 0# ((epsilon temp___result_795 : bool.
   ( (temp___result_795 = (X86__vm2__has_free_dir_page.has_free_dir_page X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content)) /\ (X86__vm2__has_free_dir_page.has_free_dir_page__function_guard temp___result_795 X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) )) = True) };
  #"x86-vm2.ads" 81 0 0# abstract ensures {true}(let _ = (X86__vm2__has_free_dir_page___axiom.has_free_dir_page(())) in (
   ()))
   end ;
  (let temp___784 = #"x86-vm2.ads" 81 0 0# (any bool
  ensures {#"x86-vm2.ads" 81 0 0# (result = (epsilon temp___result_793 : bool.
   ( (temp___result_793 = (X86__vm2__has_free_dir_page.has_free_dir_page X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content)) /\ (X86__vm2__has_free_dir_page.has_free_dir_page__function_guard temp___result_793 X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) )))} 
  ) in (
  (let temp___785 = not ( temp___784 ) in (
   ( #"x86-vm2.ads" 81 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"x86-vm2.ads" 81 0 0# try
    ( (#"x86-vm2.adb" 42 0 0# ());
    (#"x86-vm2.adb" 45 0 0# ());
    ( "GP_Sloc:x86-vm2.adb:45:19" (#"x86-vm2.adb" 45 0 0# ()) );
    ( "GP_Sloc:x86-vm2.adb:45:34" (#"x86-vm2.adb" 45 0 0# (let temp___786 = 0 in (
    (let temp___787 = 511 in (
     ( #"x86-vm2.adb" 45 0 0# X86__vm2__get_free_dir_page__L_1__i.i.int__content <- ( temp___786 );
     () (* Translation of an Ada loop from x86-vm2.adb:45 *)
     ;
     (if ((Boolean.andb((temp___786 <= X86__vm2__get_free_dir_page__L_1__i.i.int__content)) ((X86__vm2__get_free_dir_page__L_1__i.i.int__content <= temp___787)))) then (
      #"x86-vm2.adb" 45 0 0# try
       ( #"x86-vm2.adb" 45 0 0# abstract ensures {true}(let _ = X86__vm2__get_free_dir_page__L_1__i.i.int__content in (
        ()))
        end ;
       (let temp___791 = #"x86-vm2.adb" 45 0 0# (any int
       ensures {#"x86-vm2.adb" 45 0 0# (result = X86__vm2__get_free_dir_page__L_1__i.i.int__content)} 
       ) in (
        ( #"x86-vm2.adb" 45 0 0# abstract ensures {true}(let _ = X86__vm2__get_free_dir_page__page.page.BV64.t__content in (
         ()))
         end ;
        (let temp___790 = #"x86-vm2.adb" 45 0 0# (any BV64.t
        ensures {#"x86-vm2.adb" 45 0 0# (result = X86__vm2__get_free_dir_page__page.page.BV64.t__content)} 
        ) in (
         ( #"x86-vm2.adb" 45 0 0# abstract ensures {true}(let _ = X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content in (
          ()))
          end ;
         (let temp___788 = #"x86-vm2.adb" 45 0 0# (any Array__Int__Bool.map
         ensures {#"x86-vm2.adb" 45 0 0# (result = X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content)} 
         ) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop x86-vm2.adb:45 *)
          ;
          ( "GP_Sloc:x86-vm2.adb:46:13" (#"x86-vm2.adb" 46 0 0# ()) );
          ( "GP_Sloc:x86-vm2.adb:46:10" (#"x86-vm2.adb" 46 0 0# (if (((Boolean.to_int((Array__Int__Bool.get(X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) (X86__vm2__get_free_dir_page__L_1__i.i.int__content)))) = (Boolean.to_int((Boolean.of_int(0)))))) then (
           ( ( "GP_Sloc:x86-vm2.adb:47:13" (#"x86-vm2.adb" 47 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:47:26" (#"x86-vm2.adb" 47 0 0# #"x86-vm2.adb" 47 0 0# X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) (X86__vm2__get_free_dir_page__L_1__i.i.int__content) ((Boolean.of_int(1)))) )) );
           ( "GP_Sloc:x86-vm2.adb:48:18" (#"x86-vm2.adb" 48 0 0# #"x86-vm2.adb" 48 0 0# X86__vm2__get_free_dir_page__page.page.BV64.t__content <- ( (BV64.of_int((#"x86-vm2.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:x86-vm2.adb:48:50" "GP_Shape:L_1_while__if__page_assign__typeconv__add" "GP_Id:10" "comment:            Page := Virtual_Address(PD_POOL_BASE + (I * TABLE_SIZE));
                                                 ^ x86-vm2.adb:48:50:VC_RANGE_CHECK" (Common__virtual_address.range_check_int_((#"x86-vm2.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:x86-vm2.adb:48:50" "GP_Id:9" "comment:            Page := Virtual_Address(PD_POOL_BASE + (I * TABLE_SIZE));
                                                 ^ x86-vm2.adb:48:50:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__page_assign__typeconv__add" (Standard__integer.range_check_((2097152 + (#"x86-vm2.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:48:55" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:8" "comment:            Page := Virtual_Address(PD_POOL_BASE + (I * TABLE_SIZE));
                                                      ^ x86-vm2.adb:48:55:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__page_assign__typeconv__add__mult" (Standard__integer.range_check_((X86__vm2__get_free_dir_page__L_1__i.i.int__content * 4096))) ))))) )))) )))) )) );
           ( "GP_Sloc:x86-vm2.adb:49:13" (#"x86-vm2.adb" 49 0 0# #"x86-vm2.adb" 49 0 0# raise Return__exc) ) )) else (
           ()))) );
          () (* While loop translating the Ada loop from x86-vm2.adb:45 *)
          ;
           while True do
           invariant { 
            (#"x86-vm2.adb" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:51:33" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:12" "comment:         pragma Loop_Invariant (for all J in 0..I => Dir_Pages(J));
                                ^ x86-vm2.adb:51:33:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall j #"x86-vm2.adb" 51 0 0#  "model" "model_trace:2622" "name:J"  : int.
             ( ( (0 <= j) /\ (j <= X86__vm2__get_free_dir_page__L_1__i.i.int__content) ) -> ( "GP_Pretty_Ada:2635" "GP_Sloc:x86-vm2.adb:51:54" ((Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content j) = True) ) )) ))
            }
           ( () (* Assume implicit invariants from the loop x86-vm2.adb:45 *)
           ;
            assume {  (Boolean.andb(( ( ( ( ( ( true /\ (X86__vm2__page_bit_array___axiom.dynamic_invariant X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content True True True True) ) /\ (forall temp___789   : int.
            (if (( (X86__vm2__Tpage_bit_arrayD1.first <= temp___789) /\ (temp___789 <= X86__vm2__Tpage_bit_arrayD1.last) )) then (
             (if (( (temp___787 < temp___789) \/ ( (temp___789 < temp___786) \/ (X86__vm2__get_free_dir_page__L_1__i.i.int__content < temp___789) ) )) then (
              ((Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content temp___789) = (Array__Int__Bool.get temp___788 temp___789))) else (
              true))) else true)) ) /\ (Common__virtual_address___axiom.dynamic_invariant X86__vm2__get_free_dir_page__page.page.BV64.t__content False True True True) ) /\ true ) /\ (if ((X86__vm2__get_free_dir_page__L_1__T11b.first <= X86__vm2__get_free_dir_page__L_1__T11b.last)) then (
            (X86__vm2__get_free_dir_page__L_1__T11b.dynamic_property X86__vm2__get_free_dir_page__L_1__T11b.first X86__vm2__get_free_dir_page__L_1__T11b.last X86__vm2__get_free_dir_page__L_1__i.i.int__content)) else true) ) /\ true )) (( (0 <= X86__vm2__get_free_dir_page__L_1__i.i.int__content) /\ (X86__vm2__get_free_dir_page__L_1__i.i.int__content <= 511) ))) };
           () (* Check for absence of RTE in the invariant of loop x86-vm2.adb:45 *)
           ;
            abstract ensures {true}(let _ = ( (let j =  (any int
           ) in (
            (if ((Boolean.andb((0 <= j)) ((j <= X86__vm2__get_free_dir_page__L_1__i.i.int__content)))) then (
              abstract ensures {true}(let _ = (Array__Int__Bool.get(X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) ((  assert {  (#"x86-vm2.adb" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:51:64" "GP_Reason:VC_INDEX_CHECK" "GP_Id:11" "comment:         pragma Loop_Invariant (for all J in 0..I => Dir_Pages(J));
                                                               ^ x86-vm2.adb:51:64:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__ixdcomp" ( (X86__vm2__Tpage_bit_arrayD1.first <= j) /\ (j <= X86__vm2__Tpage_bit_arrayD1.last) ) )) };
             j ))) in (
              ()))
              end ))))
           ;
            (any bool
           requires { true} 
           ensures { ( (result = True) <-> (forall j   "model" "model_trace:2622" "name:J"  : int.
            ( ( (0 <= j) /\ (j <= X86__vm2__get_free_dir_page__L_1__i.i.int__content) ) -> ((Array__Int__Bool.get X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content j) = True) )) )} 
           ) ) in (
            ()))
            end ;
           () (* Loop statements appearing after the loop invariant of loop x86-vm2.adb:45 *)
           ;
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop x86-vm2.adb:45 *)
           ;
           (if ((X86__vm2__get_free_dir_page__L_1__i.i.int__content = temp___787)) then (
             raise X86__vm2__get_free_dir_page__L_1.L_1));
            X86__vm2__get_free_dir_page__L_1__i.i.int__content <- ( (X86__vm2__get_free_dir_page__L_1__i.i.int__content + 1) );
           ( "GP_Sloc:x86-vm2.adb:46:13" (#"x86-vm2.adb" 46 0 0# ()) );
           ( "GP_Sloc:x86-vm2.adb:46:10" (#"x86-vm2.adb" 46 0 0# (if (((Boolean.to_int((Array__Int__Bool.get(X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) (X86__vm2__get_free_dir_page__L_1__i.i.int__content)))) = (Boolean.to_int((Boolean.of_int(0)))))) then (
            ( ( "GP_Sloc:x86-vm2.adb:47:13" (#"x86-vm2.adb" 47 0 0# ()) );
            ( "GP_Sloc:x86-vm2.adb:47:26" (#"x86-vm2.adb" 47 0 0# #"x86-vm2.adb" 47 0 0# X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(X86__vm2__dir_pages.dir_pages.Array__Int__Bool.map__content) (X86__vm2__get_free_dir_page__L_1__i.i.int__content) ((Boolean.of_int(1)))) )) );
            ( "GP_Sloc:x86-vm2.adb:48:18" (#"x86-vm2.adb" 48 0 0# #"x86-vm2.adb" 48 0 0# X86__vm2__get_free_dir_page__page.page.BV64.t__content <- ( (BV64.of_int((#"x86-vm2.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:x86-vm2.adb:48:50" "GP_Shape:L_1_while__if__page_assign__typeconv__add" "GP_Id:10" "comment:            Page := Virtual_Address(PD_POOL_BASE + (I * TABLE_SIZE));
                                                 ^ x86-vm2.adb:48:50:VC_RANGE_CHECK" (Common__virtual_address.range_check_int_((#"x86-vm2.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:x86-vm2.adb:48:50" "GP_Id:9" "comment:            Page := Virtual_Address(PD_POOL_BASE + (I * TABLE_SIZE));
                                                 ^ x86-vm2.adb:48:50:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__page_assign__typeconv__add" (Standard__integer.range_check_((2097152 + (#"x86-vm2.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.adb:48:55" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:8" "comment:            Page := Virtual_Address(PD_POOL_BASE + (I * TABLE_SIZE));
                                                      ^ x86-vm2.adb:48:55:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__page_assign__typeconv__add__mult" (Standard__integer.range_check_((X86__vm2__get_free_dir_page__L_1__i.i.int__content * 4096))) ))))) )))) )))) )) );
            ( "GP_Sloc:x86-vm2.adb:49:13" (#"x86-vm2.adb" 49 0 0# #"x86-vm2.adb" 49 0 0# raise Return__exc) ) )) else (
            ()))) ) )
          done )))
          )))
         )))
        )
      with
       X86__vm2__get_free_dir_page__L_1.L_1 -> ()
      end)) )))
    ))
    ) );
    ( "GP_Sloc:x86-vm2.adb:54:12" (#"x86-vm2.adb" 54 0 0# #"x86-vm2.adb" 54 0 0# X86__vm2__get_free_dir_page__page.page.BV64.t__content <- ( ( 0 : BV64.t ) )) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = True in (
    ()))
    end ;
    abstract ensures {true}(let _ = (if (temp___784) then (
    ((BV64.bw_and(X86__vm2__get_free_dir_page__page.page.BV64.t__content) (( 18442240474082185215 : BV64.t ))) = ( 0 : BV64.t ))) else (
    True)) in (
    ()))
    end ;
    assert {  (#"x86-vm2.ads" 87 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:x86-vm2.ads:87:25" "GP_Reason:VC_CONTRACT_CASE" "GP_Id:13" "comment:      Has_Free_Dir_Page =>  ((Page and not REFERENCE) = 0),
                        ^ x86-vm2.ads:87:25:VC_CONTRACT_CASE" "GP_Shape:pragargs__aggr" (if ((temp___784 = True)) then (
    ((BV64.bw_and X86__vm2__get_free_dir_page__page.page.BV64.t__content ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t ))) else true) )) };
    abstract ensures {true}(let _ = (if (temp___785) then (
    (X86__vm2__get_free_dir_page__page.page.BV64.t__content = ( 0 : BV64.t ))) else (
    True)) in (
    ()))
    end ;
    assert {  (#"x86-vm2.ads" 88 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_CONTRACT_CASE" "GP_Shape:pragargs__aggr" "GP_Sloc:x86-vm2.ads:88:25" "GP_Id:14" "comment:      others            =>  Page = 0
                        ^ x86-vm2.ads:88:25:VC_CONTRACT_CASE" (if ((temp___785 = True)) then (
    (X86__vm2__get_free_dir_page__page.page.BV64.t__content = ( 0 : BV64.t ))) else true) )) } )))
  ))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "make_directory_entry" defined at x86-vm2.ads:91, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__make_directory_entry__subprogram_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Common__virtual_address___axiom
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__flags_typePredicate__I3s
 use        X86__vm2__make_directory_entry__a
 use        X86__vm2__make_directory_entry__f
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__make_directory_entry__a___axiom
 use        X86__vm2__make_directory_entry__f___axiom
 use        Common__virtual_address___axiom
 use        X86__vm2__flags_typePredicate__I3s___axiom

 let def #"x86-vm2.ads" 91 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:91" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 91 0 0# true }
  ensures { #"x86-vm2.ads" 91 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:91 *)
  ;
  #"x86-vm2.ads" 91 0 0# assume { #"x86-vm2.ads" 91 0 0# (X86__vm2__flags_type___axiom.dynamic_invariant X86__vm2__flags_typePredicate__I3s.i3s True False True True) };
  #"x86-vm2.ads" 91 0 0# assume { #"x86-vm2.ads" 91 0 0# (Common__virtual_address___axiom.dynamic_invariant X86__vm2__make_directory_entry__a.a True False True True) };
  #"x86-vm2.ads" 91 0 0# assume { #"x86-vm2.ads" 91 0 0# (X86__vm2__flags_type___axiom.dynamic_invariant X86__vm2__make_directory_entry__f.f True False True True) };
  #"x86-vm2.ads" 91 0 0# assume { #"x86-vm2.ads" 91 0 0# true };
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:91 *)
  ;
  #"x86-vm2.ads" 91 0 0# abstract ensures {true}(let _ = ( ((BV64.bw_and(X86__vm2__make_directory_entry__a.a) (( 18442240474082185215 : BV64.t ))) = ( 0 : BV64.t )) && ((BV64.bw_and(X86__vm2__make_directory_entry__f.f) (( 128 : BV64.t ))) = ( 0 : BV64.t )) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:91 *)
  ;
  #"x86-vm2.ads" 91 0 0# assume { #"x86-vm2.ads" 91 0 0# ( ((BV64.bw_and X86__vm2__make_directory_entry__a.a ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t )) /\ ((BV64.bw_and X86__vm2__make_directory_entry__f.f ( 128 : BV64.t )) = ( 0 : BV64.t )) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "make_frame_entry" defined at x86-vm2.ads:100, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__make_frame_entry__subprogram_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Common__physical_address___axiom
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__flags_typePredicate__I3s
 use        X86__vm2__make_frame_entry__pa
 use        X86__vm2__make_frame_entry__f
 use        X86__vm2__flags_type___axiom
 use        X86__vm2__make_frame_entry__pa___axiom
 use        X86__vm2__make_frame_entry__f___axiom
 use        Common__physical_address___axiom
 use        X86__vm2__flags_typePredicate__I3s___axiom

 let def #"x86-vm2.ads" 100 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:100" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 100 0 0# true }
  ensures { #"x86-vm2.ads" 100 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:100 *)
  ;
  #"x86-vm2.ads" 100 0 0# assume { #"x86-vm2.ads" 100 0 0# (X86__vm2__flags_type___axiom.dynamic_invariant X86__vm2__flags_typePredicate__I3s.i3s True False True True) };
  #"x86-vm2.ads" 100 0 0# assume { #"x86-vm2.ads" 100 0 0# (Common__physical_address___axiom.dynamic_invariant X86__vm2__make_frame_entry__pa.pa True False True True) };
  #"x86-vm2.ads" 100 0 0# assume { #"x86-vm2.ads" 100 0 0# (X86__vm2__flags_type___axiom.dynamic_invariant X86__vm2__make_frame_entry__f.f True False True True) };
  #"x86-vm2.ads" 100 0 0# assume { #"x86-vm2.ads" 100 0 0# true };
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:100 *)
  ;
  #"x86-vm2.ads" 100 0 0# abstract ensures {true}(let _ = ( ((BV64.bw_and(X86__vm2__make_frame_entry__pa.pa) (( 18442240474082185215 : BV64.t ))) = ( 0 : BV64.t )) && ((BV64.bw_and(X86__vm2__make_frame_entry__f.f) (( 128 : BV64.t ))) <> ( 0 : BV64.t )) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:100 *)
  ;
  #"x86-vm2.ads" 100 0 0# assume { #"x86-vm2.ads" 100 0 0# ( ((BV64.bw_and X86__vm2__make_frame_entry__pa.pa ( 18442240474082185215 : BV64.t )) = ( 0 : BV64.t )) /\ ((BV64.bw_and X86__vm2__make_frame_entry__f.f ( 128 : BV64.t )) <> ( 0 : BV64.t )) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_directory_address" defined at x86-vm2.ads:108, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__get_directory_address__subprogram_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__get_directory_address__t
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__get_directory_address__t___axiom

 let def #"x86-vm2.ads" 108 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:108" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 108 0 0# true }
  ensures { #"x86-vm2.ads" 108 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:108 *)
  ;
  #"x86-vm2.ads" 108 0 0# assume { #"x86-vm2.ads" 108 0 0# (X86__vm2__table_entry___axiom.dynamic_invariant X86__vm2__get_directory_address__t.t True False True True) };
  #"x86-vm2.ads" 108 0 0# assume { #"x86-vm2.ads" 108 0 0# true };
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:108 *)
  ;
  #"x86-vm2.ads" 108 0 0# abstract ensures {true}(let _ = ((BV64.bw_and(X86__vm2__get_directory_address__t.t) (( 128 : BV64.t ))) = ( 0 : BV64.t )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:108 *)
  ;
  #"x86-vm2.ads" 108 0 0# assume { #"x86-vm2.ads" 108 0 0# ((BV64.bw_and X86__vm2__get_directory_address__t.t ( 128 : BV64.t )) = ( 0 : BV64.t )) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_directory_ref" defined at x86-vm2.ads:113, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__get_directory_ref__subprogram_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__get_directory_ref__t
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__get_directory_ref__t___axiom

 let def #"x86-vm2.ads" 113 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:113" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 113 0 0# true }
  ensures { #"x86-vm2.ads" 113 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:113 *)
  ;
  #"x86-vm2.ads" 113 0 0# assume { #"x86-vm2.ads" 113 0 0# (X86__vm2__table_entry___axiom.dynamic_invariant X86__vm2__get_directory_ref__t.t True False True True) };
  #"x86-vm2.ads" 113 0 0# assume { #"x86-vm2.ads" 113 0 0# true };
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:113 *)
  ;
  #"x86-vm2.ads" 113 0 0# abstract ensures {true}(let _ = ((BV64.bw_and(X86__vm2__get_directory_ref__t.t) (( 128 : BV64.t ))) = ( 0 : BV64.t )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:113 *)
  ;
  #"x86-vm2.ads" 113 0 0# assume { #"x86-vm2.ads" 113 0 0# ((BV64.bw_and X86__vm2__get_directory_ref__t.t ( 128 : BV64.t )) = ( 0 : BV64.t )) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_frame_address" defined at x86-vm2.ads:118, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module X86__vm2__get_frame_address__subprogram_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__get_frame_address__t
 use        X86__vm2__table_entry___axiom
 use        X86__vm2__get_frame_address__t___axiom

 let def #"x86-vm2.ads" 118 0 0#"W:diverges:N" "GP_Subp:x86-vm2.ads:118" 
   (__void_param : unit)
  requires { #"x86-vm2.ads" 118 0 0# true }
  ensures { #"x86-vm2.ads" 118 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram x86-vm2.ads:118 *)
  ;
  #"x86-vm2.ads" 118 0 0# assume { #"x86-vm2.ads" 118 0 0# (X86__vm2__table_entry___axiom.dynamic_invariant X86__vm2__get_frame_address__t.t True False True True) };
  #"x86-vm2.ads" 118 0 0# assume { #"x86-vm2.ads" 118 0 0# true };
  () (* Check for RTE in the Pre of the subprogram x86-vm2.ads:118 *)
  ;
  #"x86-vm2.ads" 118 0 0# abstract ensures {true}(let _ = ((BV64.bw_and(X86__vm2__get_frame_address__t.t) (( 128 : BV64.t ))) <> ( 0 : BV64.t )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram x86-vm2.ads:118 *)
  ;
  #"x86-vm2.ads" 118 0 0# assume { #"x86-vm2.ads" 118 0 0# ((BV64.bw_and X86__vm2__get_frame_address__t.t ( 128 : BV64.t )) <> ( 0 : BV64.t )) } )
end
